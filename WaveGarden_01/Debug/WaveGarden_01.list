
WaveGarden_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039d8  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003b84  08003b84  00004b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ba4  08003ba4  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003ba4  08003ba4  00004ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bac  08003bac  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bac  08003bac  00004bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bb0  08003bb0  00004bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003bb4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005010  2**0
                  CONTENTS
 10 .bss          0000011c  20000010  20000010  00005010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000012c  2000012c  00005010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e7e7  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000237f  00000000  00000000  00013827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d30  00000000  00000000  00015ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a3e  00000000  00000000  000168d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000233a6  00000000  00000000  00017316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001005c  00000000  00000000  0003a6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6a46  00000000  00000000  0004a718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012115e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003628  00000000  00000000  001211a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  001247cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003b6c 	.word	0x08003b6c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08003b6c 	.word	0x08003b6c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	607b      	str	r3, [r7, #4]
 8000522:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <MX_DMA_Init+0x3c>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000526:	4a0b      	ldr	r2, [pc, #44]	@ (8000554 <MX_DMA_Init+0x3c>)
 8000528:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800052c:	6313      	str	r3, [r2, #48]	@ 0x30
 800052e:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <MX_DMA_Init+0x3c>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000532:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	2010      	movs	r0, #16
 8000540:	f000 fcb3 	bl	8000eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000544:	2010      	movs	r0, #16
 8000546:	f000 fccc 	bl	8000ee2 <HAL_NVIC_EnableIRQ>

}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40023800 	.word	0x40023800

08000558 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08a      	sub	sp, #40	@ 0x28
 800055c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]
 8000572:	4b39      	ldr	r3, [pc, #228]	@ (8000658 <MX_GPIO_Init+0x100>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000576:	4a38      	ldr	r2, [pc, #224]	@ (8000658 <MX_GPIO_Init+0x100>)
 8000578:	f043 0304 	orr.w	r3, r3, #4
 800057c:	6313      	str	r3, [r2, #48]	@ 0x30
 800057e:	4b36      	ldr	r3, [pc, #216]	@ (8000658 <MX_GPIO_Init+0x100>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	f003 0304 	and.w	r3, r3, #4
 8000586:	613b      	str	r3, [r7, #16]
 8000588:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	4b32      	ldr	r3, [pc, #200]	@ (8000658 <MX_GPIO_Init+0x100>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	4a31      	ldr	r2, [pc, #196]	@ (8000658 <MX_GPIO_Init+0x100>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000598:	6313      	str	r3, [r2, #48]	@ 0x30
 800059a:	4b2f      	ldr	r3, [pc, #188]	@ (8000658 <MX_GPIO_Init+0x100>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	4b2b      	ldr	r3, [pc, #172]	@ (8000658 <MX_GPIO_Init+0x100>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	4a2a      	ldr	r2, [pc, #168]	@ (8000658 <MX_GPIO_Init+0x100>)
 80005b0:	f043 0302 	orr.w	r3, r3, #2
 80005b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b6:	4b28      	ldr	r3, [pc, #160]	@ (8000658 <MX_GPIO_Init+0x100>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f003 0302 	and.w	r3, r3, #2
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	4b24      	ldr	r3, [pc, #144]	@ (8000658 <MX_GPIO_Init+0x100>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a23      	ldr	r2, [pc, #140]	@ (8000658 <MX_GPIO_Init+0x100>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b21      	ldr	r3, [pc, #132]	@ (8000658 <MX_GPIO_Init+0x100>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000658 <MX_GPIO_Init+0x100>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a1c      	ldr	r2, [pc, #112]	@ (8000658 <MX_GPIO_Init+0x100>)
 80005e8:	f043 0308 	orr.w	r3, r3, #8
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000658 <MX_GPIO_Init+0x100>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f003 0308 	and.w	r3, r3, #8
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000600:	4816      	ldr	r0, [pc, #88]	@ (800065c <MX_GPIO_Init+0x104>)
 8000602:	f001 f9b1 	bl	8001968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000606:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800060c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	4810      	ldr	r0, [pc, #64]	@ (8000660 <MX_GPIO_Init+0x108>)
 800061e:	f000 fff7 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000622:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	2301      	movs	r3, #1
 800062a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	2300      	movs	r3, #0
 8000632:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4619      	mov	r1, r3
 800063a:	4808      	ldr	r0, [pc, #32]	@ (800065c <MX_GPIO_Init+0x104>)
 800063c:	f000 ffe8 	bl	8001610 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2100      	movs	r1, #0
 8000644:	2028      	movs	r0, #40	@ 0x28
 8000646:	f000 fc30 	bl	8000eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800064a:	2028      	movs	r0, #40	@ 0x28
 800064c:	f000 fc49 	bl	8000ee2 <HAL_NVIC_EnableIRQ>

}
 8000650:	bf00      	nop
 8000652:	3728      	adds	r7, #40	@ 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40020400 	.word	0x40020400
 8000660:	40020800 	.word	0x40020800

08000664 <LED_Toggle>:
{
  HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_RESET);
}

uint8_t LED_Toggle (uint8_t * GPIO_Port, uint8_t GPIO_Pin)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	460b      	mov	r3, r1
 800066e:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_TogglePin(GPIO_Port, GPIO_Pin);
 8000670:	78fb      	ldrb	r3, [r7, #3]
 8000672:	b29b      	uxth	r3, r3
 8000674:	4619      	mov	r1, r3
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f001 f98f 	bl	800199a <HAL_GPIO_TogglePin>
}
 800067c:	bf00      	nop
 800067e:	4618      	mov	r0, r3
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <LED_Blink>:

uint8_t LED_Blink (void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  if (TIM1_CNT_1 >= 2000)
 800068c:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <LED_Blink+0x24>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000694:	d306      	bcc.n	80006a4 <LED_Blink+0x1c>
  {
    TIM1_CNT_1 = 0;
 8000696:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <LED_Blink+0x24>)
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
    LED_Toggle(LED_PORT, LED1_PIN);
 800069c:	2101      	movs	r1, #1
 800069e:	4804      	ldr	r0, [pc, #16]	@ (80006b0 <LED_Blink+0x28>)
 80006a0:	f7ff ffe0 	bl	8000664 <LED_Toggle>
  }
  return 0;
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	2000007c 	.word	0x2000007c
 80006b0:	40020400 	.word	0x40020400

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 faaa 	bl	8000c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f814 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f7ff ff4a 	bl	8000558 <MX_GPIO_Init>
  MX_DMA_Init();
 80006c4:	f7ff ff28 	bl	8000518 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006c8:	f000 f9cc 	bl	8000a64 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80006cc:	f000 f93a 	bl	8000944 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80006d0:	4803      	ldr	r0, [pc, #12]	@ (80006e0 <main+0x2c>)
 80006d2:	f001 fecd 	bl	8002470 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    LED_Task();
 80006d6:	4b03      	ldr	r3, [pc, #12]	@ (80006e4 <main+0x30>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4798      	blx	r3
 80006dc:	e7fb      	b.n	80006d6 <main+0x22>
 80006de:	bf00      	nop
 80006e0:	20000034 	.word	0x20000034
 80006e4:	20000000 	.word	0x20000000

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	@ 0x50
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	2230      	movs	r2, #48	@ 0x30
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f003 fa0c 	bl	8003b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	4b2b      	ldr	r3, [pc, #172]	@ (80007c0 <SystemClock_Config+0xd8>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000714:	4a2a      	ldr	r2, [pc, #168]	@ (80007c0 <SystemClock_Config+0xd8>)
 8000716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800071a:	6413      	str	r3, [r2, #64]	@ 0x40
 800071c:	4b28      	ldr	r3, [pc, #160]	@ (80007c0 <SystemClock_Config+0xd8>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	4b25      	ldr	r3, [pc, #148]	@ (80007c4 <SystemClock_Config+0xdc>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a24      	ldr	r2, [pc, #144]	@ (80007c4 <SystemClock_Config+0xdc>)
 8000732:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <SystemClock_Config+0xdc>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000744:	2301      	movs	r3, #1
 8000746:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000748:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800074c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	2302      	movs	r3, #2
 8000750:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000752:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000758:	2304      	movs	r3, #4
 800075a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800075c:	23b4      	movs	r3, #180	@ 0xb4
 800075e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000760:	2302      	movs	r3, #2
 8000762:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000764:	2304      	movs	r3, #4
 8000766:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000768:	f107 0320 	add.w	r3, r7, #32
 800076c:	4618      	mov	r0, r3
 800076e:	f001 f997 	bl	8001aa0 <HAL_RCC_OscConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000778:	f000 f826 	bl	80007c8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800077c:	f001 f940 	bl	8001a00 <HAL_PWREx_EnableOverDrive>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000786:	f000 f81f 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	230f      	movs	r3, #15
 800078c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078e:	2302      	movs	r3, #2
 8000790:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000796:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800079a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800079c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	2105      	movs	r1, #5
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 fbf1 	bl	8001f90 <HAL_RCC_ClockConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007b4:	f000 f808 	bl	80007c8 <Error_Handler>
  }
}
 80007b8:	bf00      	nop
 80007ba:	3750      	adds	r7, #80	@ 0x50
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <Error_Handler+0x8>

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b10      	ldr	r3, [pc, #64]	@ (8000820 <HAL_MspInit+0x4c>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000820 <HAL_MspInit+0x4c>)
 80007e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000820 <HAL_MspInit+0x4c>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <HAL_MspInit+0x4c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fe:	4a08      	ldr	r2, [pc, #32]	@ (8000820 <HAL_MspInit+0x4c>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000804:	6413      	str	r3, [r2, #64]	@ 0x40
 8000806:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <HAL_MspInit+0x4c>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <NMI_Handler+0x4>

0800082c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <HardFault_Handler+0x4>

08000834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <MemManage_Handler+0x4>

0800083c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <BusFault_Handler+0x4>

08000844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <UsageFault_Handler+0x4>

0800084c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087a:	f000 fa1b 	bl	8000cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000888:	4802      	ldr	r0, [pc, #8]	@ (8000894 <DMA1_Stream5_IRQHandler+0x10>)
 800088a:	f000 fc85 	bl	8001198 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200000c8 	.word	0x200000c8

08000898 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800089c:	4802      	ldr	r0, [pc, #8]	@ (80008a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800089e:	f001 fe57 	bl	8002550 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000034 	.word	0x20000034

080008ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008b0:	4802      	ldr	r0, [pc, #8]	@ (80008bc <USART2_IRQHandler+0x10>)
 80008b2:	f002 fa4d 	bl	8002d50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000080 	.word	0x20000080

080008c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80008c4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80008c8:	f001 f882 	bl	80019d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13)
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008e0:	d115      	bne.n	800090e <HAL_GPIO_EXTI_Callback+0x3e>
  {
    nowInputButtonTime = HAL_GetTick();
 80008e2:	f000 f9fb 	bl	8000cdc <HAL_GetTick>
 80008e6:	4603      	mov	r3, r0
 80008e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000914 <HAL_GPIO_EXTI_Callback+0x44>)
 80008ea:	6013      	str	r3, [r2, #0]
    if ((nowInputButtonTime - prvInputButtonTime) >= 100)
 80008ec:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <HAL_GPIO_EXTI_Callback+0x44>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <HAL_GPIO_EXTI_Callback+0x48>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	2b63      	cmp	r3, #99	@ 0x63
 80008f8:	d908      	bls.n	800090c <HAL_GPIO_EXTI_Callback+0x3c>
    {
      prvInputButtonTime = nowInputButtonTime;
 80008fa:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <HAL_GPIO_EXTI_Callback+0x44>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a06      	ldr	r2, [pc, #24]	@ (8000918 <HAL_GPIO_EXTI_Callback+0x48>)
 8000900:	6013      	str	r3, [r2, #0]
      HAL_GPIO_TogglePin(LED_PORT, LED2_PIN);
 8000902:	2180      	movs	r1, #128	@ 0x80
 8000904:	4805      	ldr	r0, [pc, #20]	@ (800091c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000906:	f001 f848 	bl	800199a <HAL_GPIO_TogglePin>
 800090a:	e000      	b.n	800090e <HAL_GPIO_EXTI_Callback+0x3e>
    }
    else
    {
      return;
 800090c:	bf00      	nop
    }
  }
}
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000030 	.word	0x20000030
 8000918:	2000002c 	.word	0x2000002c
 800091c:	40020400 	.word	0x40020400

08000920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <SystemInit+0x20>)
 8000926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800092a:	4a05      	ldr	r2, [pc, #20]	@ (8000940 <SystemInit+0x20>)
 800092c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000930:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000958:	463b      	mov	r3, r7
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000960:	4b1e      	ldr	r3, [pc, #120]	@ (80009dc <MX_TIM1_Init+0x98>)
 8000962:	4a1f      	ldr	r2, [pc, #124]	@ (80009e0 <MX_TIM1_Init+0x9c>)
 8000964:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8000966:	4b1d      	ldr	r3, [pc, #116]	@ (80009dc <MX_TIM1_Init+0x98>)
 8000968:	22b3      	movs	r2, #179	@ 0xb3
 800096a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096c:	4b1b      	ldr	r3, [pc, #108]	@ (80009dc <MX_TIM1_Init+0x98>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000972:	4b1a      	ldr	r3, [pc, #104]	@ (80009dc <MX_TIM1_Init+0x98>)
 8000974:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000978:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097a:	4b18      	ldr	r3, [pc, #96]	@ (80009dc <MX_TIM1_Init+0x98>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000980:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <MX_TIM1_Init+0x98>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000986:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <MX_TIM1_Init+0x98>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800098c:	4813      	ldr	r0, [pc, #76]	@ (80009dc <MX_TIM1_Init+0x98>)
 800098e:	f001 fd1f 	bl	80023d0 <HAL_TIM_Base_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000998:	f7ff ff16 	bl	80007c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	4619      	mov	r1, r3
 80009a8:	480c      	ldr	r0, [pc, #48]	@ (80009dc <MX_TIM1_Init+0x98>)
 80009aa:	f001 fec1 	bl	8002730 <HAL_TIM_ConfigClockSource>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80009b4:	f7ff ff08 	bl	80007c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b8:	2300      	movs	r3, #0
 80009ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009c0:	463b      	mov	r3, r7
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_TIM1_Init+0x98>)
 80009c6:	f002 f8e3 	bl	8002b90 <HAL_TIMEx_MasterConfigSynchronization>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009d0:	f7ff fefa 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000034 	.word	0x20000034
 80009e0:	40010000 	.word	0x40010000

080009e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0e      	ldr	r2, [pc, #56]	@ (8000a2c <HAL_TIM_Base_MspInit+0x48>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d115      	bne.n	8000a22 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000a30 <HAL_TIM_Base_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000a30 <HAL_TIM_Base_MspInit+0x4c>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a06:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <HAL_TIM_Base_MspInit+0x4c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	2019      	movs	r0, #25
 8000a18:	f000 fa47 	bl	8000eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a1c:	2019      	movs	r0, #25
 8000a1e:	f000 fa60 	bl	8000ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40010000 	.word	0x40010000
 8000a30:	40023800 	.word	0x40023800

08000a34 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
uint32_t TIM1_CNT_1 = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a06      	ldr	r2, [pc, #24]	@ (8000a5c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d104      	bne.n	8000a50 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
    TIM1_CNT_1++;
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	4a04      	ldr	r2, [pc, #16]	@ (8000a60 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a4e:	6013      	str	r3, [r2, #0]
  }
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	40010000 	.word	0x40010000
 8000a60:	2000007c 	.word	0x2000007c

08000a64 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a68:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	@ (8000ab4 <MX_USART2_UART_Init+0x50>)
 8000a6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a6e:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a88:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <MX_USART2_UART_Init+0x4c>)
 8000a9c:	f002 f908 	bl	8002cb0 <HAL_UART_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aa6:	f7ff fe8f 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000080 	.word	0x20000080
 8000ab4:	40004400 	.word	0x40004400

08000ab8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	@ 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a34      	ldr	r2, [pc, #208]	@ (8000ba8 <HAL_UART_MspInit+0xf0>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d161      	bne.n	8000b9e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	4b33      	ldr	r3, [pc, #204]	@ (8000bac <HAL_UART_MspInit+0xf4>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	4a32      	ldr	r2, [pc, #200]	@ (8000bac <HAL_UART_MspInit+0xf4>)
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aea:	4b30      	ldr	r3, [pc, #192]	@ (8000bac <HAL_UART_MspInit+0xf4>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b2c      	ldr	r3, [pc, #176]	@ (8000bac <HAL_UART_MspInit+0xf4>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4a2b      	ldr	r2, [pc, #172]	@ (8000bac <HAL_UART_MspInit+0xf4>)
 8000b00:	f043 0308 	orr.w	r3, r3, #8
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b06:	4b29      	ldr	r3, [pc, #164]	@ (8000bac <HAL_UART_MspInit+0xf4>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	f003 0308 	and.w	r3, r3, #8
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000b12:	2360      	movs	r3, #96	@ 0x60
 8000b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b22:	2307      	movs	r3, #7
 8000b24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4820      	ldr	r0, [pc, #128]	@ (8000bb0 <HAL_UART_MspInit+0xf8>)
 8000b2e:	f000 fd6f 	bl	8001610 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000b32:	4b20      	ldr	r3, [pc, #128]	@ (8000bb4 <HAL_UART_MspInit+0xfc>)
 8000b34:	4a20      	ldr	r2, [pc, #128]	@ (8000bb8 <HAL_UART_MspInit+0x100>)
 8000b36:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000b38:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb4 <HAL_UART_MspInit+0xfc>)
 8000b3a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b3e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b40:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb4 <HAL_UART_MspInit+0xfc>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b46:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb4 <HAL_UART_MspInit+0xfc>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b4c:	4b19      	ldr	r3, [pc, #100]	@ (8000bb4 <HAL_UART_MspInit+0xfc>)
 8000b4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b52:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b54:	4b17      	ldr	r3, [pc, #92]	@ (8000bb4 <HAL_UART_MspInit+0xfc>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b5a:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <HAL_UART_MspInit+0xfc>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000b60:	4b14      	ldr	r3, [pc, #80]	@ (8000bb4 <HAL_UART_MspInit+0xfc>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b66:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <HAL_UART_MspInit+0xfc>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <HAL_UART_MspInit+0xfc>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b72:	4810      	ldr	r0, [pc, #64]	@ (8000bb4 <HAL_UART_MspInit+0xfc>)
 8000b74:	f000 f9d0 	bl	8000f18 <HAL_DMA_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000b7e:	f7ff fe23 	bl	80007c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb4 <HAL_UART_MspInit+0xfc>)
 8000b86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b88:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb4 <HAL_UART_MspInit+0xfc>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	2026      	movs	r0, #38	@ 0x26
 8000b94:	f000 f989 	bl	8000eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b98:	2026      	movs	r0, #38	@ 0x26
 8000b9a:	f000 f9a2 	bl	8000ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	@ 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40004400 	.word	0x40004400
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020c00 	.word	0x40020c00
 8000bb4:	200000c8 	.word	0x200000c8
 8000bb8:	40026088 	.word	0x40026088

08000bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bf4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bc0:	f7ff feae 	bl	8000920 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc4:	480c      	ldr	r0, [pc, #48]	@ (8000bf8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bc6:	490d      	ldr	r1, [pc, #52]	@ (8000bfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a0a      	ldr	r2, [pc, #40]	@ (8000c04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bdc:	4c0a      	ldr	r4, [pc, #40]	@ (8000c08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bea:	f002 ff9b 	bl	8003b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bee:	f7ff fd61 	bl	80006b4 <main>
  bx  lr    
 8000bf2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000bf4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c00:	08003bb4 	.word	0x08003bb4
  ldr r2, =_sbss
 8000c04:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c08:	2000012c 	.word	0x2000012c

08000c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC_IRQHandler>
	...

08000c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c14:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0d      	ldr	r2, [pc, #52]	@ (8000c50 <HAL_Init+0x40>)
 8000c1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c20:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <HAL_Init+0x40>)
 8000c26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2c:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a07      	ldr	r2, [pc, #28]	@ (8000c50 <HAL_Init+0x40>)
 8000c32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f000 f92b 	bl	8000e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3e:	200f      	movs	r0, #15
 8000c40:	f000 f808 	bl	8000c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c44:	f7ff fdc6 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023c00 	.word	0x40023c00

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <HAL_InitTick+0x54>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <HAL_InitTick+0x58>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f943 	bl	8000efe <HAL_SYSTICK_Config>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00e      	b.n	8000ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d80a      	bhi.n	8000c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f000 f90b 	bl	8000eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c94:	4a06      	ldr	r2, [pc, #24]	@ (8000cb0 <HAL_InitTick+0x5c>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e000      	b.n	8000ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000004 	.word	0x20000004
 8000cac:	2000000c 	.word	0x2000000c
 8000cb0:	20000008 	.word	0x20000008

08000cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <HAL_IncTick+0x20>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_IncTick+0x24>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a04      	ldr	r2, [pc, #16]	@ (8000cd8 <HAL_IncTick+0x24>)
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	2000000c 	.word	0x2000000c
 8000cd8:	20000128 	.word	0x20000128

08000cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce0:	4b03      	ldr	r3, [pc, #12]	@ (8000cf0 <HAL_GetTick+0x14>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000128 	.word	0x20000128

08000cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d04:	4b0c      	ldr	r3, [pc, #48]	@ (8000d38 <__NVIC_SetPriorityGrouping+0x44>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d10:	4013      	ands	r3, r2
 8000d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d26:	4a04      	ldr	r2, [pc, #16]	@ (8000d38 <__NVIC_SetPriorityGrouping+0x44>)
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	60d3      	str	r3, [r2, #12]
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d40:	4b04      	ldr	r3, [pc, #16]	@ (8000d54 <__NVIC_GetPriorityGrouping+0x18>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	f003 0307 	and.w	r3, r3, #7
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	db0b      	blt.n	8000d82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	f003 021f 	and.w	r2, r3, #31
 8000d70:	4907      	ldr	r1, [pc, #28]	@ (8000d90 <__NVIC_EnableIRQ+0x38>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	095b      	lsrs	r3, r3, #5
 8000d78:	2001      	movs	r0, #1
 8000d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000e100 	.word	0xe000e100

08000d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	6039      	str	r1, [r7, #0]
 8000d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	db0a      	blt.n	8000dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	490c      	ldr	r1, [pc, #48]	@ (8000de0 <__NVIC_SetPriority+0x4c>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	0112      	lsls	r2, r2, #4
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	440b      	add	r3, r1
 8000db8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dbc:	e00a      	b.n	8000dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4908      	ldr	r1, [pc, #32]	@ (8000de4 <__NVIC_SetPriority+0x50>)
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	f003 030f 	and.w	r3, r3, #15
 8000dca:	3b04      	subs	r3, #4
 8000dcc:	0112      	lsls	r2, r2, #4
 8000dce:	b2d2      	uxtb	r2, r2
 8000dd0:	440b      	add	r3, r1
 8000dd2:	761a      	strb	r2, [r3, #24]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000e100 	.word	0xe000e100
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b089      	sub	sp, #36	@ 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	f1c3 0307 	rsb	r3, r3, #7
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	bf28      	it	cs
 8000e06:	2304      	movcs	r3, #4
 8000e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	2b06      	cmp	r3, #6
 8000e10:	d902      	bls.n	8000e18 <NVIC_EncodePriority+0x30>
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3b03      	subs	r3, #3
 8000e16:	e000      	b.n	8000e1a <NVIC_EncodePriority+0x32>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43da      	mvns	r2, r3
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e30:	f04f 31ff 	mov.w	r1, #4294967295
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3a:	43d9      	mvns	r1, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	4313      	orrs	r3, r2
         );
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3724      	adds	r7, #36	@ 0x24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e60:	d301      	bcc.n	8000e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00f      	b.n	8000e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e66:	4a0a      	ldr	r2, [pc, #40]	@ (8000e90 <SysTick_Config+0x40>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6e:	210f      	movs	r1, #15
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f7ff ff8e 	bl	8000d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e78:	4b05      	ldr	r3, [pc, #20]	@ (8000e90 <SysTick_Config+0x40>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7e:	4b04      	ldr	r3, [pc, #16]	@ (8000e90 <SysTick_Config+0x40>)
 8000e80:	2207      	movs	r2, #7
 8000e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	e000e010 	.word	0xe000e010

08000e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ff29 	bl	8000cf4 <__NVIC_SetPriorityGrouping>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b086      	sub	sp, #24
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
 8000eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ebc:	f7ff ff3e 	bl	8000d3c <__NVIC_GetPriorityGrouping>
 8000ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	68b9      	ldr	r1, [r7, #8]
 8000ec6:	6978      	ldr	r0, [r7, #20]
 8000ec8:	f7ff ff8e 	bl	8000de8 <NVIC_EncodePriority>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff5d 	bl	8000d94 <__NVIC_SetPriority>
}
 8000eda:	bf00      	nop
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4603      	mov	r3, r0
 8000eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff31 	bl	8000d58 <__NVIC_EnableIRQ>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ffa2 	bl	8000e50 <SysTick_Config>
 8000f0c:	4603      	mov	r3, r0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f24:	f7ff feda 	bl	8000cdc <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d101      	bne.n	8000f34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e099      	b.n	8001068 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2202      	movs	r2, #2
 8000f38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f022 0201 	bic.w	r2, r2, #1
 8000f52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f54:	e00f      	b.n	8000f76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f56:	f7ff fec1 	bl	8000cdc <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	2b05      	cmp	r3, #5
 8000f62:	d908      	bls.n	8000f76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2220      	movs	r2, #32
 8000f68:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e078      	b.n	8001068 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1e8      	bne.n	8000f56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	4b38      	ldr	r3, [pc, #224]	@ (8001070 <HAL_DMA_Init+0x158>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fcc:	2b04      	cmp	r3, #4
 8000fce:	d107      	bne.n	8000fe0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f023 0307 	bic.w	r3, r3, #7
 8000ff6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001006:	2b04      	cmp	r3, #4
 8001008:	d117      	bne.n	800103a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	4313      	orrs	r3, r2
 8001012:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00e      	beq.n	800103a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 fa7b 	bl	8001518 <DMA_CheckFifoParam>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d008      	beq.n	800103a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2240      	movs	r2, #64	@ 0x40
 800102c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001036:	2301      	movs	r3, #1
 8001038:	e016      	b.n	8001068 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 fa32 	bl	80014ac <DMA_CalcBaseAndBitshift>
 8001048:	4603      	mov	r3, r0
 800104a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001050:	223f      	movs	r2, #63	@ 0x3f
 8001052:	409a      	lsls	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001066:	2300      	movs	r3, #0
}
 8001068:	4618      	mov	r0, r3
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	f010803f 	.word	0xf010803f

08001074 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001080:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001082:	f7ff fe2b 	bl	8000cdc <HAL_GetTick>
 8001086:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d008      	beq.n	80010a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2280      	movs	r2, #128	@ 0x80
 8001098:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e052      	b.n	800114c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0216 	bic.w	r2, r2, #22
 80010b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	695a      	ldr	r2, [r3, #20]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d103      	bne.n	80010d6 <HAL_DMA_Abort+0x62>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d007      	beq.n	80010e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 0208 	bic.w	r2, r2, #8
 80010e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f022 0201 	bic.w	r2, r2, #1
 80010f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010f6:	e013      	b.n	8001120 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010f8:	f7ff fdf0 	bl	8000cdc <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b05      	cmp	r3, #5
 8001104:	d90c      	bls.n	8001120 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2220      	movs	r2, #32
 800110a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2203      	movs	r2, #3
 8001110:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e015      	b.n	800114c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1e4      	bne.n	80010f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001132:	223f      	movs	r2, #63	@ 0x3f
 8001134:	409a      	lsls	r2, r3
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2201      	movs	r2, #1
 800113e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d004      	beq.n	8001172 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2280      	movs	r2, #128	@ 0x80
 800116c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e00c      	b.n	800118c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2205      	movs	r2, #5
 8001176:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0201 	bic.w	r2, r2, #1
 8001188:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80011a4:	4b8e      	ldr	r3, [pc, #568]	@ (80013e0 <HAL_DMA_IRQHandler+0x248>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a8e      	ldr	r2, [pc, #568]	@ (80013e4 <HAL_DMA_IRQHandler+0x24c>)
 80011aa:	fba2 2303 	umull	r2, r3, r2, r3
 80011ae:	0a9b      	lsrs	r3, r3, #10
 80011b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011c2:	2208      	movs	r2, #8
 80011c4:	409a      	lsls	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d01a      	beq.n	8001204 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d013      	beq.n	8001204 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0204 	bic.w	r2, r2, #4
 80011ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011f0:	2208      	movs	r2, #8
 80011f2:	409a      	lsls	r2, r3
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011fc:	f043 0201 	orr.w	r2, r3, #1
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001208:	2201      	movs	r2, #1
 800120a:	409a      	lsls	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4013      	ands	r3, r2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d012      	beq.n	800123a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00b      	beq.n	800123a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001226:	2201      	movs	r2, #1
 8001228:	409a      	lsls	r2, r3
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001232:	f043 0202 	orr.w	r2, r3, #2
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800123e:	2204      	movs	r2, #4
 8001240:	409a      	lsls	r2, r3
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4013      	ands	r3, r2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d012      	beq.n	8001270 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00b      	beq.n	8001270 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800125c:	2204      	movs	r2, #4
 800125e:	409a      	lsls	r2, r3
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001268:	f043 0204 	orr.w	r2, r3, #4
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001274:	2210      	movs	r2, #16
 8001276:	409a      	lsls	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4013      	ands	r3, r2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d043      	beq.n	8001308 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	2b00      	cmp	r3, #0
 800128c:	d03c      	beq.n	8001308 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001292:	2210      	movs	r2, #16
 8001294:	409a      	lsls	r2, r3
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d018      	beq.n	80012da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d108      	bne.n	80012c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d024      	beq.n	8001308 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	4798      	blx	r3
 80012c6:	e01f      	b.n	8001308 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d01b      	beq.n	8001308 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	4798      	blx	r3
 80012d8:	e016      	b.n	8001308 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d107      	bne.n	80012f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0208 	bic.w	r2, r2, #8
 80012f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800130c:	2220      	movs	r2, #32
 800130e:	409a      	lsls	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4013      	ands	r3, r2
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 808f 	beq.w	8001438 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0310 	and.w	r3, r3, #16
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 8087 	beq.w	8001438 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800132e:	2220      	movs	r2, #32
 8001330:	409a      	lsls	r2, r3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b05      	cmp	r3, #5
 8001340:	d136      	bne.n	80013b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0216 	bic.w	r2, r2, #22
 8001350:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	695a      	ldr	r2, [r3, #20]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001360:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	2b00      	cmp	r3, #0
 8001368:	d103      	bne.n	8001372 <HAL_DMA_IRQHandler+0x1da>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800136e:	2b00      	cmp	r3, #0
 8001370:	d007      	beq.n	8001382 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0208 	bic.w	r2, r2, #8
 8001380:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001386:	223f      	movs	r2, #63	@ 0x3f
 8001388:	409a      	lsls	r2, r3
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d07e      	beq.n	80014a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	4798      	blx	r3
        }
        return;
 80013ae:	e079      	b.n	80014a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d01d      	beq.n	80013fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d10d      	bne.n	80013e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d031      	beq.n	8001438 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	4798      	blx	r3
 80013dc:	e02c      	b.n	8001438 <HAL_DMA_IRQHandler+0x2a0>
 80013de:	bf00      	nop
 80013e0:	20000004 	.word	0x20000004
 80013e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d023      	beq.n	8001438 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	4798      	blx	r3
 80013f8:	e01e      	b.n	8001438 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001404:	2b00      	cmp	r3, #0
 8001406:	d10f      	bne.n	8001428 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f022 0210 	bic.w	r2, r2, #16
 8001416:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2201      	movs	r2, #1
 800141c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800143c:	2b00      	cmp	r3, #0
 800143e:	d032      	beq.n	80014a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b00      	cmp	r3, #0
 800144a:	d022      	beq.n	8001492 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2205      	movs	r2, #5
 8001450:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 0201 	bic.w	r2, r2, #1
 8001462:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	3301      	adds	r3, #1
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	429a      	cmp	r2, r3
 800146e:	d307      	bcc.n	8001480 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f2      	bne.n	8001464 <HAL_DMA_IRQHandler+0x2cc>
 800147e:	e000      	b.n	8001482 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001480:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001496:	2b00      	cmp	r3, #0
 8001498:	d005      	beq.n	80014a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	4798      	blx	r3
 80014a2:	e000      	b.n	80014a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80014a4:	bf00      	nop
    }
  }
}
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	3b10      	subs	r3, #16
 80014bc:	4a14      	ldr	r2, [pc, #80]	@ (8001510 <DMA_CalcBaseAndBitshift+0x64>)
 80014be:	fba2 2303 	umull	r2, r3, r2, r3
 80014c2:	091b      	lsrs	r3, r3, #4
 80014c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014c6:	4a13      	ldr	r2, [pc, #76]	@ (8001514 <DMA_CalcBaseAndBitshift+0x68>)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d909      	bls.n	80014ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80014e2:	f023 0303 	bic.w	r3, r3, #3
 80014e6:	1d1a      	adds	r2, r3, #4
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80014ec:	e007      	b.n	80014fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80014f6:	f023 0303 	bic.w	r3, r3, #3
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001502:	4618      	mov	r0, r3
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	aaaaaaab 	.word	0xaaaaaaab
 8001514:	08003b9c 	.word	0x08003b9c

08001518 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001528:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d11f      	bne.n	8001572 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	2b03      	cmp	r3, #3
 8001536:	d856      	bhi.n	80015e6 <DMA_CheckFifoParam+0xce>
 8001538:	a201      	add	r2, pc, #4	@ (adr r2, 8001540 <DMA_CheckFifoParam+0x28>)
 800153a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153e:	bf00      	nop
 8001540:	08001551 	.word	0x08001551
 8001544:	08001563 	.word	0x08001563
 8001548:	08001551 	.word	0x08001551
 800154c:	080015e7 	.word	0x080015e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001554:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d046      	beq.n	80015ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001560:	e043      	b.n	80015ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001566:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800156a:	d140      	bne.n	80015ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001570:	e03d      	b.n	80015ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800157a:	d121      	bne.n	80015c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2b03      	cmp	r3, #3
 8001580:	d837      	bhi.n	80015f2 <DMA_CheckFifoParam+0xda>
 8001582:	a201      	add	r2, pc, #4	@ (adr r2, 8001588 <DMA_CheckFifoParam+0x70>)
 8001584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001588:	08001599 	.word	0x08001599
 800158c:	0800159f 	.word	0x0800159f
 8001590:	08001599 	.word	0x08001599
 8001594:	080015b1 	.word	0x080015b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
      break;
 800159c:	e030      	b.n	8001600 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d025      	beq.n	80015f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015ae:	e022      	b.n	80015f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80015b8:	d11f      	bne.n	80015fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80015be:	e01c      	b.n	80015fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d903      	bls.n	80015ce <DMA_CheckFifoParam+0xb6>
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	d003      	beq.n	80015d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80015cc:	e018      	b.n	8001600 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	73fb      	strb	r3, [r7, #15]
      break;
 80015d2:	e015      	b.n	8001600 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00e      	beq.n	80015fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
      break;
 80015e4:	e00b      	b.n	80015fe <DMA_CheckFifoParam+0xe6>
      break;
 80015e6:	bf00      	nop
 80015e8:	e00a      	b.n	8001600 <DMA_CheckFifoParam+0xe8>
      break;
 80015ea:	bf00      	nop
 80015ec:	e008      	b.n	8001600 <DMA_CheckFifoParam+0xe8>
      break;
 80015ee:	bf00      	nop
 80015f0:	e006      	b.n	8001600 <DMA_CheckFifoParam+0xe8>
      break;
 80015f2:	bf00      	nop
 80015f4:	e004      	b.n	8001600 <DMA_CheckFifoParam+0xe8>
      break;
 80015f6:	bf00      	nop
 80015f8:	e002      	b.n	8001600 <DMA_CheckFifoParam+0xe8>
      break;   
 80015fa:	bf00      	nop
 80015fc:	e000      	b.n	8001600 <DMA_CheckFifoParam+0xe8>
      break;
 80015fe:	bf00      	nop
    }
  } 
  
  return status; 
 8001600:	7bfb      	ldrb	r3, [r7, #15]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop

08001610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	@ 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
 800162a:	e177      	b.n	800191c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800162c:	2201      	movs	r2, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	429a      	cmp	r2, r3
 8001646:	f040 8166 	bne.w	8001916 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	2b01      	cmp	r3, #1
 8001654:	d005      	beq.n	8001662 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800165e:	2b02      	cmp	r3, #2
 8001660:	d130      	bne.n	80016c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	2203      	movs	r2, #3
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001698:	2201      	movs	r2, #1
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	f003 0201 	and.w	r2, r3, #1
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d017      	beq.n	8001700 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d123      	bne.n	8001754 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	08da      	lsrs	r2, r3, #3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3208      	adds	r2, #8
 8001714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	220f      	movs	r2, #15
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	691a      	ldr	r2, [r3, #16]
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	08da      	lsrs	r2, r3, #3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3208      	adds	r2, #8
 800174e:	69b9      	ldr	r1, [r7, #24]
 8001750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	2203      	movs	r2, #3
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0203 	and.w	r2, r3, #3
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 80c0 	beq.w	8001916 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b66      	ldr	r3, [pc, #408]	@ (8001934 <HAL_GPIO_Init+0x324>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179e:	4a65      	ldr	r2, [pc, #404]	@ (8001934 <HAL_GPIO_Init+0x324>)
 80017a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017a6:	4b63      	ldr	r3, [pc, #396]	@ (8001934 <HAL_GPIO_Init+0x324>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017b2:	4a61      	ldr	r2, [pc, #388]	@ (8001938 <HAL_GPIO_Init+0x328>)
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	089b      	lsrs	r3, r3, #2
 80017b8:	3302      	adds	r3, #2
 80017ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	220f      	movs	r2, #15
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a58      	ldr	r2, [pc, #352]	@ (800193c <HAL_GPIO_Init+0x32c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d037      	beq.n	800184e <HAL_GPIO_Init+0x23e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a57      	ldr	r2, [pc, #348]	@ (8001940 <HAL_GPIO_Init+0x330>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d031      	beq.n	800184a <HAL_GPIO_Init+0x23a>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a56      	ldr	r2, [pc, #344]	@ (8001944 <HAL_GPIO_Init+0x334>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d02b      	beq.n	8001846 <HAL_GPIO_Init+0x236>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a55      	ldr	r2, [pc, #340]	@ (8001948 <HAL_GPIO_Init+0x338>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d025      	beq.n	8001842 <HAL_GPIO_Init+0x232>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a54      	ldr	r2, [pc, #336]	@ (800194c <HAL_GPIO_Init+0x33c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d01f      	beq.n	800183e <HAL_GPIO_Init+0x22e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a53      	ldr	r2, [pc, #332]	@ (8001950 <HAL_GPIO_Init+0x340>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d019      	beq.n	800183a <HAL_GPIO_Init+0x22a>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a52      	ldr	r2, [pc, #328]	@ (8001954 <HAL_GPIO_Init+0x344>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d013      	beq.n	8001836 <HAL_GPIO_Init+0x226>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a51      	ldr	r2, [pc, #324]	@ (8001958 <HAL_GPIO_Init+0x348>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d00d      	beq.n	8001832 <HAL_GPIO_Init+0x222>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a50      	ldr	r2, [pc, #320]	@ (800195c <HAL_GPIO_Init+0x34c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d007      	beq.n	800182e <HAL_GPIO_Init+0x21e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4f      	ldr	r2, [pc, #316]	@ (8001960 <HAL_GPIO_Init+0x350>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d101      	bne.n	800182a <HAL_GPIO_Init+0x21a>
 8001826:	2309      	movs	r3, #9
 8001828:	e012      	b.n	8001850 <HAL_GPIO_Init+0x240>
 800182a:	230a      	movs	r3, #10
 800182c:	e010      	b.n	8001850 <HAL_GPIO_Init+0x240>
 800182e:	2308      	movs	r3, #8
 8001830:	e00e      	b.n	8001850 <HAL_GPIO_Init+0x240>
 8001832:	2307      	movs	r3, #7
 8001834:	e00c      	b.n	8001850 <HAL_GPIO_Init+0x240>
 8001836:	2306      	movs	r3, #6
 8001838:	e00a      	b.n	8001850 <HAL_GPIO_Init+0x240>
 800183a:	2305      	movs	r3, #5
 800183c:	e008      	b.n	8001850 <HAL_GPIO_Init+0x240>
 800183e:	2304      	movs	r3, #4
 8001840:	e006      	b.n	8001850 <HAL_GPIO_Init+0x240>
 8001842:	2303      	movs	r3, #3
 8001844:	e004      	b.n	8001850 <HAL_GPIO_Init+0x240>
 8001846:	2302      	movs	r3, #2
 8001848:	e002      	b.n	8001850 <HAL_GPIO_Init+0x240>
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <HAL_GPIO_Init+0x240>
 800184e:	2300      	movs	r3, #0
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	f002 0203 	and.w	r2, r2, #3
 8001856:	0092      	lsls	r2, r2, #2
 8001858:	4093      	lsls	r3, r2
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001860:	4935      	ldr	r1, [pc, #212]	@ (8001938 <HAL_GPIO_Init+0x328>)
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	3302      	adds	r3, #2
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800186e:	4b3d      	ldr	r3, [pc, #244]	@ (8001964 <HAL_GPIO_Init+0x354>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	43db      	mvns	r3, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4013      	ands	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001892:	4a34      	ldr	r2, [pc, #208]	@ (8001964 <HAL_GPIO_Init+0x354>)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001898:	4b32      	ldr	r3, [pc, #200]	@ (8001964 <HAL_GPIO_Init+0x354>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018bc:	4a29      	ldr	r2, [pc, #164]	@ (8001964 <HAL_GPIO_Init+0x354>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018c2:	4b28      	ldr	r3, [pc, #160]	@ (8001964 <HAL_GPIO_Init+0x354>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001964 <HAL_GPIO_Init+0x354>)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001964 <HAL_GPIO_Init+0x354>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001910:	4a14      	ldr	r2, [pc, #80]	@ (8001964 <HAL_GPIO_Init+0x354>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3301      	adds	r3, #1
 800191a:	61fb      	str	r3, [r7, #28]
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	2b0f      	cmp	r3, #15
 8001920:	f67f ae84 	bls.w	800162c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3724      	adds	r7, #36	@ 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800
 8001938:	40013800 	.word	0x40013800
 800193c:	40020000 	.word	0x40020000
 8001940:	40020400 	.word	0x40020400
 8001944:	40020800 	.word	0x40020800
 8001948:	40020c00 	.word	0x40020c00
 800194c:	40021000 	.word	0x40021000
 8001950:	40021400 	.word	0x40021400
 8001954:	40021800 	.word	0x40021800
 8001958:	40021c00 	.word	0x40021c00
 800195c:	40022000 	.word	0x40022000
 8001960:	40022400 	.word	0x40022400
 8001964:	40013c00 	.word	0x40013c00

08001968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	807b      	strh	r3, [r7, #2]
 8001974:	4613      	mov	r3, r2
 8001976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001978:	787b      	ldrb	r3, [r7, #1]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800197e:	887a      	ldrh	r2, [r7, #2]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001984:	e003      	b.n	800198e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001986:	887b      	ldrh	r3, [r7, #2]
 8001988:	041a      	lsls	r2, r3, #16
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	619a      	str	r2, [r3, #24]
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800199a:	b480      	push	{r7}
 800199c:	b085      	sub	sp, #20
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	460b      	mov	r3, r1
 80019a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019ac:	887a      	ldrh	r2, [r7, #2]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4013      	ands	r3, r2
 80019b2:	041a      	lsls	r2, r3, #16
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	43d9      	mvns	r1, r3
 80019b8:	887b      	ldrh	r3, [r7, #2]
 80019ba:	400b      	ands	r3, r1
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	619a      	str	r2, [r3, #24]
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019da:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	88fb      	ldrh	r3, [r7, #6]
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d006      	beq.n	80019f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019e6:	4a05      	ldr	r2, [pc, #20]	@ (80019fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019ec:	88fb      	ldrh	r3, [r7, #6]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe ff6e 	bl	80008d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40013c00 	.word	0x40013c00

08001a00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	603b      	str	r3, [r7, #0]
 8001a0e:	4b20      	ldr	r3, [pc, #128]	@ (8001a90 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	4a1f      	ldr	r2, [pc, #124]	@ (8001a90 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a90 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a26:	4b1b      	ldr	r3, [pc, #108]	@ (8001a94 <HAL_PWREx_EnableOverDrive+0x94>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a2c:	f7ff f956 	bl	8000cdc <HAL_GetTick>
 8001a30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a32:	e009      	b.n	8001a48 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a34:	f7ff f952 	bl	8000cdc <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a42:	d901      	bls.n	8001a48 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e01f      	b.n	8001a88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a48:	4b13      	ldr	r3, [pc, #76]	@ (8001a98 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a54:	d1ee      	bne.n	8001a34 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a56:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a5c:	f7ff f93e 	bl	8000cdc <HAL_GetTick>
 8001a60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a62:	e009      	b.n	8001a78 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a64:	f7ff f93a 	bl	8000cdc <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a72:	d901      	bls.n	8001a78 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e007      	b.n	8001a88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a78:	4b07      	ldr	r3, [pc, #28]	@ (8001a98 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001a84:	d1ee      	bne.n	8001a64 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40023800 	.word	0x40023800
 8001a94:	420e0040 	.word	0x420e0040
 8001a98:	40007000 	.word	0x40007000
 8001a9c:	420e0044 	.word	0x420e0044

08001aa0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e267      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d075      	beq.n	8001baa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001abe:	4b88      	ldr	r3, [pc, #544]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d00c      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aca:	4b85      	ldr	r3, [pc, #532]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d112      	bne.n	8001afc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ad6:	4b82      	ldr	r3, [pc, #520]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ade:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ae2:	d10b      	bne.n	8001afc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae4:	4b7e      	ldr	r3, [pc, #504]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d05b      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x108>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d157      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e242      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b04:	d106      	bne.n	8001b14 <HAL_RCC_OscConfig+0x74>
 8001b06:	4b76      	ldr	r3, [pc, #472]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a75      	ldr	r2, [pc, #468]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e01d      	b.n	8001b50 <HAL_RCC_OscConfig+0xb0>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x98>
 8001b1e:	4b70      	ldr	r3, [pc, #448]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a6f      	ldr	r2, [pc, #444]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	4b6d      	ldr	r3, [pc, #436]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a6c      	ldr	r2, [pc, #432]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	e00b      	b.n	8001b50 <HAL_RCC_OscConfig+0xb0>
 8001b38:	4b69      	ldr	r3, [pc, #420]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a68      	ldr	r2, [pc, #416]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	4b66      	ldr	r3, [pc, #408]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a65      	ldr	r2, [pc, #404]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d013      	beq.n	8001b80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff f8c0 	bl	8000cdc <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b60:	f7ff f8bc 	bl	8000cdc <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b64      	cmp	r3, #100	@ 0x64
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e207      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b72:	4b5b      	ldr	r3, [pc, #364]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0xc0>
 8001b7e:	e014      	b.n	8001baa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff f8ac 	bl	8000cdc <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b88:	f7ff f8a8 	bl	8000cdc <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b64      	cmp	r3, #100	@ 0x64
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e1f3      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9a:	4b51      	ldr	r3, [pc, #324]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0xe8>
 8001ba6:	e000      	b.n	8001baa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d063      	beq.n	8001c7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001bb6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00b      	beq.n	8001bda <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bc2:	4b47      	ldr	r3, [pc, #284]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d11c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bce:	4b44      	ldr	r3, [pc, #272]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d116      	bne.n	8001c08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bda:	4b41      	ldr	r3, [pc, #260]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d005      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x152>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d001      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e1c7      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4937      	ldr	r1, [pc, #220]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c06:	e03a      	b.n	8001c7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d020      	beq.n	8001c52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c10:	4b34      	ldr	r3, [pc, #208]	@ (8001ce4 <HAL_RCC_OscConfig+0x244>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c16:	f7ff f861 	bl	8000cdc <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1e:	f7ff f85d 	bl	8000cdc <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e1a8      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c30:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3c:	4b28      	ldr	r3, [pc, #160]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4925      	ldr	r1, [pc, #148]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	600b      	str	r3, [r1, #0]
 8001c50:	e015      	b.n	8001c7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c52:	4b24      	ldr	r3, [pc, #144]	@ (8001ce4 <HAL_RCC_OscConfig+0x244>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7ff f840 	bl	8000cdc <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c60:	f7ff f83c 	bl	8000cdc <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e187      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c72:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d036      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d016      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c92:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <HAL_RCC_OscConfig+0x248>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c98:	f7ff f820 	bl	8000cdc <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca0:	f7ff f81c 	bl	8000cdc <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e167      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce0 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x200>
 8001cbe:	e01b      	b.n	8001cf8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc0:	4b09      	ldr	r3, [pc, #36]	@ (8001ce8 <HAL_RCC_OscConfig+0x248>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc6:	f7ff f809 	bl	8000cdc <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ccc:	e00e      	b.n	8001cec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cce:	f7ff f805 	bl	8000cdc <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d907      	bls.n	8001cec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e150      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	42470000 	.word	0x42470000
 8001ce8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cec:	4b88      	ldr	r3, [pc, #544]	@ (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001cee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1ea      	bne.n	8001cce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 8097 	beq.w	8001e34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d06:	2300      	movs	r3, #0
 8001d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d0a:	4b81      	ldr	r3, [pc, #516]	@ (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10f      	bne.n	8001d36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	4a7c      	ldr	r2, [pc, #496]	@ (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d26:	4b7a      	ldr	r3, [pc, #488]	@ (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d32:	2301      	movs	r3, #1
 8001d34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d36:	4b77      	ldr	r3, [pc, #476]	@ (8001f14 <HAL_RCC_OscConfig+0x474>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d118      	bne.n	8001d74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d42:	4b74      	ldr	r3, [pc, #464]	@ (8001f14 <HAL_RCC_OscConfig+0x474>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a73      	ldr	r2, [pc, #460]	@ (8001f14 <HAL_RCC_OscConfig+0x474>)
 8001d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d4e:	f7fe ffc5 	bl	8000cdc <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d56:	f7fe ffc1 	bl	8000cdc <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e10c      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d68:	4b6a      	ldr	r3, [pc, #424]	@ (8001f14 <HAL_RCC_OscConfig+0x474>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d106      	bne.n	8001d8a <HAL_RCC_OscConfig+0x2ea>
 8001d7c:	4b64      	ldr	r3, [pc, #400]	@ (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d80:	4a63      	ldr	r2, [pc, #396]	@ (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d88:	e01c      	b.n	8001dc4 <HAL_RCC_OscConfig+0x324>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b05      	cmp	r3, #5
 8001d90:	d10c      	bne.n	8001dac <HAL_RCC_OscConfig+0x30c>
 8001d92:	4b5f      	ldr	r3, [pc, #380]	@ (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d96:	4a5e      	ldr	r2, [pc, #376]	@ (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d9e:	4b5c      	ldr	r3, [pc, #368]	@ (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da2:	4a5b      	ldr	r2, [pc, #364]	@ (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001daa:	e00b      	b.n	8001dc4 <HAL_RCC_OscConfig+0x324>
 8001dac:	4b58      	ldr	r3, [pc, #352]	@ (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db0:	4a57      	ldr	r2, [pc, #348]	@ (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001db2:	f023 0301 	bic.w	r3, r3, #1
 8001db6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001db8:	4b55      	ldr	r3, [pc, #340]	@ (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dbc:	4a54      	ldr	r2, [pc, #336]	@ (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001dbe:	f023 0304 	bic.w	r3, r3, #4
 8001dc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d015      	beq.n	8001df8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dcc:	f7fe ff86 	bl	8000cdc <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd2:	e00a      	b.n	8001dea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd4:	f7fe ff82 	bl	8000cdc <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e0cb      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dea:	4b49      	ldr	r3, [pc, #292]	@ (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0ee      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x334>
 8001df6:	e014      	b.n	8001e22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df8:	f7fe ff70 	bl	8000cdc <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e00:	f7fe ff6c 	bl	8000cdc <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e0b5      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e16:	4b3e      	ldr	r3, [pc, #248]	@ (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1ee      	bne.n	8001e00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d105      	bne.n	8001e34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e28:	4b39      	ldr	r3, [pc, #228]	@ (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2c:	4a38      	ldr	r2, [pc, #224]	@ (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001e2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 80a1 	beq.w	8001f80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e3e:	4b34      	ldr	r3, [pc, #208]	@ (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d05c      	beq.n	8001f04 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d141      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e52:	4b31      	ldr	r3, [pc, #196]	@ (8001f18 <HAL_RCC_OscConfig+0x478>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7fe ff40 	bl	8000cdc <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e60:	f7fe ff3c 	bl	8000cdc <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e087      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e72:	4b27      	ldr	r3, [pc, #156]	@ (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69da      	ldr	r2, [r3, #28]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8c:	019b      	lsls	r3, r3, #6
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e94:	085b      	lsrs	r3, r3, #1
 8001e96:	3b01      	subs	r3, #1
 8001e98:	041b      	lsls	r3, r3, #16
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea0:	061b      	lsls	r3, r3, #24
 8001ea2:	491b      	ldr	r1, [pc, #108]	@ (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f18 <HAL_RCC_OscConfig+0x478>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eae:	f7fe ff15 	bl	8000cdc <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb6:	f7fe ff11 	bl	8000cdc <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e05c      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec8:	4b11      	ldr	r3, [pc, #68]	@ (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x416>
 8001ed4:	e054      	b.n	8001f80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed6:	4b10      	ldr	r3, [pc, #64]	@ (8001f18 <HAL_RCC_OscConfig+0x478>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7fe fefe 	bl	8000cdc <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7fe fefa 	bl	8000cdc <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e045      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef6:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <HAL_RCC_OscConfig+0x470>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x444>
 8001f02:	e03d      	b.n	8001f80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d107      	bne.n	8001f1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e038      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40007000 	.word	0x40007000
 8001f18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f8c <HAL_RCC_OscConfig+0x4ec>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d028      	beq.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d121      	bne.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d11a      	bne.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d111      	bne.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f62:	085b      	lsrs	r3, r3, #1
 8001f64:	3b01      	subs	r3, #1
 8001f66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d107      	bne.n	8001f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800

08001f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0cc      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b68      	ldr	r3, [pc, #416]	@ (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d90c      	bls.n	8001fcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b65      	ldr	r3, [pc, #404]	@ (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b63      	ldr	r3, [pc, #396]	@ (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0b8      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d020      	beq.n	800201a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fe4:	4b59      	ldr	r3, [pc, #356]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	4a58      	ldr	r2, [pc, #352]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001fee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ffc:	4b53      	ldr	r3, [pc, #332]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	4a52      	ldr	r2, [pc, #328]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002006:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002008:	4b50      	ldr	r3, [pc, #320]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	494d      	ldr	r1, [pc, #308]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d044      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202e:	4b47      	ldr	r3, [pc, #284]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d119      	bne.n	800206e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e07f      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d003      	beq.n	800204e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800204a:	2b03      	cmp	r3, #3
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204e:	4b3f      	ldr	r3, [pc, #252]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d109      	bne.n	800206e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e06f      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205e:	4b3b      	ldr	r3, [pc, #236]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e067      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800206e:	4b37      	ldr	r3, [pc, #220]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f023 0203 	bic.w	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4934      	ldr	r1, [pc, #208]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	4313      	orrs	r3, r2
 800207e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002080:	f7fe fe2c 	bl	8000cdc <HAL_GetTick>
 8002084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002086:	e00a      	b.n	800209e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002088:	f7fe fe28 	bl	8000cdc <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002096:	4293      	cmp	r3, r2
 8002098:	d901      	bls.n	800209e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e04f      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209e:	4b2b      	ldr	r3, [pc, #172]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 020c 	and.w	r2, r3, #12
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d1eb      	bne.n	8002088 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020b0:	4b25      	ldr	r3, [pc, #148]	@ (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 030f 	and.w	r3, r3, #15
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d20c      	bcs.n	80020d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020be:	4b22      	ldr	r3, [pc, #136]	@ (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c6:	4b20      	ldr	r3, [pc, #128]	@ (8002148 <HAL_RCC_ClockConfig+0x1b8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e032      	b.n	800213e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e4:	4b19      	ldr	r3, [pc, #100]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4916      	ldr	r1, [pc, #88]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d009      	beq.n	8002116 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002102:	4b12      	ldr	r3, [pc, #72]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	490e      	ldr	r1, [pc, #56]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	4313      	orrs	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002116:	f000 f821 	bl	800215c <HAL_RCC_GetSysClockFreq>
 800211a:	4602      	mov	r2, r0
 800211c:	4b0b      	ldr	r3, [pc, #44]	@ (800214c <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	490a      	ldr	r1, [pc, #40]	@ (8002150 <HAL_RCC_ClockConfig+0x1c0>)
 8002128:	5ccb      	ldrb	r3, [r1, r3]
 800212a:	fa22 f303 	lsr.w	r3, r2, r3
 800212e:	4a09      	ldr	r2, [pc, #36]	@ (8002154 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002132:	4b09      	ldr	r3, [pc, #36]	@ (8002158 <HAL_RCC_ClockConfig+0x1c8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fd8c 	bl	8000c54 <HAL_InitTick>

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40023c00 	.word	0x40023c00
 800214c:	40023800 	.word	0x40023800
 8002150:	08003b84 	.word	0x08003b84
 8002154:	20000004 	.word	0x20000004
 8002158:	20000008 	.word	0x20000008

0800215c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800215c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002160:	b094      	sub	sp, #80	@ 0x50
 8002162:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002174:	4b79      	ldr	r3, [pc, #484]	@ (800235c <HAL_RCC_GetSysClockFreq+0x200>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b08      	cmp	r3, #8
 800217e:	d00d      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0x40>
 8002180:	2b08      	cmp	r3, #8
 8002182:	f200 80e1 	bhi.w	8002348 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002186:	2b00      	cmp	r3, #0
 8002188:	d002      	beq.n	8002190 <HAL_RCC_GetSysClockFreq+0x34>
 800218a:	2b04      	cmp	r3, #4
 800218c:	d003      	beq.n	8002196 <HAL_RCC_GetSysClockFreq+0x3a>
 800218e:	e0db      	b.n	8002348 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002190:	4b73      	ldr	r3, [pc, #460]	@ (8002360 <HAL_RCC_GetSysClockFreq+0x204>)
 8002192:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002194:	e0db      	b.n	800234e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002196:	4b73      	ldr	r3, [pc, #460]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x208>)
 8002198:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800219a:	e0d8      	b.n	800234e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800219c:	4b6f      	ldr	r3, [pc, #444]	@ (800235c <HAL_RCC_GetSysClockFreq+0x200>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021a6:	4b6d      	ldr	r3, [pc, #436]	@ (800235c <HAL_RCC_GetSysClockFreq+0x200>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d063      	beq.n	800227a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b2:	4b6a      	ldr	r3, [pc, #424]	@ (800235c <HAL_RCC_GetSysClockFreq+0x200>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	099b      	lsrs	r3, r3, #6
 80021b8:	2200      	movs	r2, #0
 80021ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80021bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80021be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80021c6:	2300      	movs	r3, #0
 80021c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80021ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80021ce:	4622      	mov	r2, r4
 80021d0:	462b      	mov	r3, r5
 80021d2:	f04f 0000 	mov.w	r0, #0
 80021d6:	f04f 0100 	mov.w	r1, #0
 80021da:	0159      	lsls	r1, r3, #5
 80021dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021e0:	0150      	lsls	r0, r2, #5
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4621      	mov	r1, r4
 80021e8:	1a51      	subs	r1, r2, r1
 80021ea:	6139      	str	r1, [r7, #16]
 80021ec:	4629      	mov	r1, r5
 80021ee:	eb63 0301 	sbc.w	r3, r3, r1
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002200:	4659      	mov	r1, fp
 8002202:	018b      	lsls	r3, r1, #6
 8002204:	4651      	mov	r1, sl
 8002206:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800220a:	4651      	mov	r1, sl
 800220c:	018a      	lsls	r2, r1, #6
 800220e:	4651      	mov	r1, sl
 8002210:	ebb2 0801 	subs.w	r8, r2, r1
 8002214:	4659      	mov	r1, fp
 8002216:	eb63 0901 	sbc.w	r9, r3, r1
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002226:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800222a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800222e:	4690      	mov	r8, r2
 8002230:	4699      	mov	r9, r3
 8002232:	4623      	mov	r3, r4
 8002234:	eb18 0303 	adds.w	r3, r8, r3
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	462b      	mov	r3, r5
 800223c:	eb49 0303 	adc.w	r3, r9, r3
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800224e:	4629      	mov	r1, r5
 8002250:	024b      	lsls	r3, r1, #9
 8002252:	4621      	mov	r1, r4
 8002254:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002258:	4621      	mov	r1, r4
 800225a:	024a      	lsls	r2, r1, #9
 800225c:	4610      	mov	r0, r2
 800225e:	4619      	mov	r1, r3
 8002260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002262:	2200      	movs	r2, #0
 8002264:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002266:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002268:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800226c:	f7fd ffbe 	bl	80001ec <__aeabi_uldivmod>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4613      	mov	r3, r2
 8002276:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002278:	e058      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800227a:	4b38      	ldr	r3, [pc, #224]	@ (800235c <HAL_RCC_GetSysClockFreq+0x200>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	099b      	lsrs	r3, r3, #6
 8002280:	2200      	movs	r2, #0
 8002282:	4618      	mov	r0, r3
 8002284:	4611      	mov	r1, r2
 8002286:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800228a:	623b      	str	r3, [r7, #32]
 800228c:	2300      	movs	r3, #0
 800228e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002290:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002294:	4642      	mov	r2, r8
 8002296:	464b      	mov	r3, r9
 8002298:	f04f 0000 	mov.w	r0, #0
 800229c:	f04f 0100 	mov.w	r1, #0
 80022a0:	0159      	lsls	r1, r3, #5
 80022a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022a6:	0150      	lsls	r0, r2, #5
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4641      	mov	r1, r8
 80022ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80022b2:	4649      	mov	r1, r9
 80022b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022cc:	ebb2 040a 	subs.w	r4, r2, sl
 80022d0:	eb63 050b 	sbc.w	r5, r3, fp
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	00eb      	lsls	r3, r5, #3
 80022de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022e2:	00e2      	lsls	r2, r4, #3
 80022e4:	4614      	mov	r4, r2
 80022e6:	461d      	mov	r5, r3
 80022e8:	4643      	mov	r3, r8
 80022ea:	18e3      	adds	r3, r4, r3
 80022ec:	603b      	str	r3, [r7, #0]
 80022ee:	464b      	mov	r3, r9
 80022f0:	eb45 0303 	adc.w	r3, r5, r3
 80022f4:	607b      	str	r3, [r7, #4]
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002302:	4629      	mov	r1, r5
 8002304:	028b      	lsls	r3, r1, #10
 8002306:	4621      	mov	r1, r4
 8002308:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800230c:	4621      	mov	r1, r4
 800230e:	028a      	lsls	r2, r1, #10
 8002310:	4610      	mov	r0, r2
 8002312:	4619      	mov	r1, r3
 8002314:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002316:	2200      	movs	r2, #0
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	61fa      	str	r2, [r7, #28]
 800231c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002320:	f7fd ff64 	bl	80001ec <__aeabi_uldivmod>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4613      	mov	r3, r2
 800232a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800232c:	4b0b      	ldr	r3, [pc, #44]	@ (800235c <HAL_RCC_GetSysClockFreq+0x200>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	0c1b      	lsrs	r3, r3, #16
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	3301      	adds	r3, #1
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800233c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800233e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002340:	fbb2 f3f3 	udiv	r3, r2, r3
 8002344:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002346:	e002      	b.n	800234e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002348:	4b05      	ldr	r3, [pc, #20]	@ (8002360 <HAL_RCC_GetSysClockFreq+0x204>)
 800234a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800234c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800234e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002350:	4618      	mov	r0, r3
 8002352:	3750      	adds	r7, #80	@ 0x50
 8002354:	46bd      	mov	sp, r7
 8002356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800
 8002360:	00f42400 	.word	0x00f42400
 8002364:	007a1200 	.word	0x007a1200

08002368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800236c:	4b03      	ldr	r3, [pc, #12]	@ (800237c <HAL_RCC_GetHCLKFreq+0x14>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	20000004 	.word	0x20000004

08002380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002384:	f7ff fff0 	bl	8002368 <HAL_RCC_GetHCLKFreq>
 8002388:	4602      	mov	r2, r0
 800238a:	4b05      	ldr	r3, [pc, #20]	@ (80023a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	0a9b      	lsrs	r3, r3, #10
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	4903      	ldr	r1, [pc, #12]	@ (80023a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002396:	5ccb      	ldrb	r3, [r1, r3]
 8002398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800239c:	4618      	mov	r0, r3
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40023800 	.word	0x40023800
 80023a4:	08003b94 	.word	0x08003b94

080023a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023ac:	f7ff ffdc 	bl	8002368 <HAL_RCC_GetHCLKFreq>
 80023b0:	4602      	mov	r2, r0
 80023b2:	4b05      	ldr	r3, [pc, #20]	@ (80023c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	0b5b      	lsrs	r3, r3, #13
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	4903      	ldr	r1, [pc, #12]	@ (80023cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023be:	5ccb      	ldrb	r3, [r1, r3]
 80023c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40023800 	.word	0x40023800
 80023cc:	08003b94 	.word	0x08003b94

080023d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e041      	b.n	8002466 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d106      	bne.n	80023fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7fe faf4 	bl	80009e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3304      	adds	r3, #4
 800240c:	4619      	mov	r1, r3
 800240e:	4610      	mov	r0, r2
 8002410:	f000 fa7e 	bl	8002910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b01      	cmp	r3, #1
 8002482:	d001      	beq.n	8002488 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e04e      	b.n	8002526 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a23      	ldr	r2, [pc, #140]	@ (8002534 <HAL_TIM_Base_Start_IT+0xc4>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d022      	beq.n	80024f0 <HAL_TIM_Base_Start_IT+0x80>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024b2:	d01d      	beq.n	80024f0 <HAL_TIM_Base_Start_IT+0x80>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002538 <HAL_TIM_Base_Start_IT+0xc8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d018      	beq.n	80024f0 <HAL_TIM_Base_Start_IT+0x80>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a1e      	ldr	r2, [pc, #120]	@ (800253c <HAL_TIM_Base_Start_IT+0xcc>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d013      	beq.n	80024f0 <HAL_TIM_Base_Start_IT+0x80>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002540 <HAL_TIM_Base_Start_IT+0xd0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d00e      	beq.n	80024f0 <HAL_TIM_Base_Start_IT+0x80>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002544 <HAL_TIM_Base_Start_IT+0xd4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d009      	beq.n	80024f0 <HAL_TIM_Base_Start_IT+0x80>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a19      	ldr	r2, [pc, #100]	@ (8002548 <HAL_TIM_Base_Start_IT+0xd8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d004      	beq.n	80024f0 <HAL_TIM_Base_Start_IT+0x80>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a18      	ldr	r2, [pc, #96]	@ (800254c <HAL_TIM_Base_Start_IT+0xdc>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d111      	bne.n	8002514 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b06      	cmp	r3, #6
 8002500:	d010      	beq.n	8002524 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0201 	orr.w	r2, r2, #1
 8002510:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002512:	e007      	b.n	8002524 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40010000 	.word	0x40010000
 8002538:	40000400 	.word	0x40000400
 800253c:	40000800 	.word	0x40000800
 8002540:	40000c00 	.word	0x40000c00
 8002544:	40010400 	.word	0x40010400
 8002548:	40014000 	.word	0x40014000
 800254c:	40001800 	.word	0x40001800

08002550 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d020      	beq.n	80025b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01b      	beq.n	80025b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f06f 0202 	mvn.w	r2, #2
 8002584:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f999 	bl	80028d2 <HAL_TIM_IC_CaptureCallback>
 80025a0:	e005      	b.n	80025ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f98b 	bl	80028be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f99c 	bl	80028e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d020      	beq.n	8002600 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d01b      	beq.n	8002600 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f06f 0204 	mvn.w	r2, #4
 80025d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2202      	movs	r2, #2
 80025d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f973 	bl	80028d2 <HAL_TIM_IC_CaptureCallback>
 80025ec:	e005      	b.n	80025fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f965 	bl	80028be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f976 	bl	80028e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d020      	beq.n	800264c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d01b      	beq.n	800264c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0208 	mvn.w	r2, #8
 800261c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2204      	movs	r2, #4
 8002622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f94d 	bl	80028d2 <HAL_TIM_IC_CaptureCallback>
 8002638:	e005      	b.n	8002646 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f93f 	bl	80028be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f950 	bl	80028e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	2b00      	cmp	r3, #0
 8002654:	d020      	beq.n	8002698 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f003 0310 	and.w	r3, r3, #16
 800265c:	2b00      	cmp	r3, #0
 800265e:	d01b      	beq.n	8002698 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f06f 0210 	mvn.w	r2, #16
 8002668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2208      	movs	r2, #8
 800266e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f927 	bl	80028d2 <HAL_TIM_IC_CaptureCallback>
 8002684:	e005      	b.n	8002692 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f919 	bl	80028be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f92a 	bl	80028e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00c      	beq.n	80026bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d007      	beq.n	80026bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0201 	mvn.w	r2, #1
 80026b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7fe f9bc 	bl	8000a34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00c      	beq.n	80026e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d007      	beq.n	80026e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80026d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fade 	bl	8002c9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00c      	beq.n	8002704 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d007      	beq.n	8002704 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f8fb 	bl	80028fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	f003 0320 	and.w	r3, r3, #32
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00c      	beq.n	8002728 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f003 0320 	and.w	r3, r3, #32
 8002714:	2b00      	cmp	r3, #0
 8002716:	d007      	beq.n	8002728 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f06f 0220 	mvn.w	r2, #32
 8002720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 fab0 	bl	8002c88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002728:	bf00      	nop
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_TIM_ConfigClockSource+0x1c>
 8002748:	2302      	movs	r3, #2
 800274a:	e0b4      	b.n	80028b6 <HAL_TIM_ConfigClockSource+0x186>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800276a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002772:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002784:	d03e      	beq.n	8002804 <HAL_TIM_ConfigClockSource+0xd4>
 8002786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800278a:	f200 8087 	bhi.w	800289c <HAL_TIM_ConfigClockSource+0x16c>
 800278e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002792:	f000 8086 	beq.w	80028a2 <HAL_TIM_ConfigClockSource+0x172>
 8002796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800279a:	d87f      	bhi.n	800289c <HAL_TIM_ConfigClockSource+0x16c>
 800279c:	2b70      	cmp	r3, #112	@ 0x70
 800279e:	d01a      	beq.n	80027d6 <HAL_TIM_ConfigClockSource+0xa6>
 80027a0:	2b70      	cmp	r3, #112	@ 0x70
 80027a2:	d87b      	bhi.n	800289c <HAL_TIM_ConfigClockSource+0x16c>
 80027a4:	2b60      	cmp	r3, #96	@ 0x60
 80027a6:	d050      	beq.n	800284a <HAL_TIM_ConfigClockSource+0x11a>
 80027a8:	2b60      	cmp	r3, #96	@ 0x60
 80027aa:	d877      	bhi.n	800289c <HAL_TIM_ConfigClockSource+0x16c>
 80027ac:	2b50      	cmp	r3, #80	@ 0x50
 80027ae:	d03c      	beq.n	800282a <HAL_TIM_ConfigClockSource+0xfa>
 80027b0:	2b50      	cmp	r3, #80	@ 0x50
 80027b2:	d873      	bhi.n	800289c <HAL_TIM_ConfigClockSource+0x16c>
 80027b4:	2b40      	cmp	r3, #64	@ 0x40
 80027b6:	d058      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x13a>
 80027b8:	2b40      	cmp	r3, #64	@ 0x40
 80027ba:	d86f      	bhi.n	800289c <HAL_TIM_ConfigClockSource+0x16c>
 80027bc:	2b30      	cmp	r3, #48	@ 0x30
 80027be:	d064      	beq.n	800288a <HAL_TIM_ConfigClockSource+0x15a>
 80027c0:	2b30      	cmp	r3, #48	@ 0x30
 80027c2:	d86b      	bhi.n	800289c <HAL_TIM_ConfigClockSource+0x16c>
 80027c4:	2b20      	cmp	r3, #32
 80027c6:	d060      	beq.n	800288a <HAL_TIM_ConfigClockSource+0x15a>
 80027c8:	2b20      	cmp	r3, #32
 80027ca:	d867      	bhi.n	800289c <HAL_TIM_ConfigClockSource+0x16c>
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d05c      	beq.n	800288a <HAL_TIM_ConfigClockSource+0x15a>
 80027d0:	2b10      	cmp	r3, #16
 80027d2:	d05a      	beq.n	800288a <HAL_TIM_ConfigClockSource+0x15a>
 80027d4:	e062      	b.n	800289c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027e6:	f000 f9b3 	bl	8002b50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80027f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	609a      	str	r2, [r3, #8]
      break;
 8002802:	e04f      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002814:	f000 f99c 	bl	8002b50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689a      	ldr	r2, [r3, #8]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002826:	609a      	str	r2, [r3, #8]
      break;
 8002828:	e03c      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002836:	461a      	mov	r2, r3
 8002838:	f000 f910 	bl	8002a5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2150      	movs	r1, #80	@ 0x50
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f969 	bl	8002b1a <TIM_ITRx_SetConfig>
      break;
 8002848:	e02c      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002856:	461a      	mov	r2, r3
 8002858:	f000 f92f 	bl	8002aba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2160      	movs	r1, #96	@ 0x60
 8002862:	4618      	mov	r0, r3
 8002864:	f000 f959 	bl	8002b1a <TIM_ITRx_SetConfig>
      break;
 8002868:	e01c      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002876:	461a      	mov	r2, r3
 8002878:	f000 f8f0 	bl	8002a5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2140      	movs	r1, #64	@ 0x40
 8002882:	4618      	mov	r0, r3
 8002884:	f000 f949 	bl	8002b1a <TIM_ITRx_SetConfig>
      break;
 8002888:	e00c      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4619      	mov	r1, r3
 8002894:	4610      	mov	r0, r2
 8002896:	f000 f940 	bl	8002b1a <TIM_ITRx_SetConfig>
      break;
 800289a:	e003      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	73fb      	strb	r3, [r7, #15]
      break;
 80028a0:	e000      	b.n	80028a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a43      	ldr	r2, [pc, #268]	@ (8002a30 <TIM_Base_SetConfig+0x120>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d013      	beq.n	8002950 <TIM_Base_SetConfig+0x40>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800292e:	d00f      	beq.n	8002950 <TIM_Base_SetConfig+0x40>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a40      	ldr	r2, [pc, #256]	@ (8002a34 <TIM_Base_SetConfig+0x124>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d00b      	beq.n	8002950 <TIM_Base_SetConfig+0x40>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a3f      	ldr	r2, [pc, #252]	@ (8002a38 <TIM_Base_SetConfig+0x128>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d007      	beq.n	8002950 <TIM_Base_SetConfig+0x40>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a3e      	ldr	r2, [pc, #248]	@ (8002a3c <TIM_Base_SetConfig+0x12c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d003      	beq.n	8002950 <TIM_Base_SetConfig+0x40>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a3d      	ldr	r2, [pc, #244]	@ (8002a40 <TIM_Base_SetConfig+0x130>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d108      	bne.n	8002962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a32      	ldr	r2, [pc, #200]	@ (8002a30 <TIM_Base_SetConfig+0x120>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d02b      	beq.n	80029c2 <TIM_Base_SetConfig+0xb2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002970:	d027      	beq.n	80029c2 <TIM_Base_SetConfig+0xb2>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a2f      	ldr	r2, [pc, #188]	@ (8002a34 <TIM_Base_SetConfig+0x124>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d023      	beq.n	80029c2 <TIM_Base_SetConfig+0xb2>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a2e      	ldr	r2, [pc, #184]	@ (8002a38 <TIM_Base_SetConfig+0x128>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d01f      	beq.n	80029c2 <TIM_Base_SetConfig+0xb2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a2d      	ldr	r2, [pc, #180]	@ (8002a3c <TIM_Base_SetConfig+0x12c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d01b      	beq.n	80029c2 <TIM_Base_SetConfig+0xb2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a2c      	ldr	r2, [pc, #176]	@ (8002a40 <TIM_Base_SetConfig+0x130>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d017      	beq.n	80029c2 <TIM_Base_SetConfig+0xb2>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a2b      	ldr	r2, [pc, #172]	@ (8002a44 <TIM_Base_SetConfig+0x134>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d013      	beq.n	80029c2 <TIM_Base_SetConfig+0xb2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a2a      	ldr	r2, [pc, #168]	@ (8002a48 <TIM_Base_SetConfig+0x138>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00f      	beq.n	80029c2 <TIM_Base_SetConfig+0xb2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a29      	ldr	r2, [pc, #164]	@ (8002a4c <TIM_Base_SetConfig+0x13c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00b      	beq.n	80029c2 <TIM_Base_SetConfig+0xb2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a28      	ldr	r2, [pc, #160]	@ (8002a50 <TIM_Base_SetConfig+0x140>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d007      	beq.n	80029c2 <TIM_Base_SetConfig+0xb2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a27      	ldr	r2, [pc, #156]	@ (8002a54 <TIM_Base_SetConfig+0x144>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d003      	beq.n	80029c2 <TIM_Base_SetConfig+0xb2>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a26      	ldr	r2, [pc, #152]	@ (8002a58 <TIM_Base_SetConfig+0x148>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d108      	bne.n	80029d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	4313      	orrs	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a0e      	ldr	r2, [pc, #56]	@ (8002a30 <TIM_Base_SetConfig+0x120>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d003      	beq.n	8002a02 <TIM_Base_SetConfig+0xf2>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a10      	ldr	r2, [pc, #64]	@ (8002a40 <TIM_Base_SetConfig+0x130>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d103      	bne.n	8002a0a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f043 0204 	orr.w	r2, r3, #4
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	601a      	str	r2, [r3, #0]
}
 8002a22:	bf00      	nop
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40010000 	.word	0x40010000
 8002a34:	40000400 	.word	0x40000400
 8002a38:	40000800 	.word	0x40000800
 8002a3c:	40000c00 	.word	0x40000c00
 8002a40:	40010400 	.word	0x40010400
 8002a44:	40014000 	.word	0x40014000
 8002a48:	40014400 	.word	0x40014400
 8002a4c:	40014800 	.word	0x40014800
 8002a50:	40001800 	.word	0x40001800
 8002a54:	40001c00 	.word	0x40001c00
 8002a58:	40002000 	.word	0x40002000

08002a5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	f023 0201 	bic.w	r2, r3, #1
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f023 030a 	bic.w	r3, r3, #10
 8002a98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	621a      	str	r2, [r3, #32]
}
 8002aae:	bf00      	nop
 8002ab0:	371c      	adds	r7, #28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b087      	sub	sp, #28
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	f023 0210 	bic.w	r2, r3, #16
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ae4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	031b      	lsls	r3, r3, #12
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002af6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	621a      	str	r2, [r3, #32]
}
 8002b0e:	bf00      	nop
 8002b10:	371c      	adds	r7, #28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b085      	sub	sp, #20
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f043 0307 	orr.w	r3, r3, #7
 8002b3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	609a      	str	r2, [r3, #8]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	021a      	lsls	r2, r3, #8
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	609a      	str	r2, [r3, #8]
}
 8002b84:	bf00      	nop
 8002b86:	371c      	adds	r7, #28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e05a      	b.n	8002c5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a21      	ldr	r2, [pc, #132]	@ (8002c6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d022      	beq.n	8002c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf4:	d01d      	beq.n	8002c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8002c70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d018      	beq.n	8002c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a1b      	ldr	r2, [pc, #108]	@ (8002c74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d013      	beq.n	8002c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8002c78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00e      	beq.n	8002c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a18      	ldr	r2, [pc, #96]	@ (8002c7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d009      	beq.n	8002c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a17      	ldr	r2, [pc, #92]	@ (8002c80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d004      	beq.n	8002c32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a15      	ldr	r2, [pc, #84]	@ (8002c84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d10c      	bne.n	8002c4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40010000 	.word	0x40010000
 8002c70:	40000400 	.word	0x40000400
 8002c74:	40000800 	.word	0x40000800
 8002c78:	40000c00 	.word	0x40000c00
 8002c7c:	40010400 	.word	0x40010400
 8002c80:	40014000 	.word	0x40014000
 8002c84:	40001800 	.word	0x40001800

08002c88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e042      	b.n	8002d48 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fd feee 	bl	8000ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2224      	movs	r2, #36	@ 0x24
 8002ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002cf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fc99 	bl	800362c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b0ba      	sub	sp, #232	@ 0xe8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002d8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10f      	bne.n	8002db6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d009      	beq.n	8002db6 <HAL_UART_IRQHandler+0x66>
 8002da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fb7e 	bl	80034b0 <UART_Receive_IT>
      return;
 8002db4:	e273      	b.n	800329e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002db6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 80de 	beq.w	8002f7c <HAL_UART_IRQHandler+0x22c>
 8002dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d106      	bne.n	8002dda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dd0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80d1 	beq.w	8002f7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00b      	beq.n	8002dfe <HAL_UART_IRQHandler+0xae>
 8002de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d005      	beq.n	8002dfe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df6:	f043 0201 	orr.w	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00b      	beq.n	8002e22 <HAL_UART_IRQHandler+0xd2>
 8002e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d005      	beq.n	8002e22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1a:	f043 0202 	orr.w	r2, r3, #2
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00b      	beq.n	8002e46 <HAL_UART_IRQHandler+0xf6>
 8002e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d005      	beq.n	8002e46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3e:	f043 0204 	orr.w	r2, r3, #4
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d011      	beq.n	8002e76 <HAL_UART_IRQHandler+0x126>
 8002e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d105      	bne.n	8002e6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d005      	beq.n	8002e76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6e:	f043 0208 	orr.w	r2, r3, #8
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 820a 	beq.w	8003294 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_UART_IRQHandler+0x14e>
 8002e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e90:	f003 0320 	and.w	r3, r3, #32
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 fb09 	bl	80034b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea8:	2b40      	cmp	r3, #64	@ 0x40
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d103      	bne.n	8002eca <HAL_UART_IRQHandler+0x17a>
 8002ec2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d04f      	beq.n	8002f6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fa14 	bl	80032f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eda:	2b40      	cmp	r3, #64	@ 0x40
 8002edc:	d141      	bne.n	8002f62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	3314      	adds	r3, #20
 8002ee4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002eec:	e853 3f00 	ldrex	r3, [r3]
 8002ef0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ef8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002efc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3314      	adds	r3, #20
 8002f06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f1a:	e841 2300 	strex	r3, r2, [r1]
 8002f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1d9      	bne.n	8002ede <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d013      	beq.n	8002f5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f36:	4a8a      	ldr	r2, [pc, #552]	@ (8003160 <HAL_UART_IRQHandler+0x410>)
 8002f38:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe f908 	bl	8001154 <HAL_DMA_Abort_IT>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d016      	beq.n	8002f78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f54:	4610      	mov	r0, r2
 8002f56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f58:	e00e      	b.n	8002f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f9b6 	bl	80032cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f60:	e00a      	b.n	8002f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f9b2 	bl	80032cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f68:	e006      	b.n	8002f78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f9ae 	bl	80032cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002f76:	e18d      	b.n	8003294 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f78:	bf00      	nop
    return;
 8002f7a:	e18b      	b.n	8003294 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	f040 8167 	bne.w	8003254 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8160 	beq.w	8003254 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8002f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 8159 	beq.w	8003254 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc2:	2b40      	cmp	r3, #64	@ 0x40
 8002fc4:	f040 80ce 	bne.w	8003164 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 80a9 	beq.w	8003130 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002fe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	f080 80a2 	bcs.w	8003130 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ff2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ffe:	f000 8088 	beq.w	8003112 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	330c      	adds	r3, #12
 8003008:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003010:	e853 3f00 	ldrex	r3, [r3]
 8003014:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003018:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800301c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003020:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	330c      	adds	r3, #12
 800302a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800302e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003032:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003036:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800303a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800303e:	e841 2300 	strex	r3, r2, [r1]
 8003042:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003046:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1d9      	bne.n	8003002 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	3314      	adds	r3, #20
 8003054:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003056:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003058:	e853 3f00 	ldrex	r3, [r3]
 800305c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800305e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3314      	adds	r3, #20
 800306e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003072:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003076:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003078:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800307a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800307e:	e841 2300 	strex	r3, r2, [r1]
 8003082:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003084:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1e1      	bne.n	800304e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3314      	adds	r3, #20
 8003090:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003092:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003094:	e853 3f00 	ldrex	r3, [r3]
 8003098:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800309a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800309c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	3314      	adds	r3, #20
 80030aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80030ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80030b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80030b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80030b6:	e841 2300 	strex	r3, r2, [r1]
 80030ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80030bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1e3      	bne.n	800308a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	330c      	adds	r3, #12
 80030d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030da:	e853 3f00 	ldrex	r3, [r3]
 80030de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80030e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030e2:	f023 0310 	bic.w	r3, r3, #16
 80030e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	330c      	adds	r3, #12
 80030f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80030f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80030f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80030fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030fc:	e841 2300 	strex	r3, r2, [r1]
 8003100:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003102:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1e3      	bne.n	80030d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800310c:	4618      	mov	r0, r3
 800310e:	f7fd ffb1 	bl	8001074 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2202      	movs	r2, #2
 8003116:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003120:	b29b      	uxth	r3, r3
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	b29b      	uxth	r3, r3
 8003126:	4619      	mov	r1, r3
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f8d9 	bl	80032e0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800312e:	e0b3      	b.n	8003298 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003134:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003138:	429a      	cmp	r2, r3
 800313a:	f040 80ad 	bne.w	8003298 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003148:	f040 80a6 	bne.w	8003298 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003156:	4619      	mov	r1, r3
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f8c1 	bl	80032e0 <HAL_UARTEx_RxEventCallback>
      return;
 800315e:	e09b      	b.n	8003298 <HAL_UART_IRQHandler+0x548>
 8003160:	080033bf 	.word	0x080033bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800316c:	b29b      	uxth	r3, r3
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 808e 	beq.w	800329c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003180:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 8089 	beq.w	800329c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	330c      	adds	r3, #12
 8003190:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003194:	e853 3f00 	ldrex	r3, [r3]
 8003198:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800319a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	330c      	adds	r3, #12
 80031aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80031ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80031b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031b6:	e841 2300 	strex	r3, r2, [r1]
 80031ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1e3      	bne.n	800318a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3314      	adds	r3, #20
 80031c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031cc:	e853 3f00 	ldrex	r3, [r3]
 80031d0:	623b      	str	r3, [r7, #32]
   return(result);
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3314      	adds	r3, #20
 80031e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80031e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80031e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031ee:	e841 2300 	strex	r3, r2, [r1]
 80031f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1e3      	bne.n	80031c2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	330c      	adds	r3, #12
 800320e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	e853 3f00 	ldrex	r3, [r3]
 8003216:	60fb      	str	r3, [r7, #12]
   return(result);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f023 0310 	bic.w	r3, r3, #16
 800321e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	330c      	adds	r3, #12
 8003228:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800322c:	61fa      	str	r2, [r7, #28]
 800322e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003230:	69b9      	ldr	r1, [r7, #24]
 8003232:	69fa      	ldr	r2, [r7, #28]
 8003234:	e841 2300 	strex	r3, r2, [r1]
 8003238:	617b      	str	r3, [r7, #20]
   return(result);
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1e3      	bne.n	8003208 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003246:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800324a:	4619      	mov	r1, r3
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f847 	bl	80032e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003252:	e023      	b.n	800329c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800325c:	2b00      	cmp	r3, #0
 800325e:	d009      	beq.n	8003274 <HAL_UART_IRQHandler+0x524>
 8003260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f8b7 	bl	80033e0 <UART_Transmit_IT>
    return;
 8003272:	e014      	b.n	800329e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00e      	beq.n	800329e <HAL_UART_IRQHandler+0x54e>
 8003280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f8f7 	bl	8003480 <UART_EndTransmit_IT>
    return;
 8003292:	e004      	b.n	800329e <HAL_UART_IRQHandler+0x54e>
    return;
 8003294:	bf00      	nop
 8003296:	e002      	b.n	800329e <HAL_UART_IRQHandler+0x54e>
      return;
 8003298:	bf00      	nop
 800329a:	e000      	b.n	800329e <HAL_UART_IRQHandler+0x54e>
      return;
 800329c:	bf00      	nop
  }
}
 800329e:	37e8      	adds	r7, #232	@ 0xe8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b095      	sub	sp, #84	@ 0x54
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	330c      	adds	r3, #12
 8003306:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800330a:	e853 3f00 	ldrex	r3, [r3]
 800330e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003312:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	330c      	adds	r3, #12
 800331e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003320:	643a      	str	r2, [r7, #64]	@ 0x40
 8003322:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003324:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003326:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003328:	e841 2300 	strex	r3, r2, [r1]
 800332c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800332e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1e5      	bne.n	8003300 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3314      	adds	r3, #20
 800333a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	e853 3f00 	ldrex	r3, [r3]
 8003342:	61fb      	str	r3, [r7, #28]
   return(result);
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f023 0301 	bic.w	r3, r3, #1
 800334a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3314      	adds	r3, #20
 8003352:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003354:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003356:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003358:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800335a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800335c:	e841 2300 	strex	r3, r2, [r1]
 8003360:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1e5      	bne.n	8003334 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336c:	2b01      	cmp	r3, #1
 800336e:	d119      	bne.n	80033a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	330c      	adds	r3, #12
 8003376:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	e853 3f00 	ldrex	r3, [r3]
 800337e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f023 0310 	bic.w	r3, r3, #16
 8003386:	647b      	str	r3, [r7, #68]	@ 0x44
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	330c      	adds	r3, #12
 800338e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003390:	61ba      	str	r2, [r7, #24]
 8003392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003394:	6979      	ldr	r1, [r7, #20]
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	e841 2300 	strex	r3, r2, [r1]
 800339c:	613b      	str	r3, [r7, #16]
   return(result);
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1e5      	bne.n	8003370 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80033b2:	bf00      	nop
 80033b4:	3754      	adds	r7, #84	@ 0x54
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f7ff ff7a 	bl	80032cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033d8:	bf00      	nop
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b21      	cmp	r3, #33	@ 0x21
 80033f2:	d13e      	bne.n	8003472 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033fc:	d114      	bne.n	8003428 <UART_Transmit_IT+0x48>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d110      	bne.n	8003428 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800341a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	1c9a      	adds	r2, r3, #2
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	621a      	str	r2, [r3, #32]
 8003426:	e008      	b.n	800343a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	1c59      	adds	r1, r3, #1
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6211      	str	r1, [r2, #32]
 8003432:	781a      	ldrb	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b29b      	uxth	r3, r3
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	4619      	mov	r1, r3
 8003448:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10f      	bne.n	800346e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800345c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800346c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	e000      	b.n	8003474 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003472:	2302      	movs	r3, #2
  }
}
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003496:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff feff 	bl	80032a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08c      	sub	sp, #48	@ 0x30
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b22      	cmp	r3, #34	@ 0x22
 80034ca:	f040 80aa 	bne.w	8003622 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034d6:	d115      	bne.n	8003504 <UART_Receive_IT+0x54>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d111      	bne.n	8003504 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fc:	1c9a      	adds	r2, r3, #2
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	629a      	str	r2, [r3, #40]	@ 0x28
 8003502:	e024      	b.n	800354e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003508:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003512:	d007      	beq.n	8003524 <UART_Receive_IT+0x74>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10a      	bne.n	8003532 <UART_Receive_IT+0x82>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d106      	bne.n	8003532 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	b2da      	uxtb	r2, r3
 800352c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800352e:	701a      	strb	r2, [r3, #0]
 8003530:	e008      	b.n	8003544 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800353e:	b2da      	uxtb	r2, r3
 8003540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003542:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29b      	uxth	r3, r3
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	4619      	mov	r1, r3
 800355c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800355e:	2b00      	cmp	r3, #0
 8003560:	d15d      	bne.n	800361e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0220 	bic.w	r2, r2, #32
 8003570:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003580:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695a      	ldr	r2, [r3, #20]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0201 	bic.w	r2, r2, #1
 8003590:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2220      	movs	r2, #32
 8003596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d135      	bne.n	8003614 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	330c      	adds	r3, #12
 80035b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	e853 3f00 	ldrex	r3, [r3]
 80035bc:	613b      	str	r3, [r7, #16]
   return(result);
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f023 0310 	bic.w	r3, r3, #16
 80035c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	330c      	adds	r3, #12
 80035cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ce:	623a      	str	r2, [r7, #32]
 80035d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d2:	69f9      	ldr	r1, [r7, #28]
 80035d4:	6a3a      	ldr	r2, [r7, #32]
 80035d6:	e841 2300 	strex	r3, r2, [r1]
 80035da:	61bb      	str	r3, [r7, #24]
   return(result);
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1e5      	bne.n	80035ae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	2b10      	cmp	r3, #16
 80035ee:	d10a      	bne.n	8003606 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035f0:	2300      	movs	r3, #0
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800360a:	4619      	mov	r1, r3
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff fe67 	bl	80032e0 <HAL_UARTEx_RxEventCallback>
 8003612:	e002      	b.n	800361a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff fe4f 	bl	80032b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	e002      	b.n	8003624 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	e000      	b.n	8003624 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003622:	2302      	movs	r3, #2
  }
}
 8003624:	4618      	mov	r0, r3
 8003626:	3730      	adds	r7, #48	@ 0x30
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800362c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003630:	b0c0      	sub	sp, #256	@ 0x100
 8003632:	af00      	add	r7, sp, #0
 8003634:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003648:	68d9      	ldr	r1, [r3, #12]
 800364a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	ea40 0301 	orr.w	r3, r0, r1
 8003654:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	431a      	orrs	r2, r3
 8003664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	431a      	orrs	r2, r3
 800366c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003684:	f021 010c 	bic.w	r1, r1, #12
 8003688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003692:	430b      	orrs	r3, r1
 8003694:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80036a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a6:	6999      	ldr	r1, [r3, #24]
 80036a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	ea40 0301 	orr.w	r3, r0, r1
 80036b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	4b8f      	ldr	r3, [pc, #572]	@ (80038f8 <UART_SetConfig+0x2cc>)
 80036bc:	429a      	cmp	r2, r3
 80036be:	d005      	beq.n	80036cc <UART_SetConfig+0xa0>
 80036c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	4b8d      	ldr	r3, [pc, #564]	@ (80038fc <UART_SetConfig+0x2d0>)
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d104      	bne.n	80036d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036cc:	f7fe fe6c 	bl	80023a8 <HAL_RCC_GetPCLK2Freq>
 80036d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80036d4:	e003      	b.n	80036de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036d6:	f7fe fe53 	bl	8002380 <HAL_RCC_GetPCLK1Freq>
 80036da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036e8:	f040 810c 	bne.w	8003904 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036f0:	2200      	movs	r2, #0
 80036f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80036f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80036fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80036fe:	4622      	mov	r2, r4
 8003700:	462b      	mov	r3, r5
 8003702:	1891      	adds	r1, r2, r2
 8003704:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003706:	415b      	adcs	r3, r3
 8003708:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800370a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800370e:	4621      	mov	r1, r4
 8003710:	eb12 0801 	adds.w	r8, r2, r1
 8003714:	4629      	mov	r1, r5
 8003716:	eb43 0901 	adc.w	r9, r3, r1
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	f04f 0300 	mov.w	r3, #0
 8003722:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003726:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800372a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800372e:	4690      	mov	r8, r2
 8003730:	4699      	mov	r9, r3
 8003732:	4623      	mov	r3, r4
 8003734:	eb18 0303 	adds.w	r3, r8, r3
 8003738:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800373c:	462b      	mov	r3, r5
 800373e:	eb49 0303 	adc.w	r3, r9, r3
 8003742:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003752:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003756:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800375a:	460b      	mov	r3, r1
 800375c:	18db      	adds	r3, r3, r3
 800375e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003760:	4613      	mov	r3, r2
 8003762:	eb42 0303 	adc.w	r3, r2, r3
 8003766:	657b      	str	r3, [r7, #84]	@ 0x54
 8003768:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800376c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003770:	f7fc fd3c 	bl	80001ec <__aeabi_uldivmod>
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	4b61      	ldr	r3, [pc, #388]	@ (8003900 <UART_SetConfig+0x2d4>)
 800377a:	fba3 2302 	umull	r2, r3, r3, r2
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	011c      	lsls	r4, r3, #4
 8003782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003786:	2200      	movs	r2, #0
 8003788:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800378c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003790:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003794:	4642      	mov	r2, r8
 8003796:	464b      	mov	r3, r9
 8003798:	1891      	adds	r1, r2, r2
 800379a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800379c:	415b      	adcs	r3, r3
 800379e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80037a4:	4641      	mov	r1, r8
 80037a6:	eb12 0a01 	adds.w	sl, r2, r1
 80037aa:	4649      	mov	r1, r9
 80037ac:	eb43 0b01 	adc.w	fp, r3, r1
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037c4:	4692      	mov	sl, r2
 80037c6:	469b      	mov	fp, r3
 80037c8:	4643      	mov	r3, r8
 80037ca:	eb1a 0303 	adds.w	r3, sl, r3
 80037ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037d2:	464b      	mov	r3, r9
 80037d4:	eb4b 0303 	adc.w	r3, fp, r3
 80037d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80037ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80037f0:	460b      	mov	r3, r1
 80037f2:	18db      	adds	r3, r3, r3
 80037f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80037f6:	4613      	mov	r3, r2
 80037f8:	eb42 0303 	adc.w	r3, r2, r3
 80037fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80037fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003802:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003806:	f7fc fcf1 	bl	80001ec <__aeabi_uldivmod>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	4611      	mov	r1, r2
 8003810:	4b3b      	ldr	r3, [pc, #236]	@ (8003900 <UART_SetConfig+0x2d4>)
 8003812:	fba3 2301 	umull	r2, r3, r3, r1
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	2264      	movs	r2, #100	@ 0x64
 800381a:	fb02 f303 	mul.w	r3, r2, r3
 800381e:	1acb      	subs	r3, r1, r3
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003826:	4b36      	ldr	r3, [pc, #216]	@ (8003900 <UART_SetConfig+0x2d4>)
 8003828:	fba3 2302 	umull	r2, r3, r3, r2
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003834:	441c      	add	r4, r3
 8003836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800383a:	2200      	movs	r2, #0
 800383c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003840:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003844:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003848:	4642      	mov	r2, r8
 800384a:	464b      	mov	r3, r9
 800384c:	1891      	adds	r1, r2, r2
 800384e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003850:	415b      	adcs	r3, r3
 8003852:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003854:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003858:	4641      	mov	r1, r8
 800385a:	1851      	adds	r1, r2, r1
 800385c:	6339      	str	r1, [r7, #48]	@ 0x30
 800385e:	4649      	mov	r1, r9
 8003860:	414b      	adcs	r3, r1
 8003862:	637b      	str	r3, [r7, #52]	@ 0x34
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003870:	4659      	mov	r1, fp
 8003872:	00cb      	lsls	r3, r1, #3
 8003874:	4651      	mov	r1, sl
 8003876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800387a:	4651      	mov	r1, sl
 800387c:	00ca      	lsls	r2, r1, #3
 800387e:	4610      	mov	r0, r2
 8003880:	4619      	mov	r1, r3
 8003882:	4603      	mov	r3, r0
 8003884:	4642      	mov	r2, r8
 8003886:	189b      	adds	r3, r3, r2
 8003888:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800388c:	464b      	mov	r3, r9
 800388e:	460a      	mov	r2, r1
 8003890:	eb42 0303 	adc.w	r3, r2, r3
 8003894:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80038a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80038ac:	460b      	mov	r3, r1
 80038ae:	18db      	adds	r3, r3, r3
 80038b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038b2:	4613      	mov	r3, r2
 80038b4:	eb42 0303 	adc.w	r3, r2, r3
 80038b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80038c2:	f7fc fc93 	bl	80001ec <__aeabi_uldivmod>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003900 <UART_SetConfig+0x2d4>)
 80038cc:	fba3 1302 	umull	r1, r3, r3, r2
 80038d0:	095b      	lsrs	r3, r3, #5
 80038d2:	2164      	movs	r1, #100	@ 0x64
 80038d4:	fb01 f303 	mul.w	r3, r1, r3
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	3332      	adds	r3, #50	@ 0x32
 80038de:	4a08      	ldr	r2, [pc, #32]	@ (8003900 <UART_SetConfig+0x2d4>)
 80038e0:	fba2 2303 	umull	r2, r3, r2, r3
 80038e4:	095b      	lsrs	r3, r3, #5
 80038e6:	f003 0207 	and.w	r2, r3, #7
 80038ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4422      	add	r2, r4
 80038f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038f4:	e106      	b.n	8003b04 <UART_SetConfig+0x4d8>
 80038f6:	bf00      	nop
 80038f8:	40011000 	.word	0x40011000
 80038fc:	40011400 	.word	0x40011400
 8003900:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003908:	2200      	movs	r2, #0
 800390a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800390e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003912:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003916:	4642      	mov	r2, r8
 8003918:	464b      	mov	r3, r9
 800391a:	1891      	adds	r1, r2, r2
 800391c:	6239      	str	r1, [r7, #32]
 800391e:	415b      	adcs	r3, r3
 8003920:	627b      	str	r3, [r7, #36]	@ 0x24
 8003922:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003926:	4641      	mov	r1, r8
 8003928:	1854      	adds	r4, r2, r1
 800392a:	4649      	mov	r1, r9
 800392c:	eb43 0501 	adc.w	r5, r3, r1
 8003930:	f04f 0200 	mov.w	r2, #0
 8003934:	f04f 0300 	mov.w	r3, #0
 8003938:	00eb      	lsls	r3, r5, #3
 800393a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800393e:	00e2      	lsls	r2, r4, #3
 8003940:	4614      	mov	r4, r2
 8003942:	461d      	mov	r5, r3
 8003944:	4643      	mov	r3, r8
 8003946:	18e3      	adds	r3, r4, r3
 8003948:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800394c:	464b      	mov	r3, r9
 800394e:	eb45 0303 	adc.w	r3, r5, r3
 8003952:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003962:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003972:	4629      	mov	r1, r5
 8003974:	008b      	lsls	r3, r1, #2
 8003976:	4621      	mov	r1, r4
 8003978:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800397c:	4621      	mov	r1, r4
 800397e:	008a      	lsls	r2, r1, #2
 8003980:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003984:	f7fc fc32 	bl	80001ec <__aeabi_uldivmod>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4b60      	ldr	r3, [pc, #384]	@ (8003b10 <UART_SetConfig+0x4e4>)
 800398e:	fba3 2302 	umull	r2, r3, r3, r2
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	011c      	lsls	r4, r3, #4
 8003996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800399a:	2200      	movs	r2, #0
 800399c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80039a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80039a8:	4642      	mov	r2, r8
 80039aa:	464b      	mov	r3, r9
 80039ac:	1891      	adds	r1, r2, r2
 80039ae:	61b9      	str	r1, [r7, #24]
 80039b0:	415b      	adcs	r3, r3
 80039b2:	61fb      	str	r3, [r7, #28]
 80039b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039b8:	4641      	mov	r1, r8
 80039ba:	1851      	adds	r1, r2, r1
 80039bc:	6139      	str	r1, [r7, #16]
 80039be:	4649      	mov	r1, r9
 80039c0:	414b      	adcs	r3, r1
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	f04f 0200 	mov.w	r2, #0
 80039c8:	f04f 0300 	mov.w	r3, #0
 80039cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039d0:	4659      	mov	r1, fp
 80039d2:	00cb      	lsls	r3, r1, #3
 80039d4:	4651      	mov	r1, sl
 80039d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039da:	4651      	mov	r1, sl
 80039dc:	00ca      	lsls	r2, r1, #3
 80039de:	4610      	mov	r0, r2
 80039e0:	4619      	mov	r1, r3
 80039e2:	4603      	mov	r3, r0
 80039e4:	4642      	mov	r2, r8
 80039e6:	189b      	adds	r3, r3, r2
 80039e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039ec:	464b      	mov	r3, r9
 80039ee:	460a      	mov	r2, r1
 80039f0:	eb42 0303 	adc.w	r3, r2, r3
 80039f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a02:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a10:	4649      	mov	r1, r9
 8003a12:	008b      	lsls	r3, r1, #2
 8003a14:	4641      	mov	r1, r8
 8003a16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a1a:	4641      	mov	r1, r8
 8003a1c:	008a      	lsls	r2, r1, #2
 8003a1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a22:	f7fc fbe3 	bl	80001ec <__aeabi_uldivmod>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	4b38      	ldr	r3, [pc, #224]	@ (8003b10 <UART_SetConfig+0x4e4>)
 8003a2e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	2264      	movs	r2, #100	@ 0x64
 8003a36:	fb02 f303 	mul.w	r3, r2, r3
 8003a3a:	1acb      	subs	r3, r1, r3
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	3332      	adds	r3, #50	@ 0x32
 8003a40:	4a33      	ldr	r2, [pc, #204]	@ (8003b10 <UART_SetConfig+0x4e4>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a4c:	441c      	add	r4, r3
 8003a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a52:	2200      	movs	r2, #0
 8003a54:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a56:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a58:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a5c:	4642      	mov	r2, r8
 8003a5e:	464b      	mov	r3, r9
 8003a60:	1891      	adds	r1, r2, r2
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	415b      	adcs	r3, r3
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a6c:	4641      	mov	r1, r8
 8003a6e:	1851      	adds	r1, r2, r1
 8003a70:	6039      	str	r1, [r7, #0]
 8003a72:	4649      	mov	r1, r9
 8003a74:	414b      	adcs	r3, r1
 8003a76:	607b      	str	r3, [r7, #4]
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a84:	4659      	mov	r1, fp
 8003a86:	00cb      	lsls	r3, r1, #3
 8003a88:	4651      	mov	r1, sl
 8003a8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a8e:	4651      	mov	r1, sl
 8003a90:	00ca      	lsls	r2, r1, #3
 8003a92:	4610      	mov	r0, r2
 8003a94:	4619      	mov	r1, r3
 8003a96:	4603      	mov	r3, r0
 8003a98:	4642      	mov	r2, r8
 8003a9a:	189b      	adds	r3, r3, r2
 8003a9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	460a      	mov	r2, r1
 8003aa2:	eb42 0303 	adc.w	r3, r2, r3
 8003aa6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ab2:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ac0:	4649      	mov	r1, r9
 8003ac2:	008b      	lsls	r3, r1, #2
 8003ac4:	4641      	mov	r1, r8
 8003ac6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aca:	4641      	mov	r1, r8
 8003acc:	008a      	lsls	r2, r1, #2
 8003ace:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ad2:	f7fc fb8b 	bl	80001ec <__aeabi_uldivmod>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4b0d      	ldr	r3, [pc, #52]	@ (8003b10 <UART_SetConfig+0x4e4>)
 8003adc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	2164      	movs	r1, #100	@ 0x64
 8003ae4:	fb01 f303 	mul.w	r3, r1, r3
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	3332      	adds	r3, #50	@ 0x32
 8003aee:	4a08      	ldr	r2, [pc, #32]	@ (8003b10 <UART_SetConfig+0x4e4>)
 8003af0:	fba2 2303 	umull	r2, r3, r2, r3
 8003af4:	095b      	lsrs	r3, r3, #5
 8003af6:	f003 020f 	and.w	r2, r3, #15
 8003afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4422      	add	r2, r4
 8003b02:	609a      	str	r2, [r3, #8]
}
 8003b04:	bf00      	nop
 8003b06:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b10:	51eb851f 	.word	0x51eb851f

08003b14 <memset>:
 8003b14:	4402      	add	r2, r0
 8003b16:	4603      	mov	r3, r0
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d100      	bne.n	8003b1e <memset+0xa>
 8003b1c:	4770      	bx	lr
 8003b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b22:	e7f9      	b.n	8003b18 <memset+0x4>

08003b24 <__libc_init_array>:
 8003b24:	b570      	push	{r4, r5, r6, lr}
 8003b26:	4d0d      	ldr	r5, [pc, #52]	@ (8003b5c <__libc_init_array+0x38>)
 8003b28:	4c0d      	ldr	r4, [pc, #52]	@ (8003b60 <__libc_init_array+0x3c>)
 8003b2a:	1b64      	subs	r4, r4, r5
 8003b2c:	10a4      	asrs	r4, r4, #2
 8003b2e:	2600      	movs	r6, #0
 8003b30:	42a6      	cmp	r6, r4
 8003b32:	d109      	bne.n	8003b48 <__libc_init_array+0x24>
 8003b34:	4d0b      	ldr	r5, [pc, #44]	@ (8003b64 <__libc_init_array+0x40>)
 8003b36:	4c0c      	ldr	r4, [pc, #48]	@ (8003b68 <__libc_init_array+0x44>)
 8003b38:	f000 f818 	bl	8003b6c <_init>
 8003b3c:	1b64      	subs	r4, r4, r5
 8003b3e:	10a4      	asrs	r4, r4, #2
 8003b40:	2600      	movs	r6, #0
 8003b42:	42a6      	cmp	r6, r4
 8003b44:	d105      	bne.n	8003b52 <__libc_init_array+0x2e>
 8003b46:	bd70      	pop	{r4, r5, r6, pc}
 8003b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b4c:	4798      	blx	r3
 8003b4e:	3601      	adds	r6, #1
 8003b50:	e7ee      	b.n	8003b30 <__libc_init_array+0xc>
 8003b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b56:	4798      	blx	r3
 8003b58:	3601      	adds	r6, #1
 8003b5a:	e7f2      	b.n	8003b42 <__libc_init_array+0x1e>
 8003b5c:	08003bac 	.word	0x08003bac
 8003b60:	08003bac 	.word	0x08003bac
 8003b64:	08003bac 	.word	0x08003bac
 8003b68:	08003bb0 	.word	0x08003bb0

08003b6c <_init>:
 8003b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6e:	bf00      	nop
 8003b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b72:	bc08      	pop	{r3}
 8003b74:	469e      	mov	lr, r3
 8003b76:	4770      	bx	lr

08003b78 <_fini>:
 8003b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7a:	bf00      	nop
 8003b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7e:	bc08      	pop	{r3}
 8003b80:	469e      	mov	lr, r3
 8003b82:	4770      	bx	lr
