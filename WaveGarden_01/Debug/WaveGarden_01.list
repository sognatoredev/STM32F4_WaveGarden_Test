
WaveGarden_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046cc  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08004878  08004878  00005878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004974  08004974  00006090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004974  08004974  00005974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800497c  0800497c  00006090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800497c  0800497c  0000597c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004980  08004980  00005980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08004984  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006090  2**0
                  CONTENTS
 10 .bss          000003d4  20000090  20000090  00006090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000464  20000464  00006090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f17b  00000000  00000000  000060c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000248b  00000000  00000000  0001523b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  000176c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a85  00000000  00000000  00018450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000241ee  00000000  00000000  00018ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010d5c  00000000  00000000  0003d0c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9e59  00000000  00000000  0004de1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00127c78  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037c0  00000000  00000000  00127cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0012b47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000090 	.word	0x20000090
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004860 	.word	0x08004860

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000094 	.word	0x20000094
 80001e8:	08004860 	.word	0x08004860

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b988 	b.w	8000524 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	468e      	mov	lr, r1
 8000234:	4604      	mov	r4, r0
 8000236:	4688      	mov	r8, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d962      	bls.n	8000308 <__udivmoddi4+0xdc>
 8000242:	fab2 f682 	clz	r6, r2
 8000246:	b14e      	cbz	r6, 800025c <__udivmoddi4+0x30>
 8000248:	f1c6 0320 	rsb	r3, r6, #32
 800024c:	fa01 f806 	lsl.w	r8, r1, r6
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	40b7      	lsls	r7, r6
 8000256:	ea43 0808 	orr.w	r8, r3, r8
 800025a:	40b4      	lsls	r4, r6
 800025c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000260:	fa1f fc87 	uxth.w	ip, r7
 8000264:	fbb8 f1fe 	udiv	r1, r8, lr
 8000268:	0c23      	lsrs	r3, r4, #16
 800026a:	fb0e 8811 	mls	r8, lr, r1, r8
 800026e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000272:	fb01 f20c 	mul.w	r2, r1, ip
 8000276:	429a      	cmp	r2, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x62>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000280:	f080 80ea 	bcs.w	8000458 <__udivmoddi4+0x22c>
 8000284:	429a      	cmp	r2, r3
 8000286:	f240 80e7 	bls.w	8000458 <__udivmoddi4+0x22c>
 800028a:	3902      	subs	r1, #2
 800028c:	443b      	add	r3, r7
 800028e:	1a9a      	subs	r2, r3, r2
 8000290:	b2a3      	uxth	r3, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800029e:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a2:	459c      	cmp	ip, r3
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0x8e>
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ac:	f080 80d6 	bcs.w	800045c <__udivmoddi4+0x230>
 80002b0:	459c      	cmp	ip, r3
 80002b2:	f240 80d3 	bls.w	800045c <__udivmoddi4+0x230>
 80002b6:	443b      	add	r3, r7
 80002b8:	3802      	subs	r0, #2
 80002ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002be:	eba3 030c 	sub.w	r3, r3, ip
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11d      	cbz	r5, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40f3      	lsrs	r3, r6
 80002c8:	2200      	movs	r2, #0
 80002ca:	e9c5 3200 	strd	r3, r2, [r5]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d905      	bls.n	80002e2 <__udivmoddi4+0xb6>
 80002d6:	b10d      	cbz	r5, 80002dc <__udivmoddi4+0xb0>
 80002d8:	e9c5 0100 	strd	r0, r1, [r5]
 80002dc:	2100      	movs	r1, #0
 80002de:	4608      	mov	r0, r1
 80002e0:	e7f5      	b.n	80002ce <__udivmoddi4+0xa2>
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d146      	bne.n	8000378 <__udivmoddi4+0x14c>
 80002ea:	4573      	cmp	r3, lr
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xc8>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 8105 	bhi.w	80004fe <__udivmoddi4+0x2d2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4690      	mov	r8, r2
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e5      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000302:	e9c5 4800 	strd	r4, r8, [r5]
 8000306:	e7e2      	b.n	80002ce <__udivmoddi4+0xa2>
 8000308:	2a00      	cmp	r2, #0
 800030a:	f000 8090 	beq.w	800042e <__udivmoddi4+0x202>
 800030e:	fab2 f682 	clz	r6, r2
 8000312:	2e00      	cmp	r6, #0
 8000314:	f040 80a4 	bne.w	8000460 <__udivmoddi4+0x234>
 8000318:	1a8a      	subs	r2, r1, r2
 800031a:	0c03      	lsrs	r3, r0, #16
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	b280      	uxth	r0, r0
 8000322:	b2bc      	uxth	r4, r7
 8000324:	2101      	movs	r1, #1
 8000326:	fbb2 fcfe 	udiv	ip, r2, lr
 800032a:	fb0e 221c 	mls	r2, lr, ip, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb04 f20c 	mul.w	r2, r4, ip
 8000336:	429a      	cmp	r2, r3
 8000338:	d907      	bls.n	800034a <__udivmoddi4+0x11e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x11c>
 8000342:	429a      	cmp	r2, r3
 8000344:	f200 80e0 	bhi.w	8000508 <__udivmoddi4+0x2dc>
 8000348:	46c4      	mov	ip, r8
 800034a:	1a9b      	subs	r3, r3, r2
 800034c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000350:	fb0e 3312 	mls	r3, lr, r2, r3
 8000354:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000358:	fb02 f404 	mul.w	r4, r2, r4
 800035c:	429c      	cmp	r4, r3
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x144>
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	f102 30ff 	add.w	r0, r2, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x142>
 8000368:	429c      	cmp	r4, r3
 800036a:	f200 80ca 	bhi.w	8000502 <__udivmoddi4+0x2d6>
 800036e:	4602      	mov	r2, r0
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0x98>
 8000378:	f1c1 0620 	rsb	r6, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 f706 	lsr.w	r7, r2, r6
 8000382:	431f      	orrs	r7, r3
 8000384:	fa0e f401 	lsl.w	r4, lr, r1
 8000388:	fa20 f306 	lsr.w	r3, r0, r6
 800038c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000390:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	fa1f fc87 	uxth.w	ip, r7
 800039e:	fbbe f0f9 	udiv	r0, lr, r9
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80003a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1a0>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 3aff 	add.w	sl, r0, #4294967295
 80003be:	f080 809c 	bcs.w	80004fa <__udivmoddi4+0x2ce>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8099 	bls.w	80004fa <__udivmoddi4+0x2ce>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	fa1f fe83 	uxth.w	lr, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e4:	45a4      	cmp	ip, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1ce>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ee:	f080 8082 	bcs.w	80004f6 <__udivmoddi4+0x2ca>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d97f      	bls.n	80004f6 <__udivmoddi4+0x2ca>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	443c      	add	r4, r7
 80003fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003fe:	eba4 040c 	sub.w	r4, r4, ip
 8000402:	fba0 ec02 	umull	lr, ip, r0, r2
 8000406:	4564      	cmp	r4, ip
 8000408:	4673      	mov	r3, lr
 800040a:	46e1      	mov	r9, ip
 800040c:	d362      	bcc.n	80004d4 <__udivmoddi4+0x2a8>
 800040e:	d05f      	beq.n	80004d0 <__udivmoddi4+0x2a4>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x1fe>
 8000412:	ebb8 0203 	subs.w	r2, r8, r3
 8000416:	eb64 0409 	sbc.w	r4, r4, r9
 800041a:	fa04 f606 	lsl.w	r6, r4, r6
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431e      	orrs	r6, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c5 6400 	strd	r6, r4, [r5]
 800042a:	2100      	movs	r1, #0
 800042c:	e74f      	b.n	80002ce <__udivmoddi4+0xa2>
 800042e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000432:	0c01      	lsrs	r1, r0, #16
 8000434:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000438:	b280      	uxth	r0, r0
 800043a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800043e:	463b      	mov	r3, r7
 8000440:	4638      	mov	r0, r7
 8000442:	463c      	mov	r4, r7
 8000444:	46b8      	mov	r8, r7
 8000446:	46be      	mov	lr, r7
 8000448:	2620      	movs	r6, #32
 800044a:	fbb1 f1f7 	udiv	r1, r1, r7
 800044e:	eba2 0208 	sub.w	r2, r2, r8
 8000452:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000456:	e766      	b.n	8000326 <__udivmoddi4+0xfa>
 8000458:	4601      	mov	r1, r0
 800045a:	e718      	b.n	800028e <__udivmoddi4+0x62>
 800045c:	4610      	mov	r0, r2
 800045e:	e72c      	b.n	80002ba <__udivmoddi4+0x8e>
 8000460:	f1c6 0220 	rsb	r2, r6, #32
 8000464:	fa2e f302 	lsr.w	r3, lr, r2
 8000468:	40b7      	lsls	r7, r6
 800046a:	40b1      	lsls	r1, r6
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	430a      	orrs	r2, r1
 8000476:	fbb3 f8fe 	udiv	r8, r3, lr
 800047a:	b2bc      	uxth	r4, r7
 800047c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000480:	0c11      	lsrs	r1, r2, #16
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb08 f904 	mul.w	r9, r8, r4
 800048a:	40b0      	lsls	r0, r6
 800048c:	4589      	cmp	r9, r1
 800048e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000492:	b280      	uxth	r0, r0
 8000494:	d93e      	bls.n	8000514 <__udivmoddi4+0x2e8>
 8000496:	1879      	adds	r1, r7, r1
 8000498:	f108 3cff 	add.w	ip, r8, #4294967295
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x276>
 800049e:	4589      	cmp	r9, r1
 80004a0:	d81f      	bhi.n	80004e2 <__udivmoddi4+0x2b6>
 80004a2:	eba1 0109 	sub.w	r1, r1, r9
 80004a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004aa:	fb09 f804 	mul.w	r8, r9, r4
 80004ae:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b2:	b292      	uxth	r2, r2
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d229      	bcs.n	8000510 <__udivmoddi4+0x2e4>
 80004bc:	18ba      	adds	r2, r7, r2
 80004be:	f109 31ff 	add.w	r1, r9, #4294967295
 80004c2:	d2c4      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c4:	4542      	cmp	r2, r8
 80004c6:	d2c2      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c8:	f1a9 0102 	sub.w	r1, r9, #2
 80004cc:	443a      	add	r2, r7
 80004ce:	e7be      	b.n	800044e <__udivmoddi4+0x222>
 80004d0:	45f0      	cmp	r8, lr
 80004d2:	d29d      	bcs.n	8000410 <__udivmoddi4+0x1e4>
 80004d4:	ebbe 0302 	subs.w	r3, lr, r2
 80004d8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004dc:	3801      	subs	r0, #1
 80004de:	46e1      	mov	r9, ip
 80004e0:	e796      	b.n	8000410 <__udivmoddi4+0x1e4>
 80004e2:	eba7 0909 	sub.w	r9, r7, r9
 80004e6:	4449      	add	r1, r9
 80004e8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004ec:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f0:	fb09 f804 	mul.w	r8, r9, r4
 80004f4:	e7db      	b.n	80004ae <__udivmoddi4+0x282>
 80004f6:	4673      	mov	r3, lr
 80004f8:	e77f      	b.n	80003fa <__udivmoddi4+0x1ce>
 80004fa:	4650      	mov	r0, sl
 80004fc:	e766      	b.n	80003cc <__udivmoddi4+0x1a0>
 80004fe:	4608      	mov	r0, r1
 8000500:	e6fd      	b.n	80002fe <__udivmoddi4+0xd2>
 8000502:	443b      	add	r3, r7
 8000504:	3a02      	subs	r2, #2
 8000506:	e733      	b.n	8000370 <__udivmoddi4+0x144>
 8000508:	f1ac 0c02 	sub.w	ip, ip, #2
 800050c:	443b      	add	r3, r7
 800050e:	e71c      	b.n	800034a <__udivmoddi4+0x11e>
 8000510:	4649      	mov	r1, r9
 8000512:	e79c      	b.n	800044e <__udivmoddi4+0x222>
 8000514:	eba1 0109 	sub.w	r1, r1, r9
 8000518:	46c4      	mov	ip, r8
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	e7c4      	b.n	80004ae <__udivmoddi4+0x282>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	4b17      	ldr	r3, [pc, #92]	@ (8000590 <MX_DMA_Init+0x68>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	4a16      	ldr	r2, [pc, #88]	@ (8000590 <MX_DMA_Init+0x68>)
 8000538:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800053c:	6313      	str	r3, [r2, #48]	@ 0x30
 800053e:	4b14      	ldr	r3, [pc, #80]	@ (8000590 <MX_DMA_Init+0x68>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	4b10      	ldr	r3, [pc, #64]	@ (8000590 <MX_DMA_Init+0x68>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000552:	4a0f      	ldr	r2, [pc, #60]	@ (8000590 <MX_DMA_Init+0x68>)
 8000554:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000558:	6313      	str	r3, [r2, #48]	@ 0x30
 800055a:	4b0d      	ldr	r3, [pc, #52]	@ (8000590 <MX_DMA_Init+0x68>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2100      	movs	r1, #0
 800056a:	2010      	movs	r0, #16
 800056c:	f000 ff77 	bl	800145e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000570:	2010      	movs	r0, #16
 8000572:	f000 ff90 	bl	8001496 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	2100      	movs	r1, #0
 800057a:	2039      	movs	r0, #57	@ 0x39
 800057c:	f000 ff6f 	bl	800145e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000580:	2039      	movs	r0, #57	@ 0x39
 8000582:	f000 ff88 	bl	8001496 <HAL_NVIC_EnableIRQ>

}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40023800 	.word	0x40023800

08000594 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	@ 0x28
 8000598:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]
 80005ae:	4b39      	ldr	r3, [pc, #228]	@ (8000694 <MX_GPIO_Init+0x100>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	4a38      	ldr	r2, [pc, #224]	@ (8000694 <MX_GPIO_Init+0x100>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ba:	4b36      	ldr	r3, [pc, #216]	@ (8000694 <MX_GPIO_Init+0x100>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	613b      	str	r3, [r7, #16]
 80005c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	4b32      	ldr	r3, [pc, #200]	@ (8000694 <MX_GPIO_Init+0x100>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	4a31      	ldr	r2, [pc, #196]	@ (8000694 <MX_GPIO_Init+0x100>)
 80005d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000694 <MX_GPIO_Init+0x100>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000694 <MX_GPIO_Init+0x100>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a2a      	ldr	r2, [pc, #168]	@ (8000694 <MX_GPIO_Init+0x100>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b28      	ldr	r3, [pc, #160]	@ (8000694 <MX_GPIO_Init+0x100>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	4b24      	ldr	r3, [pc, #144]	@ (8000694 <MX_GPIO_Init+0x100>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a23      	ldr	r2, [pc, #140]	@ (8000694 <MX_GPIO_Init+0x100>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b21      	ldr	r3, [pc, #132]	@ (8000694 <MX_GPIO_Init+0x100>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	4b1d      	ldr	r3, [pc, #116]	@ (8000694 <MX_GPIO_Init+0x100>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a1c      	ldr	r2, [pc, #112]	@ (8000694 <MX_GPIO_Init+0x100>)
 8000624:	f043 0308 	orr.w	r3, r3, #8
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b1a      	ldr	r3, [pc, #104]	@ (8000694 <MX_GPIO_Init+0x100>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f244 0181 	movw	r1, #16513	@ 0x4081
 800063c:	4816      	ldr	r0, [pc, #88]	@ (8000698 <MX_GPIO_Init+0x104>)
 800063e:	f001 fcf3 	bl	8002028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000642:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000648:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800064c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4619      	mov	r1, r3
 8000658:	4810      	ldr	r0, [pc, #64]	@ (800069c <MX_GPIO_Init+0x108>)
 800065a:	f001 fb39 	bl	8001cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 800065e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000664:	2301      	movs	r3, #1
 8000666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	4808      	ldr	r0, [pc, #32]	@ (8000698 <MX_GPIO_Init+0x104>)
 8000678:	f001 fb2a 	bl	8001cd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2100      	movs	r1, #0
 8000680:	2028      	movs	r0, #40	@ 0x28
 8000682:	f000 feec 	bl	800145e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000686:	2028      	movs	r0, #40	@ 0x28
 8000688:	f000 ff05 	bl	8001496 <HAL_NVIC_EnableIRQ>

}
 800068c:	bf00      	nop
 800068e:	3728      	adds	r7, #40	@ 0x28
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40020400 	.word	0x40020400
 800069c:	40020800 	.word	0x40020800

080006a0 <LED_Toggle>:
{
  HAL_GPIO_WritePin(GPIO_Port, GPIO_Pin, GPIO_PIN_RESET);
}

uint8_t LED_Toggle (uint8_t * GPIO_Port, uint8_t GPIO_Pin)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_TogglePin(GPIO_Port, GPIO_Pin);
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	4619      	mov	r1, r3
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f001 fcd1 	bl	800205a <HAL_GPIO_TogglePin>
}
 80006b8:	bf00      	nop
 80006ba:	4618      	mov	r0, r3
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <LED_Blink>:

uint8_t LED_Blink (void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  if (TIM1_CNT_1 >= 2000)
 80006c8:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <LED_Blink+0x28>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80006d0:	d309      	bcc.n	80006e6 <LED_Blink+0x22>
  {
    TIM1_CNT_1 = 0;
 80006d2:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <LED_Blink+0x28>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
    LED_Toggle(LED_PORT, LED1_PIN);
 80006d8:	2101      	movs	r1, #1
 80006da:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <LED_Blink+0x2c>)
 80006dc:	f7ff ffe0 	bl	80006a0 <LED_Toggle>
    UART2_Print("LED1 Toggle Blink.\r\n");
 80006e0:	4804      	ldr	r0, [pc, #16]	@ (80006f4 <LED_Blink+0x30>)
 80006e2:	f000 fbe3 	bl	8000eac <UART2_Print>
  }
  return 0;
 80006e6:	2300      	movs	r3, #0
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000100 	.word	0x20000100
 80006f0:	40020400 	.word	0x40020400
 80006f4:	08004878 	.word	0x08004878

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fc:	f000 fd62 	bl	80011c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000700:	f000 f842 	bl	8000788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000704:	f7ff ff46 	bl	8000594 <MX_GPIO_Init>
  MX_DMA_Init();
 8000708:	f7ff ff0e 	bl	8000528 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800070c:	f000 fa88 	bl	8000c20 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000710:	f000 f9f6 	bl	8000b00 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8000714:	f000 faae 	bl	8000c74 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000718:	4813      	ldr	r0, [pc, #76]	@ (8000768 <main+0x70>)
 800071a:	f002 fa09 	bl	8002b30 <HAL_TIM_Base_Start_IT>

  // HAL_UART_Receive_DMA(&huart2, uart2_rx_buf, UART2_RX_BUF_SIZE);
  // __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);  // IDLE ?��?��?��?�� ?��?��?��
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) uart2_rx_buf, UART2_RX_BUF_SIZE);
 800071e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000722:	4912      	ldr	r1, [pc, #72]	@ (800076c <main+0x74>)
 8000724:	4812      	ldr	r0, [pc, #72]	@ (8000770 <main+0x78>)
 8000726:	f002 fefe 	bl	8003526 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800072a:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <main+0x7c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <main+0x7c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f022 0208 	bic.w	r2, r2, #8
 8000738:	601a      	str	r2, [r3, #0]

  HAL_UARTEx_ReceiveToIdle_DMA(&huart6, (uint8_t *) uart6_rx_buf, UART6_RX_BUF_SIZE);
 800073a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800073e:	490e      	ldr	r1, [pc, #56]	@ (8000778 <main+0x80>)
 8000740:	480e      	ldr	r0, [pc, #56]	@ (800077c <main+0x84>)
 8000742:	f002 fef0 	bl	8003526 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <main+0x88>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <main+0x88>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f022 0208 	bic.w	r2, r2, #8
 8000754:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    LED_Task();
 8000756:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <main+0x8c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4798      	blx	r3
    UART2_Process();
 800075c:	f000 fca8 	bl	80010b0 <UART2_Process>
    UART6_Process();
 8000760:	f000 fcea 	bl	8001138 <UART6_Process>
    LED_Task();
 8000764:	bf00      	nop
 8000766:	e7f6      	b.n	8000756 <main+0x5e>
 8000768:	200000b8 	.word	0x200000b8
 800076c:	20000104 	.word	0x20000104
 8000770:	2000030c 	.word	0x2000030c
 8000774:	2000039c 	.word	0x2000039c
 8000778:	20000204 	.word	0x20000204
 800077c:	20000354 	.word	0x20000354
 8000780:	200003fc 	.word	0x200003fc
 8000784:	20000000 	.word	0x20000000

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b094      	sub	sp, #80	@ 0x50
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 0320 	add.w	r3, r7, #32
 8000792:	2230      	movs	r2, #48	@ 0x30
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f004 f824 	bl	80047e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000860 <SystemClock_Config+0xd8>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b4:	4a2a      	ldr	r2, [pc, #168]	@ (8000860 <SystemClock_Config+0xd8>)
 80007b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80007bc:	4b28      	ldr	r3, [pc, #160]	@ (8000860 <SystemClock_Config+0xd8>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c8:	2300      	movs	r3, #0
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	4b25      	ldr	r3, [pc, #148]	@ (8000864 <SystemClock_Config+0xdc>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a24      	ldr	r2, [pc, #144]	@ (8000864 <SystemClock_Config+0xdc>)
 80007d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	4b22      	ldr	r3, [pc, #136]	@ (8000864 <SystemClock_Config+0xdc>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e4:	2301      	movs	r3, #1
 80007e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007e8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ee:	2302      	movs	r3, #2
 80007f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007f8:	2304      	movs	r3, #4
 80007fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80007fc:	23b4      	movs	r3, #180	@ 0xb4
 80007fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000800:	2302      	movs	r3, #2
 8000802:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000804:	2304      	movs	r3, #4
 8000806:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000808:	f107 0320 	add.w	r3, r7, #32
 800080c:	4618      	mov	r0, r3
 800080e:	f001 fca7 	bl	8002160 <HAL_RCC_OscConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000818:	f000 f826 	bl	8000868 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800081c:	f001 fc50 	bl	80020c0 <HAL_PWREx_EnableOverDrive>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000826:	f000 f81f 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082a:	230f      	movs	r3, #15
 800082c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082e:	2302      	movs	r3, #2
 8000830:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000836:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800083a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800083c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000840:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	2105      	movs	r1, #5
 8000848:	4618      	mov	r0, r3
 800084a:	f001 ff01 	bl	8002650 <HAL_RCC_ClockConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000854:	f000 f808 	bl	8000868 <Error_Handler>
  }
}
 8000858:	bf00      	nop
 800085a:	3750      	adds	r7, #80	@ 0x50
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40023800 	.word	0x40023800
 8000864:	40007000 	.word	0x40007000

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <Error_Handler+0x8>

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <HAL_MspInit+0x4c>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000882:	4a0f      	ldr	r2, [pc, #60]	@ (80008c0 <HAL_MspInit+0x4c>)
 8000884:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000888:	6453      	str	r3, [r2, #68]	@ 0x44
 800088a:	4b0d      	ldr	r3, [pc, #52]	@ (80008c0 <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <HAL_MspInit+0x4c>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089e:	4a08      	ldr	r2, [pc, #32]	@ (80008c0 <HAL_MspInit+0x4c>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <HAL_MspInit+0x4c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <NMI_Handler+0x4>

080008cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <MemManage_Handler+0x4>

080008dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091a:	f000 fca5 	bl	8001268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000928:	4802      	ldr	r0, [pc, #8]	@ (8000934 <DMA1_Stream5_IRQHandler+0x10>)
 800092a:	f000 ff67 	bl	80017fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	2000039c 	.word	0x2000039c

08000938 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800093c:	4802      	ldr	r0, [pc, #8]	@ (8000948 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800093e:	f002 f967 	bl	8002c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200000b8 	.word	0x200000b8

0800094c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000950:	4802      	ldr	r0, [pc, #8]	@ (800095c <USART2_IRQHandler+0x10>)
 8000952:	f002 fe41 	bl	80035d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	2000030c 	.word	0x2000030c

08000960 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000964:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000968:	f001 fb92 	bl	8002090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}

08000970 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000974:	4802      	ldr	r0, [pc, #8]	@ (8000980 <DMA2_Stream1_IRQHandler+0x10>)
 8000976:	f000 ff41 	bl	80017fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200003fc 	.word	0x200003fc

08000984 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  if ((__HAL_UART_GET_FLAG(&huart6, UART_FLAG_FE)) || (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_ORE)))
 800098a:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <USART6_IRQHandler+0x5c>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f003 0302 	and.w	r3, r3, #2
 8000994:	2b02      	cmp	r3, #2
 8000996:	d006      	beq.n	80009a6 <USART6_IRQHandler+0x22>
 8000998:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <USART6_IRQHandler+0x5c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f003 0308 	and.w	r3, r3, #8
 80009a2:	2b08      	cmp	r3, #8
 80009a4:	d115      	bne.n	80009d2 <USART6_IRQHandler+0x4e>
  {
    __HAL_UART_CLEAR_OREFLAG(&huart6);
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <USART6_IRQHandler+0x5c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <USART6_IRQHandler+0x5c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]
    __HAL_UART_CLEAR_FEFLAG(&huart6);
 80009bc:	2300      	movs	r3, #0
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <USART6_IRQHandler+0x5c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	4b05      	ldr	r3, [pc, #20]	@ (80009e0 <USART6_IRQHandler+0x5c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]
  }
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80009d2:	4803      	ldr	r0, [pc, #12]	@ (80009e0 <USART6_IRQHandler+0x5c>)
 80009d4:	f002 fe00 	bl	80035d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000354 	.word	0x20000354

080009e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13)
 80009ee:	88fb      	ldrh	r3, [r7, #6]
 80009f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009f4:	d124      	bne.n	8000a40 <HAL_GPIO_EXTI_Callback+0x5c>
  {
    nowInputButtonTime = HAL_GetTick();
 80009f6:	f000 fc4b 	bl	8001290 <HAL_GetTick>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4a12      	ldr	r2, [pc, #72]	@ (8000a48 <HAL_GPIO_EXTI_Callback+0x64>)
 80009fe:	6013      	str	r3, [r2, #0]
    if ((nowInputButtonTime - prvInputButtonTime) >= 100)
 8000a00:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <HAL_GPIO_EXTI_Callback+0x64>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <HAL_GPIO_EXTI_Callback+0x68>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	2b63      	cmp	r3, #99	@ 0x63
 8000a0c:	d917      	bls.n	8000a3e <HAL_GPIO_EXTI_Callback+0x5a>
    {
      prvInputButtonTime = nowInputButtonTime;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <HAL_GPIO_EXTI_Callback+0x64>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a0e      	ldr	r2, [pc, #56]	@ (8000a4c <HAL_GPIO_EXTI_Callback+0x68>)
 8000a14:	6013      	str	r3, [r2, #0]
      HAL_GPIO_TogglePin(LED_PORT, LED2_PIN);
 8000a16:	2180      	movs	r1, #128	@ 0x80
 8000a18:	480d      	ldr	r0, [pc, #52]	@ (8000a50 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000a1a:	f001 fb1e 	bl	800205a <HAL_GPIO_TogglePin>
      LED2_Status = !LED2_Status;
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <HAL_GPIO_EXTI_Callback+0x70>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	bf14      	ite	ne
 8000a26:	2301      	movne	r3, #1
 8000a28:	2300      	moveq	r3, #0
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	f083 0301 	eor.w	r3, r3, #1
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_GPIO_EXTI_Callback+0x70>)
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	e000      	b.n	8000a40 <HAL_GPIO_EXTI_Callback+0x5c>
    }
    else
    {
      return;
 8000a3e:	bf00      	nop
    }
  }
}
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200000b4 	.word	0x200000b4
 8000a4c:	200000b0 	.word	0x200000b0
 8000a50:	40020400 	.word	0x40020400
 8000a54:	200000ac 	.word	0x200000ac

08000a58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	460b      	mov	r3, r1
 8000a62:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a13      	ldr	r2, [pc, #76]	@ (8000ab8 <HAL_UARTEx_RxEventCallback+0x60>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d106      	bne.n	8000a7c <HAL_UARTEx_RxEventCallback+0x24>
    // HAL_UART_DMAStop(&huart2);  // 수신 중단
    // __HAL_UART_CLEAR_IDLEFLAG(&huart2);

    // 남은 DMA 카운터로 실제 수신된 데이터 길이 계산
    // uart_rx_length = UART2_RX_BUF_SIZE - __HAL_DMA_GET_COUNTER(huart2.hdmarx);
    uart_rx_length = Size;
 8000a6e:	4a13      	ldr	r2, [pc, #76]	@ (8000abc <HAL_UARTEx_RxEventCallback+0x64>)
 8000a70:	887b      	ldrh	r3, [r7, #2]
 8000a72:	8013      	strh	r3, [r2, #0]

    // HAL_UART_DMAResume(&huart2);  // 수신 중단
    
    uart_data_ready = 1;                      // 수신 완료 플래그 설정
 8000a74:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <HAL_UARTEx_RxEventCallback+0x68>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	701a      	strb	r2, [r3, #0]
    uart6_data_ready = 1;
    
    HAL_UARTEx_ReceiveToIdle_DMA(&huart6, (uint8_t *) uart6_rx_buf, UART6_RX_BUF_SIZE);
    __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
  }
}
 8000a7a:	e018      	b.n	8000aae <HAL_UARTEx_RxEventCallback+0x56>
  else if (huart->Instance == USART6)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a10      	ldr	r2, [pc, #64]	@ (8000ac4 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d113      	bne.n	8000aae <HAL_UARTEx_RxEventCallback+0x56>
    uart6_rx_length = Size;
 8000a86:	4a10      	ldr	r2, [pc, #64]	@ (8000ac8 <HAL_UARTEx_RxEventCallback+0x70>)
 8000a88:	887b      	ldrh	r3, [r7, #2]
 8000a8a:	8013      	strh	r3, [r2, #0]
    uart6_data_ready = 1;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <HAL_UARTEx_RxEventCallback+0x74>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_DMA(&huart6, (uint8_t *) uart6_rx_buf, UART6_RX_BUF_SIZE);
 8000a92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a96:	490e      	ldr	r1, [pc, #56]	@ (8000ad0 <HAL_UARTEx_RxEventCallback+0x78>)
 8000a98:	480e      	ldr	r0, [pc, #56]	@ (8000ad4 <HAL_UARTEx_RxEventCallback+0x7c>)
 8000a9a:	f002 fd44 	bl	8003526 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <HAL_UARTEx_RxEventCallback+0x80>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <HAL_UARTEx_RxEventCallback+0x80>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f022 0208 	bic.w	r2, r2, #8
 8000aac:	601a      	str	r2, [r3, #0]
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40004400 	.word	0x40004400
 8000abc:	20000306 	.word	0x20000306
 8000ac0:	20000304 	.word	0x20000304
 8000ac4:	40011400 	.word	0x40011400
 8000ac8:	2000030a 	.word	0x2000030a
 8000acc:	20000308 	.word	0x20000308
 8000ad0:	20000204 	.word	0x20000204
 8000ad4:	20000354 	.word	0x20000354
 8000ad8:	200003fc 	.word	0x200003fc

08000adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <SystemInit+0x20>)
 8000ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ae6:	4a05      	ldr	r2, [pc, #20]	@ (8000afc <SystemInit+0x20>)
 8000ae8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b14:	463b      	mov	r3, r7
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b98 <MX_TIM1_Init+0x98>)
 8000b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8000b9c <MX_TIM1_Init+0x9c>)
 8000b20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8000b22:	4b1d      	ldr	r3, [pc, #116]	@ (8000b98 <MX_TIM1_Init+0x98>)
 8000b24:	22b3      	movs	r2, #179	@ 0xb3
 8000b26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	@ (8000b98 <MX_TIM1_Init+0x98>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b98 <MX_TIM1_Init+0x98>)
 8000b30:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b36:	4b18      	ldr	r3, [pc, #96]	@ (8000b98 <MX_TIM1_Init+0x98>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b3c:	4b16      	ldr	r3, [pc, #88]	@ (8000b98 <MX_TIM1_Init+0x98>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <MX_TIM1_Init+0x98>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b48:	4813      	ldr	r0, [pc, #76]	@ (8000b98 <MX_TIM1_Init+0x98>)
 8000b4a:	f001 ffa1 	bl	8002a90 <HAL_TIM_Base_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b54:	f7ff fe88 	bl	8000868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b5e:	f107 0308 	add.w	r3, r7, #8
 8000b62:	4619      	mov	r1, r3
 8000b64:	480c      	ldr	r0, [pc, #48]	@ (8000b98 <MX_TIM1_Init+0x98>)
 8000b66:	f002 f943 	bl	8002df0 <HAL_TIM_ConfigClockSource>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b70:	f7ff fe7a 	bl	8000868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b74:	2300      	movs	r3, #0
 8000b76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	@ (8000b98 <MX_TIM1_Init+0x98>)
 8000b82:	f002 fb65 	bl	8003250 <HAL_TIMEx_MasterConfigSynchronization>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b8c:	f7ff fe6c 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200000b8 	.word	0x200000b8
 8000b9c:	40010000 	.word	0x40010000

08000ba0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0e      	ldr	r2, [pc, #56]	@ (8000be8 <HAL_TIM_Base_MspInit+0x48>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d115      	bne.n	8000bde <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bec <HAL_TIM_Base_MspInit+0x4c>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bba:	4a0c      	ldr	r2, [pc, #48]	@ (8000bec <HAL_TIM_Base_MspInit+0x4c>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <HAL_TIM_Base_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2019      	movs	r0, #25
 8000bd4:	f000 fc43 	bl	800145e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bd8:	2019      	movs	r0, #25
 8000bda:	f000 fc5c 	bl	8001496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40010000 	.word	0x40010000
 8000bec:	40023800 	.word	0x40023800

08000bf0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
uint32_t TIM1_CNT_1 = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a06      	ldr	r2, [pc, #24]	@ (8000c18 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d104      	bne.n	8000c0c <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
    TIM1_CNT_1++;
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	3301      	adds	r3, #1
 8000c08:	4a04      	ldr	r2, [pc, #16]	@ (8000c1c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000c0a:	6013      	str	r3, [r2, #0]
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	40010000 	.word	0x40010000
 8000c1c:	20000100 	.word	0x20000100

08000c20 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c24:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	@ (8000c70 <MX_USART2_UART_Init+0x50>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <MX_USART2_UART_Init+0x4c>)
 8000c58:	f002 fb8a 	bl	8003370 <HAL_UART_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c62:	f7ff fe01 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	2000030c 	.word	0x2000030c
 8000c70:	40004400 	.word	0x40004400

08000c74 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c78:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <MX_USART6_UART_Init+0x4c>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	@ (8000cc4 <MX_USART6_UART_Init+0x50>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	@ (8000cc0 <MX_USART6_UART_Init+0x4c>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c84:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <MX_USART6_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <MX_USART6_UART_Init+0x4c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc0 <MX_USART6_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c98:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <MX_USART6_UART_Init+0x4c>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <MX_USART6_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <MX_USART6_UART_Init+0x4c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	@ (8000cc0 <MX_USART6_UART_Init+0x4c>)
 8000cac:	f002 fb60 	bl	8003370 <HAL_UART_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000cb6:	f7ff fdd7 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000354 	.word	0x20000354
 8000cc4:	40011400 	.word	0x40011400

08000cc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08c      	sub	sp, #48	@ 0x30
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a68      	ldr	r2, [pc, #416]	@ (8000e88 <HAL_UART_MspInit+0x1c0>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d162      	bne.n	8000db0 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	61bb      	str	r3, [r7, #24]
 8000cee:	4b67      	ldr	r3, [pc, #412]	@ (8000e8c <HAL_UART_MspInit+0x1c4>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf2:	4a66      	ldr	r2, [pc, #408]	@ (8000e8c <HAL_UART_MspInit+0x1c4>)
 8000cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cfa:	4b64      	ldr	r3, [pc, #400]	@ (8000e8c <HAL_UART_MspInit+0x1c4>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d02:	61bb      	str	r3, [r7, #24]
 8000d04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	4b60      	ldr	r3, [pc, #384]	@ (8000e8c <HAL_UART_MspInit+0x1c4>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a5f      	ldr	r2, [pc, #380]	@ (8000e8c <HAL_UART_MspInit+0x1c4>)
 8000d10:	f043 0308 	orr.w	r3, r3, #8
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b5d      	ldr	r3, [pc, #372]	@ (8000e8c <HAL_UART_MspInit+0x1c4>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f003 0308 	and.w	r3, r3, #8
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d22:	2360      	movs	r3, #96	@ 0x60
 8000d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d32:	2307      	movs	r3, #7
 8000d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d36:	f107 031c 	add.w	r3, r7, #28
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4854      	ldr	r0, [pc, #336]	@ (8000e90 <HAL_UART_MspInit+0x1c8>)
 8000d3e:	f000 ffc7 	bl	8001cd0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000d42:	4b54      	ldr	r3, [pc, #336]	@ (8000e94 <HAL_UART_MspInit+0x1cc>)
 8000d44:	4a54      	ldr	r2, [pc, #336]	@ (8000e98 <HAL_UART_MspInit+0x1d0>)
 8000d46:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000d48:	4b52      	ldr	r3, [pc, #328]	@ (8000e94 <HAL_UART_MspInit+0x1cc>)
 8000d4a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d4e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d50:	4b50      	ldr	r3, [pc, #320]	@ (8000e94 <HAL_UART_MspInit+0x1cc>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d56:	4b4f      	ldr	r3, [pc, #316]	@ (8000e94 <HAL_UART_MspInit+0x1cc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d5c:	4b4d      	ldr	r3, [pc, #308]	@ (8000e94 <HAL_UART_MspInit+0x1cc>)
 8000d5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d62:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d64:	4b4b      	ldr	r3, [pc, #300]	@ (8000e94 <HAL_UART_MspInit+0x1cc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d6a:	4b4a      	ldr	r3, [pc, #296]	@ (8000e94 <HAL_UART_MspInit+0x1cc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000d70:	4b48      	ldr	r3, [pc, #288]	@ (8000e94 <HAL_UART_MspInit+0x1cc>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d76:	4b47      	ldr	r3, [pc, #284]	@ (8000e94 <HAL_UART_MspInit+0x1cc>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d7c:	4b45      	ldr	r3, [pc, #276]	@ (8000e94 <HAL_UART_MspInit+0x1cc>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d82:	4844      	ldr	r0, [pc, #272]	@ (8000e94 <HAL_UART_MspInit+0x1cc>)
 8000d84:	f000 fba2 	bl	80014cc <HAL_DMA_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000d8e:	f7ff fd6b 	bl	8000868 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a3f      	ldr	r2, [pc, #252]	@ (8000e94 <HAL_UART_MspInit+0x1cc>)
 8000d96:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d98:	4a3e      	ldr	r2, [pc, #248]	@ (8000e94 <HAL_UART_MspInit+0x1cc>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	2026      	movs	r0, #38	@ 0x26
 8000da4:	f000 fb5b 	bl	800145e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000da8:	2026      	movs	r0, #38	@ 0x26
 8000daa:	f000 fb74 	bl	8001496 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000dae:	e066      	b.n	8000e7e <HAL_UART_MspInit+0x1b6>
  else if(uartHandle->Instance==USART6)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a39      	ldr	r2, [pc, #228]	@ (8000e9c <HAL_UART_MspInit+0x1d4>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d161      	bne.n	8000e7e <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	4b33      	ldr	r3, [pc, #204]	@ (8000e8c <HAL_UART_MspInit+0x1c4>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc2:	4a32      	ldr	r2, [pc, #200]	@ (8000e8c <HAL_UART_MspInit+0x1c4>)
 8000dc4:	f043 0320 	orr.w	r3, r3, #32
 8000dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dca:	4b30      	ldr	r3, [pc, #192]	@ (8000e8c <HAL_UART_MspInit+0x1c4>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dce:	f003 0320 	and.w	r3, r3, #32
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b2c      	ldr	r3, [pc, #176]	@ (8000e8c <HAL_UART_MspInit+0x1c4>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	4a2b      	ldr	r2, [pc, #172]	@ (8000e8c <HAL_UART_MspInit+0x1c4>)
 8000de0:	f043 0304 	orr.w	r3, r3, #4
 8000de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de6:	4b29      	ldr	r3, [pc, #164]	@ (8000e8c <HAL_UART_MspInit+0x1c4>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000df2:	23c0      	movs	r3, #192	@ 0xc0
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e02:	2308      	movs	r3, #8
 8000e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4824      	ldr	r0, [pc, #144]	@ (8000ea0 <HAL_UART_MspInit+0x1d8>)
 8000e0e:	f000 ff5f 	bl	8001cd0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8000e12:	4b24      	ldr	r3, [pc, #144]	@ (8000ea4 <HAL_UART_MspInit+0x1dc>)
 8000e14:	4a24      	ldr	r2, [pc, #144]	@ (8000ea8 <HAL_UART_MspInit+0x1e0>)
 8000e16:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8000e18:	4b22      	ldr	r3, [pc, #136]	@ (8000ea4 <HAL_UART_MspInit+0x1dc>)
 8000e1a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8000e1e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e20:	4b20      	ldr	r3, [pc, #128]	@ (8000ea4 <HAL_UART_MspInit+0x1dc>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea4 <HAL_UART_MspInit+0x1dc>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea4 <HAL_UART_MspInit+0x1dc>)
 8000e2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e32:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea4 <HAL_UART_MspInit+0x1dc>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <HAL_UART_MspInit+0x1dc>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8000e40:	4b18      	ldr	r3, [pc, #96]	@ (8000ea4 <HAL_UART_MspInit+0x1dc>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e46:	4b17      	ldr	r3, [pc, #92]	@ (8000ea4 <HAL_UART_MspInit+0x1dc>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <HAL_UART_MspInit+0x1dc>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8000e52:	4814      	ldr	r0, [pc, #80]	@ (8000ea4 <HAL_UART_MspInit+0x1dc>)
 8000e54:	f000 fb3a 	bl	80014cc <HAL_DMA_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 8000e5e:	f7ff fd03 	bl	8000868 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea4 <HAL_UART_MspInit+0x1dc>)
 8000e66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e68:	4a0e      	ldr	r2, [pc, #56]	@ (8000ea4 <HAL_UART_MspInit+0x1dc>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	2047      	movs	r0, #71	@ 0x47
 8000e74:	f000 faf3 	bl	800145e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000e78:	2047      	movs	r0, #71	@ 0x47
 8000e7a:	f000 fb0c 	bl	8001496 <HAL_NVIC_EnableIRQ>
}
 8000e7e:	bf00      	nop
 8000e80:	3730      	adds	r7, #48	@ 0x30
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40004400 	.word	0x40004400
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020c00 	.word	0x40020c00
 8000e94:	2000039c 	.word	0x2000039c
 8000e98:	40026088 	.word	0x40026088
 8000e9c:	40011400 	.word	0x40011400
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	200003fc 	.word	0x200003fc
 8000ea8:	40026428 	.word	0x40026428

08000eac <UART2_Print>:
  { NULL, NULL, NULL, NULL},
};


uint8_t UART2_Print(uint8_t * pData)
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if ((uart_data_ready == 1) && (uart_rx_length != strlen(pData)))
 8000eb4:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <UART2_Print+0x50>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d110      	bne.n	8000ede <UART2_Print+0x32>
 8000ebc:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <UART2_Print+0x54>)
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	461c      	mov	r4, r3
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff f992 	bl	80001ec <strlen>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	429c      	cmp	r4, r3
 8000ecc:	d007      	beq.n	8000ede <UART2_Print+0x32>
  {
    HAL_UART_Transmit(&huart2, pData, uart_rx_length, 100);
 8000ece:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <UART2_Print+0x54>)
 8000ed0:	881a      	ldrh	r2, [r3, #0]
 8000ed2:	2364      	movs	r3, #100	@ 0x64
 8000ed4:	6879      	ldr	r1, [r7, #4]
 8000ed6:	480b      	ldr	r0, [pc, #44]	@ (8000f04 <UART2_Print+0x58>)
 8000ed8:	f002 fa9a 	bl	8003410 <HAL_UART_Transmit>
 8000edc:	e009      	b.n	8000ef2 <UART2_Print+0x46>
  }
  else
  {
    HAL_UART_Transmit(&huart2, pData, strlen(pData), 100);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff f984 	bl	80001ec <strlen>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	2364      	movs	r3, #100	@ 0x64
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <UART2_Print+0x58>)
 8000eee:	f002 fa8f 	bl	8003410 <HAL_UART_Transmit>
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd90      	pop	{r4, r7, pc}
 8000efc:	20000304 	.word	0x20000304
 8000f00:	20000306 	.word	0x20000306
 8000f04:	2000030c 	.word	0x2000030c

08000f08 <UART6_Print>:

void UART6_Print(uint8_t * pData)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  // {
  //   HAL_UART_Transmit(&huart2, pData, uart6_rx_length, 100);
  // }
  // else
  // {
  if (ESP32_CurrentState == ESP32_RESET)
 8000f10:	4b17      	ldr	r3, [pc, #92]	@ (8000f70 <UART6_Print+0x68>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d11c      	bne.n	8000f52 <UART6_Print+0x4a>
  {
    ESP32_CurrentState = ESP32_IDLE;
 8000f18:	4b15      	ldr	r3, [pc, #84]	@ (8000f70 <UART6_Print+0x68>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]
    
    if (HAL_UART_Transmit(&huart2, pData, strlen((uint8_t *) cmd_table[0].message), 1000) != HAL_OK)
 8000f1e:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <UART6_Print+0x6c>)
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff f962 	bl	80001ec <strlen>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	4811      	ldr	r0, [pc, #68]	@ (8000f78 <UART6_Print+0x70>)
 8000f34:	f002 fa6c 	bl	8003410 <HAL_UART_Transmit>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d014      	beq.n	8000f68 <UART6_Print+0x60>
    {
      memset((uint8_t *) uart6_rx_buf, NULL, strlen(uart6_rx_buf));
 8000f3e:	480f      	ldr	r0, [pc, #60]	@ (8000f7c <UART6_Print+0x74>)
 8000f40:	f7ff f954 	bl	80001ec <strlen>
 8000f44:	4603      	mov	r3, r0
 8000f46:	461a      	mov	r2, r3
 8000f48:	2100      	movs	r1, #0
 8000f4a:	480c      	ldr	r0, [pc, #48]	@ (8000f7c <UART6_Print+0x74>)
 8000f4c:	f003 fc4a 	bl	80047e4 <memset>
    }
  }
  
  // HAL_UART_Transmit(&huart2, pData, uart6_rx_length, 100);
  // }
}
 8000f50:	e00a      	b.n	8000f68 <UART6_Print+0x60>
    if (HAL_UART_Transmit(&huart2, pData, strlen(pData), 1000) != HAL_OK)
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff f94a 	bl	80001ec <strlen>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	4805      	ldr	r0, [pc, #20]	@ (8000f78 <UART6_Print+0x70>)
 8000f64:	f002 fa54 	bl	8003410 <HAL_UART_Transmit>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2000045c 	.word	0x2000045c
 8000f74:	20000008 	.word	0x20000008
 8000f78:	2000030c 	.word	0x2000030c
 8000f7c:	20000204 	.word	0x20000204

08000f80 <ESP32_Print>:

void ESP32_Print(uint8_t * pData)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  // {
  //   HAL_UART_Transmit(&huart2, pData, uart6_rx_length, 100);
  // }
  // else
  // {
  memset((uint8_t *) uart6_rx_buf, 0, strlen(uart6_rx_buf));
 8000f88:	480b      	ldr	r0, [pc, #44]	@ (8000fb8 <ESP32_Print+0x38>)
 8000f8a:	f7ff f92f 	bl	80001ec <strlen>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	461a      	mov	r2, r3
 8000f92:	2100      	movs	r1, #0
 8000f94:	4808      	ldr	r0, [pc, #32]	@ (8000fb8 <ESP32_Print+0x38>)
 8000f96:	f003 fc25 	bl	80047e4 <memset>
  HAL_UART_Transmit(&huart6, pData, strlen(pData), 1000);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff f926 	bl	80001ec <strlen>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	4804      	ldr	r0, [pc, #16]	@ (8000fbc <ESP32_Print+0x3c>)
 8000fac:	f002 fa30 	bl	8003410 <HAL_UART_Transmit>
  // }
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000204 	.word	0x20000204
 8000fbc:	20000354 	.word	0x20000354

08000fc0 <UART6_RxDataParsing>:
  }
}
#else

uint8_t UART6_RxDataParsing (uint8_t * pData)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  for (int i = 0; cmd_table[i].cmd != NULL; i++) 
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	e029      	b.n	8001022 <UART6_RxDataParsing+0x62>
  {
    // if (!(strcmp(pData, cmd_table[i].cmd))) 
    if (!(strncmp(pData, cmd_table[i].cmd, cmd_table[i].cmp_size))) 
 8000fce:	4a1a      	ldr	r2, [pc, #104]	@ (8001038 <UART6_RxDataParsing+0x78>)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	011b      	lsls	r3, r3, #4
 8000fd4:	4413      	add	r3, r2
 8000fd6:	6819      	ldr	r1, [r3, #0]
 8000fd8:	4a17      	ldr	r2, [pc, #92]	@ (8001038 <UART6_RxDataParsing+0x78>)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	011b      	lsls	r3, r3, #4
 8000fde:	4413      	add	r3, r2
 8000fe0:	3308      	adds	r3, #8
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f003 fc04 	bl	80047f4 <strncmp>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d114      	bne.n	800101c <UART6_RxDataParsing+0x5c>
    {
      if (i == 0)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d102      	bne.n	8000ffe <UART6_RxDataParsing+0x3e>
      {
        ESP32_CurrentState = ESP32_RESET;
 8000ff8:	4b10      	ldr	r3, [pc, #64]	@ (800103c <UART6_RxDataParsing+0x7c>)
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	701a      	strb	r2, [r3, #0]
        // memset((uint8_t *) uart6_rx_buf, 0, strlen(uart6_rx_buf));
      }
      cmd_table[i].func((uint8_t *)cmd_table[i].message);
 8000ffe:	4a0e      	ldr	r2, [pc, #56]	@ (8001038 <UART6_RxDataParsing+0x78>)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	011b      	lsls	r3, r3, #4
 8001004:	4413      	add	r3, r2
 8001006:	3304      	adds	r3, #4
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	490b      	ldr	r1, [pc, #44]	@ (8001038 <UART6_RxDataParsing+0x78>)
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	440a      	add	r2, r1
 8001012:	320c      	adds	r2, #12
 8001014:	6812      	ldr	r2, [r2, #0]
 8001016:	4610      	mov	r0, r2
 8001018:	4798      	blx	r3
      // memset((uint8_t *) uart6_rx_buf, NULL, strlen(uart6_rx_buf));
      return;
 800101a:	e009      	b.n	8001030 <UART6_RxDataParsing+0x70>
  for (int i = 0; cmd_table[i].cmd != NULL; i++) 
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	3301      	adds	r3, #1
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4a05      	ldr	r2, [pc, #20]	@ (8001038 <UART6_RxDataParsing+0x78>)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	011b      	lsls	r3, r3, #4
 8001028:	4413      	add	r3, r2
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1ce      	bne.n	8000fce <UART6_RxDataParsing+0xe>
    }
  }
}
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000008 	.word	0x20000008
 800103c:	2000045c 	.word	0x2000045c

08001040 <UART2_RxDataParsing>:

uint8_t UART2_RxDataParsing (uint8_t * pData)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  for (int i = 0; esp_cmd_table[i].cmd != NULL; i++) 
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	e023      	b.n	8001096 <UART2_RxDataParsing+0x56>
  {
    // if (!(strcmp(pData, esp_cmd_table[i].cmd))) 
    if (!(strncmp(pData, esp_cmd_table[i].cmd, esp_cmd_table[i].cmp_size))) 
 800104e:	4a17      	ldr	r2, [pc, #92]	@ (80010ac <UART2_RxDataParsing+0x6c>)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	4413      	add	r3, r2
 8001056:	6819      	ldr	r1, [r3, #0]
 8001058:	4a14      	ldr	r2, [pc, #80]	@ (80010ac <UART2_RxDataParsing+0x6c>)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	011b      	lsls	r3, r3, #4
 800105e:	4413      	add	r3, r2
 8001060:	3308      	adds	r3, #8
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f003 fbc4 	bl	80047f4 <strncmp>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d10e      	bne.n	8001090 <UART2_RxDataParsing+0x50>
    {
      esp_cmd_table[i].func((uint8_t *)esp_cmd_table[i].message);
 8001072:	4a0e      	ldr	r2, [pc, #56]	@ (80010ac <UART2_RxDataParsing+0x6c>)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	011b      	lsls	r3, r3, #4
 8001078:	4413      	add	r3, r2
 800107a:	3304      	adds	r3, #4
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	490b      	ldr	r1, [pc, #44]	@ (80010ac <UART2_RxDataParsing+0x6c>)
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	0112      	lsls	r2, r2, #4
 8001084:	440a      	add	r2, r1
 8001086:	320c      	adds	r2, #12
 8001088:	6812      	ldr	r2, [r2, #0]
 800108a:	4610      	mov	r0, r2
 800108c:	4798      	blx	r3
      return;
 800108e:	e009      	b.n	80010a4 <UART2_RxDataParsing+0x64>
  for (int i = 0; esp_cmd_table[i].cmd != NULL; i++) 
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3301      	adds	r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4a05      	ldr	r2, [pc, #20]	@ (80010ac <UART2_RxDataParsing+0x6c>)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	4413      	add	r3, r2
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1d4      	bne.n	800104e <UART2_RxDataParsing+0xe>
    }
  }
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000058 	.word	0x20000058

080010b0 <UART2_Process>:
#endif

uint8_t UART2_Process (void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  if (prvLED2_Status != LED2_Status)
 80010b4:	4b18      	ldr	r3, [pc, #96]	@ (8001118 <UART2_Process+0x68>)
 80010b6:	781a      	ldrb	r2, [r3, #0]
 80010b8:	4b18      	ldr	r3, [pc, #96]	@ (800111c <UART2_Process+0x6c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d009      	beq.n	80010d4 <UART2_Process+0x24>
  {
    prvLED2_Status = LED2_Status;
 80010c0:	4b16      	ldr	r3, [pc, #88]	@ (800111c <UART2_Process+0x6c>)
 80010c2:	781a      	ldrb	r2, [r3, #0]
 80010c4:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <UART2_Process+0x68>)
 80010c6:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, "LED2 Toggle.\r\n", 14, 100);
 80010c8:	2364      	movs	r3, #100	@ 0x64
 80010ca:	220e      	movs	r2, #14
 80010cc:	4914      	ldr	r1, [pc, #80]	@ (8001120 <UART2_Process+0x70>)
 80010ce:	4815      	ldr	r0, [pc, #84]	@ (8001124 <UART2_Process+0x74>)
 80010d0:	f002 f99e 	bl	8003410 <HAL_UART_Transmit>
  }

  if (uart_data_ready)
 80010d4:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <UART2_Process+0x78>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d019      	beq.n	8001110 <UART2_Process+0x60>
  {
      // 수신된 데이터 처리
      UART2_Print(uart2_rx_buf);    // uart2 수신 버퍼
 80010dc:	4813      	ldr	r0, [pc, #76]	@ (800112c <UART2_Process+0x7c>)
 80010de:	f7ff fee5 	bl	8000eac <UART2_Print>

      UART2_RxDataParsing(uart2_rx_buf);
 80010e2:	4812      	ldr	r0, [pc, #72]	@ (800112c <UART2_Process+0x7c>)
 80010e4:	f7ff ffac 	bl	8001040 <UART2_RxDataParsing>

      uart_rx_length = 0;
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <UART2_Process+0x80>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	801a      	strh	r2, [r3, #0]
      uart_data_ready = 0;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <UART2_Process+0x78>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
      // DMA 재시작
      // HAL_UART_DMAStop(&huart2);  // 수신 중단
      HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart2_rx_buf, UART2_RX_BUF_SIZE);
 80010f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010f8:	490c      	ldr	r1, [pc, #48]	@ (800112c <UART2_Process+0x7c>)
 80010fa:	480a      	ldr	r0, [pc, #40]	@ (8001124 <UART2_Process+0x74>)
 80010fc:	f002 fa13 	bl	8003526 <HAL_UARTEx_ReceiveToIdle_DMA>
      __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <UART2_Process+0x84>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <UART2_Process+0x84>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0208 	bic.w	r2, r2, #8
 800110e:	601a      	str	r2, [r3, #0]
  }

  return ;
 8001110:	bf00      	nop
 8001112:	bf00      	nop
}
 8001114:	4618      	mov	r0, r3
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200000ad 	.word	0x200000ad
 800111c:	200000ac 	.word	0x200000ac
 8001120:	08004944 	.word	0x08004944
 8001124:	2000030c 	.word	0x2000030c
 8001128:	20000304 	.word	0x20000304
 800112c:	20000104 	.word	0x20000104
 8001130:	20000306 	.word	0x20000306
 8001134:	2000039c 	.word	0x2000039c

08001138 <UART6_Process>:

uint8_t UART6_Process (void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  if (uart6_data_ready)
 800113c:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <UART6_Process+0x2c>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00b      	beq.n	800115c <UART6_Process+0x24>
  {
    UART6_RxDataParsing(uart6_rx_buf);
 8001144:	4808      	ldr	r0, [pc, #32]	@ (8001168 <UART6_Process+0x30>)
 8001146:	f7ff ff3b 	bl	8000fc0 <UART6_RxDataParsing>

    // 수신된 데이터 처리
    UART6_Print(uart6_rx_buf);    // uart2 수신 버퍼
 800114a:	4807      	ldr	r0, [pc, #28]	@ (8001168 <UART6_Process+0x30>)
 800114c:	f7ff fedc 	bl	8000f08 <UART6_Print>

    

    
    uart6_rx_length = 0;
 8001150:	4b06      	ldr	r3, [pc, #24]	@ (800116c <UART6_Process+0x34>)
 8001152:	2200      	movs	r2, #0
 8001154:	801a      	strh	r2, [r3, #0]
    uart6_data_ready = 0;
 8001156:	4b03      	ldr	r3, [pc, #12]	@ (8001164 <UART6_Process+0x2c>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
    // HAL_UART_DMAStop(&huart2);  // 수신 중단
    // HAL_UARTEx_ReceiveToIdle_DMA(&huart6, (uint8_t *) uart6_rx_buf, UART6_RX_BUF_SIZE);
    // __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
  }

  return ;
 800115c:	bf00      	nop
 800115e:	bf00      	nop
}
 8001160:	4618      	mov	r0, r3
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000308 	.word	0x20000308
 8001168:	20000204 	.word	0x20000204
 800116c:	2000030a 	.word	0x2000030a

08001170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001170:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001174:	f7ff fcb2 	bl	8000adc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001178:	480c      	ldr	r0, [pc, #48]	@ (80011ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800117a:	490d      	ldr	r1, [pc, #52]	@ (80011b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800117c:	4a0d      	ldr	r2, [pc, #52]	@ (80011b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a0a      	ldr	r2, [pc, #40]	@ (80011b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001190:	4c0a      	ldr	r4, [pc, #40]	@ (80011bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800119e:	f003 fb3b 	bl	8004818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011a2:	f7ff faa9 	bl	80006f8 <main>
  bx  lr    
 80011a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011a8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80011ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80011b4:	08004984 	.word	0x08004984
  ldr r2, =_sbss
 80011b8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80011bc:	20000464 	.word	0x20000464

080011c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c0:	e7fe      	b.n	80011c0 <ADC_IRQHandler>
	...

080011c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001204 <HAL_Init+0x40>)
 80011ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001204 <HAL_Init+0x40>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001204 <HAL_Init+0x40>)
 80011da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e0:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <HAL_Init+0x40>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a07      	ldr	r2, [pc, #28]	@ (8001204 <HAL_Init+0x40>)
 80011e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ec:	2003      	movs	r0, #3
 80011ee:	f000 f92b 	bl	8001448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f2:	200f      	movs	r0, #15
 80011f4:	f000 f808 	bl	8001208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f8:	f7ff fb3c 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023c00 	.word	0x40023c00

08001208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <HAL_InitTick+0x54>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <HAL_InitTick+0x58>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800121e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f943 	bl	80014b2 <HAL_SYSTICK_Config>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e00e      	b.n	8001254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d80a      	bhi.n	8001252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f000 f90b 	bl	800145e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001248:	4a06      	ldr	r2, [pc, #24]	@ (8001264 <HAL_InitTick+0x5c>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	e000      	b.n	8001254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000004 	.word	0x20000004
 8001260:	2000008c 	.word	0x2000008c
 8001264:	20000088 	.word	0x20000088

08001268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <HAL_IncTick+0x20>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b06      	ldr	r3, [pc, #24]	@ (800128c <HAL_IncTick+0x24>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a04      	ldr	r2, [pc, #16]	@ (800128c <HAL_IncTick+0x24>)
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	2000008c 	.word	0x2000008c
 800128c:	20000460 	.word	0x20000460

08001290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return uwTick;
 8001294:	4b03      	ldr	r3, [pc, #12]	@ (80012a4 <HAL_GetTick+0x14>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000460 	.word	0x20000460

080012a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b8:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <__NVIC_SetPriorityGrouping+0x44>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012c4:	4013      	ands	r3, r2
 80012c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012da:	4a04      	ldr	r2, [pc, #16]	@ (80012ec <__NVIC_SetPriorityGrouping+0x44>)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	60d3      	str	r3, [r2, #12]
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f4:	4b04      	ldr	r3, [pc, #16]	@ (8001308 <__NVIC_GetPriorityGrouping+0x18>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	0a1b      	lsrs	r3, r3, #8
 80012fa:	f003 0307 	and.w	r3, r3, #7
}
 80012fe:	4618      	mov	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	2b00      	cmp	r3, #0
 800131c:	db0b      	blt.n	8001336 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	f003 021f 	and.w	r2, r3, #31
 8001324:	4907      	ldr	r1, [pc, #28]	@ (8001344 <__NVIC_EnableIRQ+0x38>)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	095b      	lsrs	r3, r3, #5
 800132c:	2001      	movs	r0, #1
 800132e:	fa00 f202 	lsl.w	r2, r0, r2
 8001332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000e100 	.word	0xe000e100

08001348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	6039      	str	r1, [r7, #0]
 8001352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001358:	2b00      	cmp	r3, #0
 800135a:	db0a      	blt.n	8001372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	b2da      	uxtb	r2, r3
 8001360:	490c      	ldr	r1, [pc, #48]	@ (8001394 <__NVIC_SetPriority+0x4c>)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	0112      	lsls	r2, r2, #4
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	440b      	add	r3, r1
 800136c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001370:	e00a      	b.n	8001388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4908      	ldr	r1, [pc, #32]	@ (8001398 <__NVIC_SetPriority+0x50>)
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	3b04      	subs	r3, #4
 8001380:	0112      	lsls	r2, r2, #4
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	440b      	add	r3, r1
 8001386:	761a      	strb	r2, [r3, #24]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000e100 	.word	0xe000e100
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800139c:	b480      	push	{r7}
 800139e:	b089      	sub	sp, #36	@ 0x24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f1c3 0307 	rsb	r3, r3, #7
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	bf28      	it	cs
 80013ba:	2304      	movcs	r3, #4
 80013bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3304      	adds	r3, #4
 80013c2:	2b06      	cmp	r3, #6
 80013c4:	d902      	bls.n	80013cc <NVIC_EncodePriority+0x30>
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3b03      	subs	r3, #3
 80013ca:	e000      	b.n	80013ce <NVIC_EncodePriority+0x32>
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	f04f 32ff 	mov.w	r2, #4294967295
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43da      	mvns	r2, r3
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	401a      	ands	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e4:	f04f 31ff 	mov.w	r1, #4294967295
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	fa01 f303 	lsl.w	r3, r1, r3
 80013ee:	43d9      	mvns	r1, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	4313      	orrs	r3, r2
         );
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3724      	adds	r7, #36	@ 0x24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001414:	d301      	bcc.n	800141a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001416:	2301      	movs	r3, #1
 8001418:	e00f      	b.n	800143a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141a:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <SysTick_Config+0x40>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3b01      	subs	r3, #1
 8001420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001422:	210f      	movs	r1, #15
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	f7ff ff8e 	bl	8001348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800142c:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <SysTick_Config+0x40>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001432:	4b04      	ldr	r3, [pc, #16]	@ (8001444 <SysTick_Config+0x40>)
 8001434:	2207      	movs	r2, #7
 8001436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	e000e010 	.word	0xe000e010

08001448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff ff29 	bl	80012a8 <__NVIC_SetPriorityGrouping>
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800145e:	b580      	push	{r7, lr}
 8001460:	b086      	sub	sp, #24
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	607a      	str	r2, [r7, #4]
 800146a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001470:	f7ff ff3e 	bl	80012f0 <__NVIC_GetPriorityGrouping>
 8001474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	68b9      	ldr	r1, [r7, #8]
 800147a:	6978      	ldr	r0, [r7, #20]
 800147c:	f7ff ff8e 	bl	800139c <NVIC_EncodePriority>
 8001480:	4602      	mov	r2, r0
 8001482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff5d 	bl	8001348 <__NVIC_SetPriority>
}
 800148e:	bf00      	nop
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff31 	bl	800130c <__NVIC_EnableIRQ>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ffa2 	bl	8001404 <SysTick_Config>
 80014c0:	4603      	mov	r3, r0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80014d8:	f7ff feda 	bl	8001290 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e099      	b.n	800161c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2202      	movs	r2, #2
 80014ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0201 	bic.w	r2, r2, #1
 8001506:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001508:	e00f      	b.n	800152a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800150a:	f7ff fec1 	bl	8001290 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b05      	cmp	r3, #5
 8001516:	d908      	bls.n	800152a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2220      	movs	r2, #32
 800151c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2203      	movs	r2, #3
 8001522:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e078      	b.n	800161c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1e8      	bne.n	800150a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	4b38      	ldr	r3, [pc, #224]	@ (8001624 <HAL_DMA_Init+0x158>)
 8001544:	4013      	ands	r3, r2
 8001546:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001556:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001562:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800156e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	4313      	orrs	r3, r2
 800157a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001580:	2b04      	cmp	r3, #4
 8001582:	d107      	bne.n	8001594 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158c:	4313      	orrs	r3, r2
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	4313      	orrs	r3, r2
 8001592:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f023 0307 	bic.w	r3, r3, #7
 80015aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	d117      	bne.n	80015ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d00e      	beq.n	80015ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f000 fb01 	bl	8001bd8 <DMA_CheckFifoParam>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d008      	beq.n	80015ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2240      	movs	r2, #64	@ 0x40
 80015e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80015ea:	2301      	movs	r3, #1
 80015ec:	e016      	b.n	800161c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 fab8 	bl	8001b6c <DMA_CalcBaseAndBitshift>
 80015fc:	4603      	mov	r3, r0
 80015fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001604:	223f      	movs	r2, #63	@ 0x3f
 8001606:	409a      	lsls	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	f010803f 	.word	0xf010803f

08001628 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001646:	2b01      	cmp	r3, #1
 8001648:	d101      	bne.n	800164e <HAL_DMA_Start_IT+0x26>
 800164a:	2302      	movs	r3, #2
 800164c:	e040      	b.n	80016d0 <HAL_DMA_Start_IT+0xa8>
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b01      	cmp	r3, #1
 8001660:	d12f      	bne.n	80016c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2202      	movs	r2, #2
 8001666:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2200      	movs	r2, #0
 800166e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 fa4a 	bl	8001b10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001680:	223f      	movs	r2, #63	@ 0x3f
 8001682:	409a      	lsls	r2, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 0216 	orr.w	r2, r2, #22
 8001696:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169c:	2b00      	cmp	r3, #0
 800169e:	d007      	beq.n	80016b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 0208 	orr.w	r2, r2, #8
 80016ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0201 	orr.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	e005      	b.n	80016ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80016ca:	2302      	movs	r3, #2
 80016cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80016ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016e6:	f7ff fdd3 	bl	8001290 <HAL_GetTick>
 80016ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d008      	beq.n	800170a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2280      	movs	r2, #128	@ 0x80
 80016fc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e052      	b.n	80017b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0216 	bic.w	r2, r2, #22
 8001718:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	695a      	ldr	r2, [r3, #20]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001728:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	2b00      	cmp	r3, #0
 8001730:	d103      	bne.n	800173a <HAL_DMA_Abort+0x62>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001736:	2b00      	cmp	r3, #0
 8001738:	d007      	beq.n	800174a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 0208 	bic.w	r2, r2, #8
 8001748:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0201 	bic.w	r2, r2, #1
 8001758:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800175a:	e013      	b.n	8001784 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800175c:	f7ff fd98 	bl	8001290 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b05      	cmp	r3, #5
 8001768:	d90c      	bls.n	8001784 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2220      	movs	r2, #32
 800176e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2203      	movs	r2, #3
 8001774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e015      	b.n	80017b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1e4      	bne.n	800175c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001796:	223f      	movs	r2, #63	@ 0x3f
 8001798:	409a      	lsls	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d004      	beq.n	80017d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2280      	movs	r2, #128	@ 0x80
 80017d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00c      	b.n	80017f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2205      	movs	r2, #5
 80017da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0201 	bic.w	r2, r2, #1
 80017ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001808:	4b8e      	ldr	r3, [pc, #568]	@ (8001a44 <HAL_DMA_IRQHandler+0x248>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a8e      	ldr	r2, [pc, #568]	@ (8001a48 <HAL_DMA_IRQHandler+0x24c>)
 800180e:	fba2 2303 	umull	r2, r3, r2, r3
 8001812:	0a9b      	lsrs	r3, r3, #10
 8001814:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001826:	2208      	movs	r2, #8
 8001828:	409a      	lsls	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4013      	ands	r3, r2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d01a      	beq.n	8001868 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	d013      	beq.n	8001868 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0204 	bic.w	r2, r2, #4
 800184e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001854:	2208      	movs	r2, #8
 8001856:	409a      	lsls	r2, r3
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001860:	f043 0201 	orr.w	r2, r3, #1
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800186c:	2201      	movs	r2, #1
 800186e:	409a      	lsls	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4013      	ands	r3, r2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d012      	beq.n	800189e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00b      	beq.n	800189e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800188a:	2201      	movs	r2, #1
 800188c:	409a      	lsls	r2, r3
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001896:	f043 0202 	orr.w	r2, r3, #2
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a2:	2204      	movs	r2, #4
 80018a4:	409a      	lsls	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d012      	beq.n	80018d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00b      	beq.n	80018d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c0:	2204      	movs	r2, #4
 80018c2:	409a      	lsls	r2, r3
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018cc:	f043 0204 	orr.w	r2, r3, #4
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018d8:	2210      	movs	r2, #16
 80018da:	409a      	lsls	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4013      	ands	r3, r2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d043      	beq.n	800196c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d03c      	beq.n	800196c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f6:	2210      	movs	r2, #16
 80018f8:	409a      	lsls	r2, r3
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d018      	beq.n	800193e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d108      	bne.n	800192c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	2b00      	cmp	r3, #0
 8001920:	d024      	beq.n	800196c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	4798      	blx	r3
 800192a:	e01f      	b.n	800196c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01b      	beq.n	800196c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	4798      	blx	r3
 800193c:	e016      	b.n	800196c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001948:	2b00      	cmp	r3, #0
 800194a:	d107      	bne.n	800195c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0208 	bic.w	r2, r2, #8
 800195a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001970:	2220      	movs	r2, #32
 8001972:	409a      	lsls	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4013      	ands	r3, r2
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 808f 	beq.w	8001a9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0310 	and.w	r3, r3, #16
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 8087 	beq.w	8001a9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001992:	2220      	movs	r2, #32
 8001994:	409a      	lsls	r2, r3
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b05      	cmp	r3, #5
 80019a4:	d136      	bne.n	8001a14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 0216 	bic.w	r2, r2, #22
 80019b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	695a      	ldr	r2, [r3, #20]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d103      	bne.n	80019d6 <HAL_DMA_IRQHandler+0x1da>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d007      	beq.n	80019e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0208 	bic.w	r2, r2, #8
 80019e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ea:	223f      	movs	r2, #63	@ 0x3f
 80019ec:	409a      	lsls	r2, r3
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d07e      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	4798      	blx	r3
        }
        return;
 8001a12:	e079      	b.n	8001b08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d01d      	beq.n	8001a5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10d      	bne.n	8001a4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d031      	beq.n	8001a9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	4798      	blx	r3
 8001a40:	e02c      	b.n	8001a9c <HAL_DMA_IRQHandler+0x2a0>
 8001a42:	bf00      	nop
 8001a44:	20000004 	.word	0x20000004
 8001a48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d023      	beq.n	8001a9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	4798      	blx	r3
 8001a5c:	e01e      	b.n	8001a9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10f      	bne.n	8001a8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0210 	bic.w	r2, r2, #16
 8001a7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d032      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d022      	beq.n	8001af6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2205      	movs	r2, #5
 8001ab4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0201 	bic.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	3301      	adds	r3, #1
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d307      	bcc.n	8001ae4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f2      	bne.n	8001ac8 <HAL_DMA_IRQHandler+0x2cc>
 8001ae2:	e000      	b.n	8001ae6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ae4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	4798      	blx	r3
 8001b06:	e000      	b.n	8001b0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b08:	bf00      	nop
    }
  }
}
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001b2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2b40      	cmp	r3, #64	@ 0x40
 8001b3c:	d108      	bne.n	8001b50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b4e:	e007      	b.n	8001b60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	60da      	str	r2, [r3, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	3b10      	subs	r3, #16
 8001b7c:	4a14      	ldr	r2, [pc, #80]	@ (8001bd0 <DMA_CalcBaseAndBitshift+0x64>)
 8001b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b82:	091b      	lsrs	r3, r3, #4
 8001b84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b86:	4a13      	ldr	r2, [pc, #76]	@ (8001bd4 <DMA_CalcBaseAndBitshift+0x68>)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d909      	bls.n	8001bae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ba2:	f023 0303 	bic.w	r3, r3, #3
 8001ba6:	1d1a      	adds	r2, r3, #4
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	659a      	str	r2, [r3, #88]	@ 0x58
 8001bac:	e007      	b.n	8001bbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001bb6:	f023 0303 	bic.w	r3, r3, #3
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3714      	adds	r7, #20
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	aaaaaaab 	.word	0xaaaaaaab
 8001bd4:	0800496c 	.word	0x0800496c

08001bd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d11f      	bne.n	8001c32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d856      	bhi.n	8001ca6 <DMA_CheckFifoParam+0xce>
 8001bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8001c00 <DMA_CheckFifoParam+0x28>)
 8001bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bfe:	bf00      	nop
 8001c00:	08001c11 	.word	0x08001c11
 8001c04:	08001c23 	.word	0x08001c23
 8001c08:	08001c11 	.word	0x08001c11
 8001c0c:	08001ca7 	.word	0x08001ca7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d046      	beq.n	8001caa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c20:	e043      	b.n	8001caa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c26:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c2a:	d140      	bne.n	8001cae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c30:	e03d      	b.n	8001cae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c3a:	d121      	bne.n	8001c80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d837      	bhi.n	8001cb2 <DMA_CheckFifoParam+0xda>
 8001c42:	a201      	add	r2, pc, #4	@ (adr r2, 8001c48 <DMA_CheckFifoParam+0x70>)
 8001c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c48:	08001c59 	.word	0x08001c59
 8001c4c:	08001c5f 	.word	0x08001c5f
 8001c50:	08001c59 	.word	0x08001c59
 8001c54:	08001c71 	.word	0x08001c71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c5c:	e030      	b.n	8001cc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d025      	beq.n	8001cb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c6e:	e022      	b.n	8001cb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c74:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c78:	d11f      	bne.n	8001cba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c7e:	e01c      	b.n	8001cba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d903      	bls.n	8001c8e <DMA_CheckFifoParam+0xb6>
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d003      	beq.n	8001c94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c8c:	e018      	b.n	8001cc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	73fb      	strb	r3, [r7, #15]
      break;
 8001c92:	e015      	b.n	8001cc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00e      	beq.n	8001cbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ca4:	e00b      	b.n	8001cbe <DMA_CheckFifoParam+0xe6>
      break;
 8001ca6:	bf00      	nop
 8001ca8:	e00a      	b.n	8001cc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001caa:	bf00      	nop
 8001cac:	e008      	b.n	8001cc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cae:	bf00      	nop
 8001cb0:	e006      	b.n	8001cc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cb2:	bf00      	nop
 8001cb4:	e004      	b.n	8001cc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cb6:	bf00      	nop
 8001cb8:	e002      	b.n	8001cc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001cba:	bf00      	nop
 8001cbc:	e000      	b.n	8001cc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cbe:	bf00      	nop
    }
  } 
  
  return status; 
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop

08001cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b089      	sub	sp, #36	@ 0x24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	e177      	b.n	8001fdc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cec:	2201      	movs	r2, #1
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	f040 8166 	bne.w	8001fd6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d005      	beq.n	8001d22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d130      	bne.n	8001d84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d58:	2201      	movs	r2, #1
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	091b      	lsrs	r3, r3, #4
 8001d6e:	f003 0201 	and.w	r2, r3, #1
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	d017      	beq.n	8001dc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d123      	bne.n	8001e14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	08da      	lsrs	r2, r3, #3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3208      	adds	r2, #8
 8001dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	220f      	movs	r2, #15
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	691a      	ldr	r2, [r3, #16]
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	08da      	lsrs	r2, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3208      	adds	r2, #8
 8001e0e:	69b9      	ldr	r1, [r7, #24]
 8001e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	2203      	movs	r2, #3
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0203 	and.w	r2, r3, #3
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 80c0 	beq.w	8001fd6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	4b66      	ldr	r3, [pc, #408]	@ (8001ff4 <HAL_GPIO_Init+0x324>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5e:	4a65      	ldr	r2, [pc, #404]	@ (8001ff4 <HAL_GPIO_Init+0x324>)
 8001e60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e66:	4b63      	ldr	r3, [pc, #396]	@ (8001ff4 <HAL_GPIO_Init+0x324>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e72:	4a61      	ldr	r2, [pc, #388]	@ (8001ff8 <HAL_GPIO_Init+0x328>)
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	089b      	lsrs	r3, r3, #2
 8001e78:	3302      	adds	r3, #2
 8001e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	220f      	movs	r2, #15
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a58      	ldr	r2, [pc, #352]	@ (8001ffc <HAL_GPIO_Init+0x32c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d037      	beq.n	8001f0e <HAL_GPIO_Init+0x23e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a57      	ldr	r2, [pc, #348]	@ (8002000 <HAL_GPIO_Init+0x330>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d031      	beq.n	8001f0a <HAL_GPIO_Init+0x23a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a56      	ldr	r2, [pc, #344]	@ (8002004 <HAL_GPIO_Init+0x334>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d02b      	beq.n	8001f06 <HAL_GPIO_Init+0x236>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a55      	ldr	r2, [pc, #340]	@ (8002008 <HAL_GPIO_Init+0x338>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d025      	beq.n	8001f02 <HAL_GPIO_Init+0x232>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a54      	ldr	r2, [pc, #336]	@ (800200c <HAL_GPIO_Init+0x33c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d01f      	beq.n	8001efe <HAL_GPIO_Init+0x22e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a53      	ldr	r2, [pc, #332]	@ (8002010 <HAL_GPIO_Init+0x340>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d019      	beq.n	8001efa <HAL_GPIO_Init+0x22a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a52      	ldr	r2, [pc, #328]	@ (8002014 <HAL_GPIO_Init+0x344>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d013      	beq.n	8001ef6 <HAL_GPIO_Init+0x226>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a51      	ldr	r2, [pc, #324]	@ (8002018 <HAL_GPIO_Init+0x348>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d00d      	beq.n	8001ef2 <HAL_GPIO_Init+0x222>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a50      	ldr	r2, [pc, #320]	@ (800201c <HAL_GPIO_Init+0x34c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d007      	beq.n	8001eee <HAL_GPIO_Init+0x21e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a4f      	ldr	r2, [pc, #316]	@ (8002020 <HAL_GPIO_Init+0x350>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d101      	bne.n	8001eea <HAL_GPIO_Init+0x21a>
 8001ee6:	2309      	movs	r3, #9
 8001ee8:	e012      	b.n	8001f10 <HAL_GPIO_Init+0x240>
 8001eea:	230a      	movs	r3, #10
 8001eec:	e010      	b.n	8001f10 <HAL_GPIO_Init+0x240>
 8001eee:	2308      	movs	r3, #8
 8001ef0:	e00e      	b.n	8001f10 <HAL_GPIO_Init+0x240>
 8001ef2:	2307      	movs	r3, #7
 8001ef4:	e00c      	b.n	8001f10 <HAL_GPIO_Init+0x240>
 8001ef6:	2306      	movs	r3, #6
 8001ef8:	e00a      	b.n	8001f10 <HAL_GPIO_Init+0x240>
 8001efa:	2305      	movs	r3, #5
 8001efc:	e008      	b.n	8001f10 <HAL_GPIO_Init+0x240>
 8001efe:	2304      	movs	r3, #4
 8001f00:	e006      	b.n	8001f10 <HAL_GPIO_Init+0x240>
 8001f02:	2303      	movs	r3, #3
 8001f04:	e004      	b.n	8001f10 <HAL_GPIO_Init+0x240>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e002      	b.n	8001f10 <HAL_GPIO_Init+0x240>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <HAL_GPIO_Init+0x240>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	f002 0203 	and.w	r2, r2, #3
 8001f16:	0092      	lsls	r2, r2, #2
 8001f18:	4093      	lsls	r3, r2
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f20:	4935      	ldr	r1, [pc, #212]	@ (8001ff8 <HAL_GPIO_Init+0x328>)
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	3302      	adds	r3, #2
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002024 <HAL_GPIO_Init+0x354>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f52:	4a34      	ldr	r2, [pc, #208]	@ (8002024 <HAL_GPIO_Init+0x354>)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f58:	4b32      	ldr	r3, [pc, #200]	@ (8002024 <HAL_GPIO_Init+0x354>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f7c:	4a29      	ldr	r2, [pc, #164]	@ (8002024 <HAL_GPIO_Init+0x354>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f82:	4b28      	ldr	r3, [pc, #160]	@ (8002024 <HAL_GPIO_Init+0x354>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fa6:	4a1f      	ldr	r2, [pc, #124]	@ (8002024 <HAL_GPIO_Init+0x354>)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fac:	4b1d      	ldr	r3, [pc, #116]	@ (8002024 <HAL_GPIO_Init+0x354>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fd0:	4a14      	ldr	r2, [pc, #80]	@ (8002024 <HAL_GPIO_Init+0x354>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	61fb      	str	r3, [r7, #28]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	2b0f      	cmp	r3, #15
 8001fe0:	f67f ae84 	bls.w	8001cec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	bf00      	nop
 8001fe8:	3724      	adds	r7, #36	@ 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40013800 	.word	0x40013800
 8001ffc:	40020000 	.word	0x40020000
 8002000:	40020400 	.word	0x40020400
 8002004:	40020800 	.word	0x40020800
 8002008:	40020c00 	.word	0x40020c00
 800200c:	40021000 	.word	0x40021000
 8002010:	40021400 	.word	0x40021400
 8002014:	40021800 	.word	0x40021800
 8002018:	40021c00 	.word	0x40021c00
 800201c:	40022000 	.word	0x40022000
 8002020:	40022400 	.word	0x40022400
 8002024:	40013c00 	.word	0x40013c00

08002028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	807b      	strh	r3, [r7, #2]
 8002034:	4613      	mov	r3, r2
 8002036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002038:	787b      	ldrb	r3, [r7, #1]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203e:	887a      	ldrh	r2, [r7, #2]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002044:	e003      	b.n	800204e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002046:	887b      	ldrh	r3, [r7, #2]
 8002048:	041a      	lsls	r2, r3, #16
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	619a      	str	r2, [r3, #24]
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800205a:	b480      	push	{r7}
 800205c:	b085      	sub	sp, #20
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800206c:	887a      	ldrh	r2, [r7, #2]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4013      	ands	r3, r2
 8002072:	041a      	lsls	r2, r3, #16
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	43d9      	mvns	r1, r3
 8002078:	887b      	ldrh	r3, [r7, #2]
 800207a:	400b      	ands	r3, r1
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	619a      	str	r2, [r3, #24]
}
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800209a:	4b08      	ldr	r3, [pc, #32]	@ (80020bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d006      	beq.n	80020b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020a6:	4a05      	ldr	r2, [pc, #20]	@ (80020bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020ac:	88fb      	ldrh	r3, [r7, #6]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fc98 	bl	80009e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40013c00 	.word	0x40013c00

080020c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	603b      	str	r3, [r7, #0]
 80020ce:	4b20      	ldr	r3, [pc, #128]	@ (8002150 <HAL_PWREx_EnableOverDrive+0x90>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002150 <HAL_PWREx_EnableOverDrive+0x90>)
 80020d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020da:	4b1d      	ldr	r3, [pc, #116]	@ (8002150 <HAL_PWREx_EnableOverDrive+0x90>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002154 <HAL_PWREx_EnableOverDrive+0x94>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020ec:	f7ff f8d0 	bl	8001290 <HAL_GetTick>
 80020f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020f2:	e009      	b.n	8002108 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020f4:	f7ff f8cc 	bl	8001290 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002102:	d901      	bls.n	8002108 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e01f      	b.n	8002148 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002108:	4b13      	ldr	r3, [pc, #76]	@ (8002158 <HAL_PWREx_EnableOverDrive+0x98>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002114:	d1ee      	bne.n	80020f4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002116:	4b11      	ldr	r3, [pc, #68]	@ (800215c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002118:	2201      	movs	r2, #1
 800211a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800211c:	f7ff f8b8 	bl	8001290 <HAL_GetTick>
 8002120:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002122:	e009      	b.n	8002138 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002124:	f7ff f8b4 	bl	8001290 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002132:	d901      	bls.n	8002138 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e007      	b.n	8002148 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002138:	4b07      	ldr	r3, [pc, #28]	@ (8002158 <HAL_PWREx_EnableOverDrive+0x98>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002140:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002144:	d1ee      	bne.n	8002124 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40023800 	.word	0x40023800
 8002154:	420e0040 	.word	0x420e0040
 8002158:	40007000 	.word	0x40007000
 800215c:	420e0044 	.word	0x420e0044

08002160 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e267      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d075      	beq.n	800226a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800217e:	4b88      	ldr	r3, [pc, #544]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b04      	cmp	r3, #4
 8002188:	d00c      	beq.n	80021a4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800218a:	4b85      	ldr	r3, [pc, #532]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002192:	2b08      	cmp	r3, #8
 8002194:	d112      	bne.n	80021bc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002196:	4b82      	ldr	r3, [pc, #520]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800219e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021a2:	d10b      	bne.n	80021bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a4:	4b7e      	ldr	r3, [pc, #504]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d05b      	beq.n	8002268 <HAL_RCC_OscConfig+0x108>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d157      	bne.n	8002268 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e242      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021c4:	d106      	bne.n	80021d4 <HAL_RCC_OscConfig+0x74>
 80021c6:	4b76      	ldr	r3, [pc, #472]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a75      	ldr	r2, [pc, #468]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e01d      	b.n	8002210 <HAL_RCC_OscConfig+0xb0>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x98>
 80021de:	4b70      	ldr	r3, [pc, #448]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a6f      	ldr	r2, [pc, #444]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4b6d      	ldr	r3, [pc, #436]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a6c      	ldr	r2, [pc, #432]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e00b      	b.n	8002210 <HAL_RCC_OscConfig+0xb0>
 80021f8:	4b69      	ldr	r3, [pc, #420]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a68      	ldr	r2, [pc, #416]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80021fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b66      	ldr	r3, [pc, #408]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a65      	ldr	r2, [pc, #404]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 800220a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800220e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d013      	beq.n	8002240 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7ff f83a 	bl	8001290 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002220:	f7ff f836 	bl	8001290 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	@ 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e207      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	4b5b      	ldr	r3, [pc, #364]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0xc0>
 800223e:	e014      	b.n	800226a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7ff f826 	bl	8001290 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002248:	f7ff f822 	bl	8001290 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	@ 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e1f3      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225a:	4b51      	ldr	r3, [pc, #324]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0xe8>
 8002266:	e000      	b.n	800226a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d063      	beq.n	800233e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002276:	4b4a      	ldr	r3, [pc, #296]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00b      	beq.n	800229a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002282:	4b47      	ldr	r3, [pc, #284]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800228a:	2b08      	cmp	r3, #8
 800228c:	d11c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800228e:	4b44      	ldr	r3, [pc, #272]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d116      	bne.n	80022c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229a:	4b41      	ldr	r3, [pc, #260]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d005      	beq.n	80022b2 <HAL_RCC_OscConfig+0x152>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d001      	beq.n	80022b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e1c7      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b2:	4b3b      	ldr	r3, [pc, #236]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4937      	ldr	r1, [pc, #220]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c6:	e03a      	b.n	800233e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d020      	beq.n	8002312 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d0:	4b34      	ldr	r3, [pc, #208]	@ (80023a4 <HAL_RCC_OscConfig+0x244>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7fe ffdb 	bl	8001290 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022de:	f7fe ffd7 	bl	8001290 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e1a8      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f0:	4b2b      	ldr	r3, [pc, #172]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fc:	4b28      	ldr	r3, [pc, #160]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4925      	ldr	r1, [pc, #148]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 800230c:	4313      	orrs	r3, r2
 800230e:	600b      	str	r3, [r1, #0]
 8002310:	e015      	b.n	800233e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002312:	4b24      	ldr	r3, [pc, #144]	@ (80023a4 <HAL_RCC_OscConfig+0x244>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7fe ffba 	bl	8001290 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002320:	f7fe ffb6 	bl	8001290 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e187      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002332:	4b1b      	ldr	r3, [pc, #108]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d036      	beq.n	80023b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d016      	beq.n	8002380 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002352:	4b15      	ldr	r3, [pc, #84]	@ (80023a8 <HAL_RCC_OscConfig+0x248>)
 8002354:	2201      	movs	r2, #1
 8002356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002358:	f7fe ff9a 	bl	8001290 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002360:	f7fe ff96 	bl	8001290 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e167      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002372:	4b0b      	ldr	r3, [pc, #44]	@ (80023a0 <HAL_RCC_OscConfig+0x240>)
 8002374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0x200>
 800237e:	e01b      	b.n	80023b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002380:	4b09      	ldr	r3, [pc, #36]	@ (80023a8 <HAL_RCC_OscConfig+0x248>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002386:	f7fe ff83 	bl	8001290 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800238c:	e00e      	b.n	80023ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800238e:	f7fe ff7f 	bl	8001290 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d907      	bls.n	80023ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e150      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
 80023a0:	40023800 	.word	0x40023800
 80023a4:	42470000 	.word	0x42470000
 80023a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ac:	4b88      	ldr	r3, [pc, #544]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 80023ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1ea      	bne.n	800238e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 8097 	beq.w	80024f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c6:	2300      	movs	r3, #0
 80023c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ca:	4b81      	ldr	r3, [pc, #516]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10f      	bne.n	80023f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	4b7d      	ldr	r3, [pc, #500]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023de:	4a7c      	ldr	r2, [pc, #496]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 80023e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023e6:	4b7a      	ldr	r3, [pc, #488]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023f2:	2301      	movs	r3, #1
 80023f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f6:	4b77      	ldr	r3, [pc, #476]	@ (80025d4 <HAL_RCC_OscConfig+0x474>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d118      	bne.n	8002434 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002402:	4b74      	ldr	r3, [pc, #464]	@ (80025d4 <HAL_RCC_OscConfig+0x474>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a73      	ldr	r2, [pc, #460]	@ (80025d4 <HAL_RCC_OscConfig+0x474>)
 8002408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800240c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240e:	f7fe ff3f 	bl	8001290 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002416:	f7fe ff3b 	bl	8001290 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e10c      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002428:	4b6a      	ldr	r3, [pc, #424]	@ (80025d4 <HAL_RCC_OscConfig+0x474>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d106      	bne.n	800244a <HAL_RCC_OscConfig+0x2ea>
 800243c:	4b64      	ldr	r3, [pc, #400]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 800243e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002440:	4a63      	ldr	r2, [pc, #396]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6713      	str	r3, [r2, #112]	@ 0x70
 8002448:	e01c      	b.n	8002484 <HAL_RCC_OscConfig+0x324>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b05      	cmp	r3, #5
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0x30c>
 8002452:	4b5f      	ldr	r3, [pc, #380]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002456:	4a5e      	ldr	r2, [pc, #376]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002458:	f043 0304 	orr.w	r3, r3, #4
 800245c:	6713      	str	r3, [r2, #112]	@ 0x70
 800245e:	4b5c      	ldr	r3, [pc, #368]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002462:	4a5b      	ldr	r2, [pc, #364]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6713      	str	r3, [r2, #112]	@ 0x70
 800246a:	e00b      	b.n	8002484 <HAL_RCC_OscConfig+0x324>
 800246c:	4b58      	ldr	r3, [pc, #352]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 800246e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002470:	4a57      	ldr	r2, [pc, #348]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002472:	f023 0301 	bic.w	r3, r3, #1
 8002476:	6713      	str	r3, [r2, #112]	@ 0x70
 8002478:	4b55      	ldr	r3, [pc, #340]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247c:	4a54      	ldr	r2, [pc, #336]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 800247e:	f023 0304 	bic.w	r3, r3, #4
 8002482:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d015      	beq.n	80024b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248c:	f7fe ff00 	bl	8001290 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002492:	e00a      	b.n	80024aa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002494:	f7fe fefc 	bl	8001290 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e0cb      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024aa:	4b49      	ldr	r3, [pc, #292]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 80024ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0ee      	beq.n	8002494 <HAL_RCC_OscConfig+0x334>
 80024b6:	e014      	b.n	80024e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b8:	f7fe feea 	bl	8001290 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024be:	e00a      	b.n	80024d6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c0:	f7fe fee6 	bl	8001290 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e0b5      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d6:	4b3e      	ldr	r3, [pc, #248]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 80024d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1ee      	bne.n	80024c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024e2:	7dfb      	ldrb	r3, [r7, #23]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d105      	bne.n	80024f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e8:	4b39      	ldr	r3, [pc, #228]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 80024ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ec:	4a38      	ldr	r2, [pc, #224]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 80024ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80a1 	beq.w	8002640 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024fe:	4b34      	ldr	r3, [pc, #208]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b08      	cmp	r3, #8
 8002508:	d05c      	beq.n	80025c4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d141      	bne.n	8002596 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002512:	4b31      	ldr	r3, [pc, #196]	@ (80025d8 <HAL_RCC_OscConfig+0x478>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7fe feba 	bl	8001290 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002520:	f7fe feb6 	bl	8001290 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e087      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002532:	4b27      	ldr	r3, [pc, #156]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69da      	ldr	r2, [r3, #28]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254c:	019b      	lsls	r3, r3, #6
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002554:	085b      	lsrs	r3, r3, #1
 8002556:	3b01      	subs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002560:	061b      	lsls	r3, r3, #24
 8002562:	491b      	ldr	r1, [pc, #108]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 8002564:	4313      	orrs	r3, r2
 8002566:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002568:	4b1b      	ldr	r3, [pc, #108]	@ (80025d8 <HAL_RCC_OscConfig+0x478>)
 800256a:	2201      	movs	r2, #1
 800256c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256e:	f7fe fe8f 	bl	8001290 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002576:	f7fe fe8b 	bl	8001290 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e05c      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002588:	4b11      	ldr	r3, [pc, #68]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x416>
 8002594:	e054      	b.n	8002640 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002596:	4b10      	ldr	r3, [pc, #64]	@ (80025d8 <HAL_RCC_OscConfig+0x478>)
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7fe fe78 	bl	8001290 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a4:	f7fe fe74 	bl	8001290 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e045      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b6:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <HAL_RCC_OscConfig+0x470>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x444>
 80025c2:	e03d      	b.n	8002640 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d107      	bne.n	80025dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e038      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40007000 	.word	0x40007000
 80025d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025dc:	4b1b      	ldr	r3, [pc, #108]	@ (800264c <HAL_RCC_OscConfig+0x4ec>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d028      	beq.n	800263c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d121      	bne.n	800263c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002602:	429a      	cmp	r2, r3
 8002604:	d11a      	bne.n	800263c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800260c:	4013      	ands	r3, r2
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002612:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002614:	4293      	cmp	r3, r2
 8002616:	d111      	bne.n	800263c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002622:	085b      	lsrs	r3, r3, #1
 8002624:	3b01      	subs	r3, #1
 8002626:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002628:	429a      	cmp	r2, r3
 800262a:	d107      	bne.n	800263c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002636:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800

08002650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0cc      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002664:	4b68      	ldr	r3, [pc, #416]	@ (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d90c      	bls.n	800268c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b65      	ldr	r3, [pc, #404]	@ (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267a:	4b63      	ldr	r3, [pc, #396]	@ (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0b8      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d020      	beq.n	80026da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a4:	4b59      	ldr	r3, [pc, #356]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	4a58      	ldr	r2, [pc, #352]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026bc:	4b53      	ldr	r3, [pc, #332]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4a52      	ldr	r2, [pc, #328]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c8:	4b50      	ldr	r3, [pc, #320]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	494d      	ldr	r1, [pc, #308]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d044      	beq.n	8002770 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	4b47      	ldr	r3, [pc, #284]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d119      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e07f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d003      	beq.n	800270e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800270a:	2b03      	cmp	r3, #3
 800270c:	d107      	bne.n	800271e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270e:	4b3f      	ldr	r3, [pc, #252]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d109      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e06f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271e:	4b3b      	ldr	r3, [pc, #236]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e067      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800272e:	4b37      	ldr	r3, [pc, #220]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f023 0203 	bic.w	r2, r3, #3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4934      	ldr	r1, [pc, #208]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	4313      	orrs	r3, r2
 800273e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002740:	f7fe fda6 	bl	8001290 <HAL_GetTick>
 8002744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002746:	e00a      	b.n	800275e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002748:	f7fe fda2 	bl	8001290 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e04f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	4b2b      	ldr	r3, [pc, #172]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 020c 	and.w	r2, r3, #12
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	429a      	cmp	r2, r3
 800276e:	d1eb      	bne.n	8002748 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002770:	4b25      	ldr	r3, [pc, #148]	@ (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 030f 	and.w	r3, r3, #15
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d20c      	bcs.n	8002798 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277e:	4b22      	ldr	r3, [pc, #136]	@ (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002786:	4b20      	ldr	r3, [pc, #128]	@ (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e032      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a4:	4b19      	ldr	r3, [pc, #100]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4916      	ldr	r1, [pc, #88]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d009      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027c2:	4b12      	ldr	r3, [pc, #72]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	490e      	ldr	r1, [pc, #56]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027d6:	f000 f821 	bl	800281c <HAL_RCC_GetSysClockFreq>
 80027da:	4602      	mov	r2, r0
 80027dc:	4b0b      	ldr	r3, [pc, #44]	@ (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	490a      	ldr	r1, [pc, #40]	@ (8002810 <HAL_RCC_ClockConfig+0x1c0>)
 80027e8:	5ccb      	ldrb	r3, [r1, r3]
 80027ea:	fa22 f303 	lsr.w	r3, r2, r3
 80027ee:	4a09      	ldr	r2, [pc, #36]	@ (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80027f2:	4b09      	ldr	r3, [pc, #36]	@ (8002818 <HAL_RCC_ClockConfig+0x1c8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe fd06 	bl	8001208 <HAL_InitTick>

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40023c00 	.word	0x40023c00
 800280c:	40023800 	.word	0x40023800
 8002810:	08004954 	.word	0x08004954
 8002814:	20000004 	.word	0x20000004
 8002818:	20000088 	.word	0x20000088

0800281c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800281c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002820:	b094      	sub	sp, #80	@ 0x50
 8002822:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002834:	4b79      	ldr	r3, [pc, #484]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 030c 	and.w	r3, r3, #12
 800283c:	2b08      	cmp	r3, #8
 800283e:	d00d      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x40>
 8002840:	2b08      	cmp	r3, #8
 8002842:	f200 80e1 	bhi.w	8002a08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0x34>
 800284a:	2b04      	cmp	r3, #4
 800284c:	d003      	beq.n	8002856 <HAL_RCC_GetSysClockFreq+0x3a>
 800284e:	e0db      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002850:	4b73      	ldr	r3, [pc, #460]	@ (8002a20 <HAL_RCC_GetSysClockFreq+0x204>)
 8002852:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002854:	e0db      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002856:	4b73      	ldr	r3, [pc, #460]	@ (8002a24 <HAL_RCC_GetSysClockFreq+0x208>)
 8002858:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800285a:	e0d8      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800285c:	4b6f      	ldr	r3, [pc, #444]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x200>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002864:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002866:	4b6d      	ldr	r3, [pc, #436]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d063      	beq.n	800293a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002872:	4b6a      	ldr	r3, [pc, #424]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	099b      	lsrs	r3, r3, #6
 8002878:	2200      	movs	r2, #0
 800287a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800287c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800287e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002884:	633b      	str	r3, [r7, #48]	@ 0x30
 8002886:	2300      	movs	r3, #0
 8002888:	637b      	str	r3, [r7, #52]	@ 0x34
 800288a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800288e:	4622      	mov	r2, r4
 8002890:	462b      	mov	r3, r5
 8002892:	f04f 0000 	mov.w	r0, #0
 8002896:	f04f 0100 	mov.w	r1, #0
 800289a:	0159      	lsls	r1, r3, #5
 800289c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028a0:	0150      	lsls	r0, r2, #5
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4621      	mov	r1, r4
 80028a8:	1a51      	subs	r1, r2, r1
 80028aa:	6139      	str	r1, [r7, #16]
 80028ac:	4629      	mov	r1, r5
 80028ae:	eb63 0301 	sbc.w	r3, r3, r1
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028c0:	4659      	mov	r1, fp
 80028c2:	018b      	lsls	r3, r1, #6
 80028c4:	4651      	mov	r1, sl
 80028c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ca:	4651      	mov	r1, sl
 80028cc:	018a      	lsls	r2, r1, #6
 80028ce:	4651      	mov	r1, sl
 80028d0:	ebb2 0801 	subs.w	r8, r2, r1
 80028d4:	4659      	mov	r1, fp
 80028d6:	eb63 0901 	sbc.w	r9, r3, r1
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028ee:	4690      	mov	r8, r2
 80028f0:	4699      	mov	r9, r3
 80028f2:	4623      	mov	r3, r4
 80028f4:	eb18 0303 	adds.w	r3, r8, r3
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	462b      	mov	r3, r5
 80028fc:	eb49 0303 	adc.w	r3, r9, r3
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800290e:	4629      	mov	r1, r5
 8002910:	024b      	lsls	r3, r1, #9
 8002912:	4621      	mov	r1, r4
 8002914:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002918:	4621      	mov	r1, r4
 800291a:	024a      	lsls	r2, r1, #9
 800291c:	4610      	mov	r0, r2
 800291e:	4619      	mov	r1, r3
 8002920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002922:	2200      	movs	r2, #0
 8002924:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002926:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002928:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800292c:	f7fd fc66 	bl	80001fc <__aeabi_uldivmod>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4613      	mov	r3, r2
 8002936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002938:	e058      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800293a:	4b38      	ldr	r3, [pc, #224]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x200>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	099b      	lsrs	r3, r3, #6
 8002940:	2200      	movs	r2, #0
 8002942:	4618      	mov	r0, r3
 8002944:	4611      	mov	r1, r2
 8002946:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800294a:	623b      	str	r3, [r7, #32]
 800294c:	2300      	movs	r3, #0
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002950:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002954:	4642      	mov	r2, r8
 8002956:	464b      	mov	r3, r9
 8002958:	f04f 0000 	mov.w	r0, #0
 800295c:	f04f 0100 	mov.w	r1, #0
 8002960:	0159      	lsls	r1, r3, #5
 8002962:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002966:	0150      	lsls	r0, r2, #5
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4641      	mov	r1, r8
 800296e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002972:	4649      	mov	r1, r9
 8002974:	eb63 0b01 	sbc.w	fp, r3, r1
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002984:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002988:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800298c:	ebb2 040a 	subs.w	r4, r2, sl
 8002990:	eb63 050b 	sbc.w	r5, r3, fp
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	00eb      	lsls	r3, r5, #3
 800299e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029a2:	00e2      	lsls	r2, r4, #3
 80029a4:	4614      	mov	r4, r2
 80029a6:	461d      	mov	r5, r3
 80029a8:	4643      	mov	r3, r8
 80029aa:	18e3      	adds	r3, r4, r3
 80029ac:	603b      	str	r3, [r7, #0]
 80029ae:	464b      	mov	r3, r9
 80029b0:	eb45 0303 	adc.w	r3, r5, r3
 80029b4:	607b      	str	r3, [r7, #4]
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029c2:	4629      	mov	r1, r5
 80029c4:	028b      	lsls	r3, r1, #10
 80029c6:	4621      	mov	r1, r4
 80029c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029cc:	4621      	mov	r1, r4
 80029ce:	028a      	lsls	r2, r1, #10
 80029d0:	4610      	mov	r0, r2
 80029d2:	4619      	mov	r1, r3
 80029d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029d6:	2200      	movs	r2, #0
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	61fa      	str	r2, [r7, #28]
 80029dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029e0:	f7fd fc0c 	bl	80001fc <__aeabi_uldivmod>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4613      	mov	r3, r2
 80029ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80029ec:	4b0b      	ldr	r3, [pc, #44]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x200>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	0c1b      	lsrs	r3, r3, #16
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	3301      	adds	r3, #1
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80029fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a06:	e002      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a08:	4b05      	ldr	r3, [pc, #20]	@ (8002a20 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3750      	adds	r7, #80	@ 0x50
 8002a14:	46bd      	mov	sp, r7
 8002a16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	00f42400 	.word	0x00f42400
 8002a24:	007a1200 	.word	0x007a1200

08002a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a2c:	4b03      	ldr	r3, [pc, #12]	@ (8002a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20000004 	.word	0x20000004

08002a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a44:	f7ff fff0 	bl	8002a28 <HAL_RCC_GetHCLKFreq>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	4b05      	ldr	r3, [pc, #20]	@ (8002a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	0a9b      	lsrs	r3, r3, #10
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	4903      	ldr	r1, [pc, #12]	@ (8002a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a56:	5ccb      	ldrb	r3, [r1, r3]
 8002a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40023800 	.word	0x40023800
 8002a64:	08004964 	.word	0x08004964

08002a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a6c:	f7ff ffdc 	bl	8002a28 <HAL_RCC_GetHCLKFreq>
 8002a70:	4602      	mov	r2, r0
 8002a72:	4b05      	ldr	r3, [pc, #20]	@ (8002a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	0b5b      	lsrs	r3, r3, #13
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	4903      	ldr	r1, [pc, #12]	@ (8002a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a7e:	5ccb      	ldrb	r3, [r1, r3]
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	08004964 	.word	0x08004964

08002a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e041      	b.n	8002b26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d106      	bne.n	8002abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7fe f872 	bl	8000ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3304      	adds	r3, #4
 8002acc:	4619      	mov	r1, r3
 8002ace:	4610      	mov	r0, r2
 8002ad0:	f000 fa7e 	bl	8002fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d001      	beq.n	8002b48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e04e      	b.n	8002be6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a23      	ldr	r2, [pc, #140]	@ (8002bf4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d022      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x80>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b72:	d01d      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x80>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a1f      	ldr	r2, [pc, #124]	@ (8002bf8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d018      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x80>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a1e      	ldr	r2, [pc, #120]	@ (8002bfc <HAL_TIM_Base_Start_IT+0xcc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d013      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x80>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a1c      	ldr	r2, [pc, #112]	@ (8002c00 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00e      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x80>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a1b      	ldr	r2, [pc, #108]	@ (8002c04 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d009      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x80>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a19      	ldr	r2, [pc, #100]	@ (8002c08 <HAL_TIM_Base_Start_IT+0xd8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d004      	beq.n	8002bb0 <HAL_TIM_Base_Start_IT+0x80>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a18      	ldr	r2, [pc, #96]	@ (8002c0c <HAL_TIM_Base_Start_IT+0xdc>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d111      	bne.n	8002bd4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b06      	cmp	r3, #6
 8002bc0:	d010      	beq.n	8002be4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f042 0201 	orr.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd2:	e007      	b.n	8002be4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40010000 	.word	0x40010000
 8002bf8:	40000400 	.word	0x40000400
 8002bfc:	40000800 	.word	0x40000800
 8002c00:	40000c00 	.word	0x40000c00
 8002c04:	40010400 	.word	0x40010400
 8002c08:	40014000 	.word	0x40014000
 8002c0c:	40001800 	.word	0x40001800

08002c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d020      	beq.n	8002c74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d01b      	beq.n	8002c74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0202 	mvn.w	r2, #2
 8002c44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f999 	bl	8002f92 <HAL_TIM_IC_CaptureCallback>
 8002c60:	e005      	b.n	8002c6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f98b 	bl	8002f7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f99c 	bl	8002fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f003 0304 	and.w	r3, r3, #4
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d020      	beq.n	8002cc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d01b      	beq.n	8002cc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0204 	mvn.w	r2, #4
 8002c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2202      	movs	r2, #2
 8002c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f973 	bl	8002f92 <HAL_TIM_IC_CaptureCallback>
 8002cac:	e005      	b.n	8002cba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f965 	bl	8002f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f976 	bl	8002fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d020      	beq.n	8002d0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d01b      	beq.n	8002d0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0208 	mvn.w	r2, #8
 8002cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f94d 	bl	8002f92 <HAL_TIM_IC_CaptureCallback>
 8002cf8:	e005      	b.n	8002d06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f93f 	bl	8002f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f950 	bl	8002fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d020      	beq.n	8002d58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d01b      	beq.n	8002d58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0210 	mvn.w	r2, #16
 8002d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2208      	movs	r2, #8
 8002d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f927 	bl	8002f92 <HAL_TIM_IC_CaptureCallback>
 8002d44:	e005      	b.n	8002d52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f919 	bl	8002f7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f92a 	bl	8002fa6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00c      	beq.n	8002d7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d007      	beq.n	8002d7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0201 	mvn.w	r2, #1
 8002d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7fd ff3a 	bl	8000bf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00c      	beq.n	8002da0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d007      	beq.n	8002da0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fade 	bl	800335c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00c      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d007      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f8fb 	bl	8002fba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f003 0320 	and.w	r3, r3, #32
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00c      	beq.n	8002de8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f003 0320 	and.w	r3, r3, #32
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d007      	beq.n	8002de8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0220 	mvn.w	r2, #32
 8002de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fab0 	bl	8003348 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002de8:	bf00      	nop
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_TIM_ConfigClockSource+0x1c>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e0b4      	b.n	8002f76 <HAL_TIM_ConfigClockSource+0x186>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e44:	d03e      	beq.n	8002ec4 <HAL_TIM_ConfigClockSource+0xd4>
 8002e46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e4a:	f200 8087 	bhi.w	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e52:	f000 8086 	beq.w	8002f62 <HAL_TIM_ConfigClockSource+0x172>
 8002e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e5a:	d87f      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e5c:	2b70      	cmp	r3, #112	@ 0x70
 8002e5e:	d01a      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0xa6>
 8002e60:	2b70      	cmp	r3, #112	@ 0x70
 8002e62:	d87b      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e64:	2b60      	cmp	r3, #96	@ 0x60
 8002e66:	d050      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0x11a>
 8002e68:	2b60      	cmp	r3, #96	@ 0x60
 8002e6a:	d877      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e6c:	2b50      	cmp	r3, #80	@ 0x50
 8002e6e:	d03c      	beq.n	8002eea <HAL_TIM_ConfigClockSource+0xfa>
 8002e70:	2b50      	cmp	r3, #80	@ 0x50
 8002e72:	d873      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e74:	2b40      	cmp	r3, #64	@ 0x40
 8002e76:	d058      	beq.n	8002f2a <HAL_TIM_ConfigClockSource+0x13a>
 8002e78:	2b40      	cmp	r3, #64	@ 0x40
 8002e7a:	d86f      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e7c:	2b30      	cmp	r3, #48	@ 0x30
 8002e7e:	d064      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x15a>
 8002e80:	2b30      	cmp	r3, #48	@ 0x30
 8002e82:	d86b      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e84:	2b20      	cmp	r3, #32
 8002e86:	d060      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x15a>
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	d867      	bhi.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d05c      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x15a>
 8002e90:	2b10      	cmp	r3, #16
 8002e92:	d05a      	beq.n	8002f4a <HAL_TIM_ConfigClockSource+0x15a>
 8002e94:	e062      	b.n	8002f5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ea6:	f000 f9b3 	bl	8003210 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002eb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	609a      	str	r2, [r3, #8]
      break;
 8002ec2:	e04f      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ed4:	f000 f99c 	bl	8003210 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ee6:	609a      	str	r2, [r3, #8]
      break;
 8002ee8:	e03c      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f000 f910 	bl	800311c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2150      	movs	r1, #80	@ 0x50
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 f969 	bl	80031da <TIM_ITRx_SetConfig>
      break;
 8002f08:	e02c      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f16:	461a      	mov	r2, r3
 8002f18:	f000 f92f 	bl	800317a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2160      	movs	r1, #96	@ 0x60
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 f959 	bl	80031da <TIM_ITRx_SetConfig>
      break;
 8002f28:	e01c      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f36:	461a      	mov	r2, r3
 8002f38:	f000 f8f0 	bl	800311c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2140      	movs	r1, #64	@ 0x40
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 f949 	bl	80031da <TIM_ITRx_SetConfig>
      break;
 8002f48:	e00c      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4619      	mov	r1, r3
 8002f54:	4610      	mov	r0, r2
 8002f56:	f000 f940 	bl	80031da <TIM_ITRx_SetConfig>
      break;
 8002f5a:	e003      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f60:	e000      	b.n	8002f64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
	...

08002fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a43      	ldr	r2, [pc, #268]	@ (80030f0 <TIM_Base_SetConfig+0x120>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d013      	beq.n	8003010 <TIM_Base_SetConfig+0x40>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fee:	d00f      	beq.n	8003010 <TIM_Base_SetConfig+0x40>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a40      	ldr	r2, [pc, #256]	@ (80030f4 <TIM_Base_SetConfig+0x124>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d00b      	beq.n	8003010 <TIM_Base_SetConfig+0x40>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a3f      	ldr	r2, [pc, #252]	@ (80030f8 <TIM_Base_SetConfig+0x128>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d007      	beq.n	8003010 <TIM_Base_SetConfig+0x40>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a3e      	ldr	r2, [pc, #248]	@ (80030fc <TIM_Base_SetConfig+0x12c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d003      	beq.n	8003010 <TIM_Base_SetConfig+0x40>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a3d      	ldr	r2, [pc, #244]	@ (8003100 <TIM_Base_SetConfig+0x130>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d108      	bne.n	8003022 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a32      	ldr	r2, [pc, #200]	@ (80030f0 <TIM_Base_SetConfig+0x120>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d02b      	beq.n	8003082 <TIM_Base_SetConfig+0xb2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003030:	d027      	beq.n	8003082 <TIM_Base_SetConfig+0xb2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a2f      	ldr	r2, [pc, #188]	@ (80030f4 <TIM_Base_SetConfig+0x124>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d023      	beq.n	8003082 <TIM_Base_SetConfig+0xb2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a2e      	ldr	r2, [pc, #184]	@ (80030f8 <TIM_Base_SetConfig+0x128>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d01f      	beq.n	8003082 <TIM_Base_SetConfig+0xb2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a2d      	ldr	r2, [pc, #180]	@ (80030fc <TIM_Base_SetConfig+0x12c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d01b      	beq.n	8003082 <TIM_Base_SetConfig+0xb2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a2c      	ldr	r2, [pc, #176]	@ (8003100 <TIM_Base_SetConfig+0x130>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d017      	beq.n	8003082 <TIM_Base_SetConfig+0xb2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a2b      	ldr	r2, [pc, #172]	@ (8003104 <TIM_Base_SetConfig+0x134>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d013      	beq.n	8003082 <TIM_Base_SetConfig+0xb2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a2a      	ldr	r2, [pc, #168]	@ (8003108 <TIM_Base_SetConfig+0x138>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00f      	beq.n	8003082 <TIM_Base_SetConfig+0xb2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a29      	ldr	r2, [pc, #164]	@ (800310c <TIM_Base_SetConfig+0x13c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00b      	beq.n	8003082 <TIM_Base_SetConfig+0xb2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a28      	ldr	r2, [pc, #160]	@ (8003110 <TIM_Base_SetConfig+0x140>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d007      	beq.n	8003082 <TIM_Base_SetConfig+0xb2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a27      	ldr	r2, [pc, #156]	@ (8003114 <TIM_Base_SetConfig+0x144>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d003      	beq.n	8003082 <TIM_Base_SetConfig+0xb2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a26      	ldr	r2, [pc, #152]	@ (8003118 <TIM_Base_SetConfig+0x148>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d108      	bne.n	8003094 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4313      	orrs	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a0e      	ldr	r2, [pc, #56]	@ (80030f0 <TIM_Base_SetConfig+0x120>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d003      	beq.n	80030c2 <TIM_Base_SetConfig+0xf2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a10      	ldr	r2, [pc, #64]	@ (8003100 <TIM_Base_SetConfig+0x130>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d103      	bne.n	80030ca <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	691a      	ldr	r2, [r3, #16]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f043 0204 	orr.w	r2, r3, #4
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	601a      	str	r2, [r3, #0]
}
 80030e2:	bf00      	nop
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	40010000 	.word	0x40010000
 80030f4:	40000400 	.word	0x40000400
 80030f8:	40000800 	.word	0x40000800
 80030fc:	40000c00 	.word	0x40000c00
 8003100:	40010400 	.word	0x40010400
 8003104:	40014000 	.word	0x40014000
 8003108:	40014400 	.word	0x40014400
 800310c:	40014800 	.word	0x40014800
 8003110:	40001800 	.word	0x40001800
 8003114:	40001c00 	.word	0x40001c00
 8003118:	40002000 	.word	0x40002000

0800311c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	f023 0201 	bic.w	r2, r3, #1
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003146:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f023 030a 	bic.w	r3, r3, #10
 8003158:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	4313      	orrs	r3, r2
 8003160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	621a      	str	r2, [r3, #32]
}
 800316e:	bf00      	nop
 8003170:	371c      	adds	r7, #28
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800317a:	b480      	push	{r7}
 800317c:	b087      	sub	sp, #28
 800317e:	af00      	add	r7, sp, #0
 8003180:	60f8      	str	r0, [r7, #12]
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	f023 0210 	bic.w	r2, r3, #16
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80031a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	031b      	lsls	r3, r3, #12
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80031b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	621a      	str	r2, [r3, #32]
}
 80031ce:	bf00      	nop
 80031d0:	371c      	adds	r7, #28
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031da:	b480      	push	{r7}
 80031dc:	b085      	sub	sp, #20
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f043 0307 	orr.w	r3, r3, #7
 80031fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	609a      	str	r2, [r3, #8]
}
 8003204:	bf00      	nop
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
 800321c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800322a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	021a      	lsls	r2, r3, #8
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	431a      	orrs	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4313      	orrs	r3, r2
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	4313      	orrs	r3, r2
 800323c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	609a      	str	r2, [r3, #8]
}
 8003244:	bf00      	nop
 8003246:	371c      	adds	r7, #28
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003264:	2302      	movs	r3, #2
 8003266:	e05a      	b.n	800331e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800328e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a21      	ldr	r2, [pc, #132]	@ (800332c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d022      	beq.n	80032f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032b4:	d01d      	beq.n	80032f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003330 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d018      	beq.n	80032f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003334 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d013      	beq.n	80032f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003338 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00e      	beq.n	80032f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a18      	ldr	r2, [pc, #96]	@ (800333c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d009      	beq.n	80032f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a17      	ldr	r2, [pc, #92]	@ (8003340 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d004      	beq.n	80032f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a15      	ldr	r2, [pc, #84]	@ (8003344 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d10c      	bne.n	800330c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	4313      	orrs	r3, r2
 8003302:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40010000 	.word	0x40010000
 8003330:	40000400 	.word	0x40000400
 8003334:	40000800 	.word	0x40000800
 8003338:	40000c00 	.word	0x40000c00
 800333c:	40010400 	.word	0x40010400
 8003340:	40014000 	.word	0x40014000
 8003344:	40001800 	.word	0x40001800

08003348 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e042      	b.n	8003408 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fd fc96 	bl	8000cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2224      	movs	r2, #36	@ 0x24
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 ffa1 	bl	80042fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695a      	ldr	r2, [r3, #20]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	@ 0x28
 8003414:	af02      	add	r7, sp, #8
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	4613      	mov	r3, r2
 800341e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b20      	cmp	r3, #32
 800342e:	d175      	bne.n	800351c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <HAL_UART_Transmit+0x2c>
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e06e      	b.n	800351e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2221      	movs	r2, #33	@ 0x21
 800344a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800344e:	f7fd ff1f 	bl	8001290 <HAL_GetTick>
 8003452:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	88fa      	ldrh	r2, [r7, #6]
 8003458:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	88fa      	ldrh	r2, [r7, #6]
 800345e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003468:	d108      	bne.n	800347c <HAL_UART_Transmit+0x6c>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d104      	bne.n	800347c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	e003      	b.n	8003484 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003480:	2300      	movs	r3, #0
 8003482:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003484:	e02e      	b.n	80034e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2200      	movs	r2, #0
 800348e:	2180      	movs	r1, #128	@ 0x80
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fc71 	bl	8003d78 <UART_WaitOnFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e03a      	b.n	800351e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10b      	bne.n	80034c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	3302      	adds	r3, #2
 80034c2:	61bb      	str	r3, [r7, #24]
 80034c4:	e007      	b.n	80034d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	781a      	ldrb	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	3301      	adds	r3, #1
 80034d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1cb      	bne.n	8003486 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2200      	movs	r2, #0
 80034f6:	2140      	movs	r1, #64	@ 0x40
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 fc3d 	bl	8003d78 <UART_WaitOnFlagUntilTimeout>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e006      	b.n	800351e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	e000      	b.n	800351e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800351c:	2302      	movs	r3, #2
  }
}
 800351e:	4618      	mov	r0, r3
 8003520:	3720      	adds	r7, #32
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b08c      	sub	sp, #48	@ 0x30
 800352a:	af00      	add	r7, sp, #0
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	4613      	mov	r3, r2
 8003532:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b20      	cmp	r3, #32
 800353e:	d146      	bne.n	80035ce <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003546:	88fb      	ldrh	r3, [r7, #6]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e03f      	b.n	80035d0 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2201      	movs	r2, #1
 8003554:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	461a      	mov	r2, r3
 8003560:	68b9      	ldr	r1, [r7, #8]
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 fc62 	bl	8003e2c <UART_Start_Receive_DMA>
 8003568:	4603      	mov	r3, r0
 800356a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003572:	2b01      	cmp	r3, #1
 8003574:	d125      	bne.n	80035c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003576:	2300      	movs	r3, #0
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	613b      	str	r3, [r7, #16]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	330c      	adds	r3, #12
 8003592:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	e853 3f00 	ldrex	r3, [r3]
 800359a:	617b      	str	r3, [r7, #20]
   return(result);
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f043 0310 	orr.w	r3, r3, #16
 80035a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	330c      	adds	r3, #12
 80035aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80035ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b0:	6a39      	ldr	r1, [r7, #32]
 80035b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b4:	e841 2300 	strex	r3, r2, [r1]
 80035b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1e5      	bne.n	800358c <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 80035c0:	e002      	b.n	80035c8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 80035c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80035cc:	e000      	b.n	80035d0 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 80035ce:	2302      	movs	r3, #2
  }
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3730      	adds	r7, #48	@ 0x30
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b0ba      	sub	sp, #232	@ 0xe8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80035fe:	2300      	movs	r3, #0
 8003600:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003604:	2300      	movs	r3, #0
 8003606:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800360a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003616:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10f      	bne.n	800363e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800361e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <HAL_UART_IRQHandler+0x66>
 800362a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800362e:	f003 0320 	and.w	r3, r3, #32
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fda2 	bl	8004180 <UART_Receive_IT>
      return;
 800363c:	e273      	b.n	8003b26 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800363e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 80de 	beq.w	8003804 <HAL_UART_IRQHandler+0x22c>
 8003648:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d106      	bne.n	8003662 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003658:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80d1 	beq.w	8003804 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00b      	beq.n	8003686 <HAL_UART_IRQHandler+0xae>
 800366e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367e:	f043 0201 	orr.w	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00b      	beq.n	80036aa <HAL_UART_IRQHandler+0xd2>
 8003692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d005      	beq.n	80036aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a2:	f043 0202 	orr.w	r2, r3, #2
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00b      	beq.n	80036ce <HAL_UART_IRQHandler+0xf6>
 80036b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c6:	f043 0204 	orr.w	r2, r3, #4
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80036ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d011      	beq.n	80036fe <HAL_UART_IRQHandler+0x126>
 80036da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d105      	bne.n	80036f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80036e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f6:	f043 0208 	orr.w	r2, r3, #8
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 820a 	beq.w	8003b1c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b00      	cmp	r3, #0
 8003712:	d008      	beq.n	8003726 <HAL_UART_IRQHandler+0x14e>
 8003714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 fd2d 	bl	8004180 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003730:	2b40      	cmp	r3, #64	@ 0x40
 8003732:	bf0c      	ite	eq
 8003734:	2301      	moveq	r3, #1
 8003736:	2300      	movne	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d103      	bne.n	8003752 <HAL_UART_IRQHandler+0x17a>
 800374a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800374e:	2b00      	cmp	r3, #0
 8003750:	d04f      	beq.n	80037f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 fc38 	bl	8003fc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003762:	2b40      	cmp	r3, #64	@ 0x40
 8003764:	d141      	bne.n	80037ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3314      	adds	r3, #20
 800376c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003770:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003774:	e853 3f00 	ldrex	r3, [r3]
 8003778:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800377c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003780:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003784:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	3314      	adds	r3, #20
 800378e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003792:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003796:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800379e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037a2:	e841 2300 	strex	r3, r2, [r1]
 80037a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1d9      	bne.n	8003766 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d013      	beq.n	80037e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037be:	4a8a      	ldr	r2, [pc, #552]	@ (80039e8 <HAL_UART_IRQHandler+0x410>)
 80037c0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fd fff6 	bl	80017b8 <HAL_DMA_Abort_IT>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d016      	beq.n	8003800 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037dc:	4610      	mov	r0, r2
 80037de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e0:	e00e      	b.n	8003800 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f9c0 	bl	8003b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e8:	e00a      	b.n	8003800 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f9bc 	bl	8003b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f0:	e006      	b.n	8003800 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f9b8 	bl	8003b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80037fe:	e18d      	b.n	8003b1c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003800:	bf00      	nop
    return;
 8003802:	e18b      	b.n	8003b1c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003808:	2b01      	cmp	r3, #1
 800380a:	f040 8167 	bne.w	8003adc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800380e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003812:	f003 0310 	and.w	r3, r3, #16
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 8160 	beq.w	8003adc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800381c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003820:	f003 0310 	and.w	r3, r3, #16
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 8159 	beq.w	8003adc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800382a:	2300      	movs	r3, #0
 800382c:	60bb      	str	r3, [r7, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800384a:	2b40      	cmp	r3, #64	@ 0x40
 800384c:	f040 80ce 	bne.w	80039ec <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800385c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80a9 	beq.w	80039b8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800386a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800386e:	429a      	cmp	r2, r3
 8003870:	f080 80a2 	bcs.w	80039b8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800387a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003886:	f000 8088 	beq.w	800399a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	330c      	adds	r3, #12
 8003890:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003894:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003898:	e853 3f00 	ldrex	r3, [r3]
 800389c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	330c      	adds	r3, #12
 80038b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80038b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80038c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80038c6:	e841 2300 	strex	r3, r2, [r1]
 80038ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80038ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1d9      	bne.n	800388a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	3314      	adds	r3, #20
 80038dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038e0:	e853 3f00 	ldrex	r3, [r3]
 80038e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80038e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038e8:	f023 0301 	bic.w	r3, r3, #1
 80038ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3314      	adds	r3, #20
 80038f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80038fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80038fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003900:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003902:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003906:	e841 2300 	strex	r3, r2, [r1]
 800390a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800390c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1e1      	bne.n	80038d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3314      	adds	r3, #20
 8003918:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800391c:	e853 3f00 	ldrex	r3, [r3]
 8003920:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003922:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003924:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003928:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3314      	adds	r3, #20
 8003932:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003936:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003938:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800393c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800393e:	e841 2300 	strex	r3, r2, [r1]
 8003942:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003944:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1e3      	bne.n	8003912 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	330c      	adds	r3, #12
 800395e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003960:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003962:	e853 3f00 	ldrex	r3, [r3]
 8003966:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003968:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800396a:	f023 0310 	bic.w	r3, r3, #16
 800396e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	330c      	adds	r3, #12
 8003978:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800397c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800397e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003982:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003984:	e841 2300 	strex	r3, r2, [r1]
 8003988:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800398a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1e3      	bne.n	8003958 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003994:	4618      	mov	r0, r3
 8003996:	f7fd fe9f 	bl	80016d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2202      	movs	r2, #2
 800399e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	4619      	mov	r1, r3
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7fd f851 	bl	8000a58 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80039b6:	e0b3      	b.n	8003b20 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039c0:	429a      	cmp	r2, r3
 80039c2:	f040 80ad 	bne.w	8003b20 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039d0:	f040 80a6 	bne.w	8003b20 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039de:	4619      	mov	r1, r3
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7fd f839 	bl	8000a58 <HAL_UARTEx_RxEventCallback>
      return;
 80039e6:	e09b      	b.n	8003b20 <HAL_UART_IRQHandler+0x548>
 80039e8:	0800408f 	.word	0x0800408f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 808e 	beq.w	8003b24 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003a08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 8089 	beq.w	8003b24 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	330c      	adds	r3, #12
 8003a18:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a1c:	e853 3f00 	ldrex	r3, [r3]
 8003a20:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	330c      	adds	r3, #12
 8003a32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a36:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a3e:	e841 2300 	strex	r3, r2, [r1]
 8003a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1e3      	bne.n	8003a12 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	3314      	adds	r3, #20
 8003a50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a54:	e853 3f00 	ldrex	r3, [r3]
 8003a58:	623b      	str	r3, [r7, #32]
   return(result);
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	f023 0301 	bic.w	r3, r3, #1
 8003a60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3314      	adds	r3, #20
 8003a6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003a6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a76:	e841 2300 	strex	r3, r2, [r1]
 8003a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1e3      	bne.n	8003a4a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	330c      	adds	r3, #12
 8003a96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	e853 3f00 	ldrex	r3, [r3]
 8003a9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f023 0310 	bic.w	r3, r3, #16
 8003aa6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	330c      	adds	r3, #12
 8003ab0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003ab4:	61fa      	str	r2, [r7, #28]
 8003ab6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab8:	69b9      	ldr	r1, [r7, #24]
 8003aba:	69fa      	ldr	r2, [r7, #28]
 8003abc:	e841 2300 	strex	r3, r2, [r1]
 8003ac0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e3      	bne.n	8003a90 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ace:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7fc ffbf 	bl	8000a58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ada:	e023      	b.n	8003b24 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d009      	beq.n	8003afc <HAL_UART_IRQHandler+0x524>
 8003ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fadb 	bl	80040b0 <UART_Transmit_IT>
    return;
 8003afa:	e014      	b.n	8003b26 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00e      	beq.n	8003b26 <HAL_UART_IRQHandler+0x54e>
 8003b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d008      	beq.n	8003b26 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 fb1b 	bl	8004150 <UART_EndTransmit_IT>
    return;
 8003b1a:	e004      	b.n	8003b26 <HAL_UART_IRQHandler+0x54e>
    return;
 8003b1c:	bf00      	nop
 8003b1e:	e002      	b.n	8003b26 <HAL_UART_IRQHandler+0x54e>
      return;
 8003b20:	bf00      	nop
 8003b22:	e000      	b.n	8003b26 <HAL_UART_IRQHandler+0x54e>
      return;
 8003b24:	bf00      	nop
  }
}
 8003b26:	37e8      	adds	r7, #232	@ 0xe8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b09c      	sub	sp, #112	@ 0x70
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b88:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d172      	bne.n	8003c7e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003b98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	330c      	adds	r3, #12
 8003ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ba8:	e853 3f00 	ldrex	r3, [r3]
 8003bac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003bae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	330c      	adds	r3, #12
 8003bbc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003bbe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003bc0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003bc6:	e841 2300 	strex	r3, r2, [r1]
 8003bca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003bcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1e5      	bne.n	8003b9e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3314      	adds	r3, #20
 8003bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bdc:	e853 3f00 	ldrex	r3, [r3]
 8003be0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be4:	f023 0301 	bic.w	r3, r3, #1
 8003be8:	667b      	str	r3, [r7, #100]	@ 0x64
 8003bea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3314      	adds	r3, #20
 8003bf0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003bf2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003bf4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bf8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e5      	bne.n	8003bd2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3314      	adds	r3, #20
 8003c0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	623b      	str	r3, [r7, #32]
   return(result);
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3314      	adds	r3, #20
 8003c24:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003c26:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1e5      	bne.n	8003c06 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d119      	bne.n	8003c7e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	330c      	adds	r3, #12
 8003c50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	e853 3f00 	ldrex	r3, [r3]
 8003c58:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f023 0310 	bic.w	r3, r3, #16
 8003c60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	330c      	adds	r3, #12
 8003c68:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003c6a:	61fa      	str	r2, [r7, #28]
 8003c6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6e:	69b9      	ldr	r1, [r7, #24]
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	e841 2300 	strex	r3, r2, [r1]
 8003c76:	617b      	str	r3, [r7, #20]
   return(result);
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1e5      	bne.n	8003c4a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c80:	2200      	movs	r2, #0
 8003c82:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d106      	bne.n	8003c9a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c8e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c90:	4619      	mov	r1, r3
 8003c92:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c94:	f7fc fee0 	bl	8000a58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c98:	e002      	b.n	8003ca0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003c9a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c9c:	f7ff ff50 	bl	8003b40 <HAL_UART_RxCpltCallback>
}
 8003ca0:	bf00      	nop
 8003ca2:	3770      	adds	r7, #112	@ 0x70
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d108      	bne.n	8003cd6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003cc8:	085b      	lsrs	r3, r3, #1
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	4619      	mov	r1, r3
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f7fc fec2 	bl	8000a58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003cd4:	e002      	b.n	8003cdc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f7ff ff3c 	bl	8003b54 <HAL_UART_RxHalfCpltCallback>
}
 8003cdc:	bf00      	nop
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d00:	2b80      	cmp	r3, #128	@ 0x80
 8003d02:	bf0c      	ite	eq
 8003d04:	2301      	moveq	r3, #1
 8003d06:	2300      	movne	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b21      	cmp	r3, #33	@ 0x21
 8003d16:	d108      	bne.n	8003d2a <UART_DMAError+0x46>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2200      	movs	r2, #0
 8003d22:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003d24:	68b8      	ldr	r0, [r7, #8]
 8003d26:	f000 f927 	bl	8003f78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d34:	2b40      	cmp	r3, #64	@ 0x40
 8003d36:	bf0c      	ite	eq
 8003d38:	2301      	moveq	r3, #1
 8003d3a:	2300      	movne	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b22      	cmp	r3, #34	@ 0x22
 8003d4a:	d108      	bne.n	8003d5e <UART_DMAError+0x7a>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d005      	beq.n	8003d5e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2200      	movs	r2, #0
 8003d56:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003d58:	68b8      	ldr	r0, [r7, #8]
 8003d5a:	f000 f935 	bl	8003fc8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d62:	f043 0210 	orr.w	r2, r3, #16
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d6a:	68b8      	ldr	r0, [r7, #8]
 8003d6c:	f7ff fefc 	bl	8003b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d70:	bf00      	nop
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	4613      	mov	r3, r2
 8003d86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d88:	e03b      	b.n	8003e02 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d90:	d037      	beq.n	8003e02 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d92:	f7fd fa7d 	bl	8001290 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	6a3a      	ldr	r2, [r7, #32]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d302      	bcc.n	8003da8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e03a      	b.n	8003e22 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d023      	beq.n	8003e02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2b80      	cmp	r3, #128	@ 0x80
 8003dbe:	d020      	beq.n	8003e02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b40      	cmp	r3, #64	@ 0x40
 8003dc4:	d01d      	beq.n	8003e02 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d116      	bne.n	8003e02 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 f8ec 	bl	8003fc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2208      	movs	r2, #8
 8003df4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e00f      	b.n	8003e22 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	bf0c      	ite	eq
 8003e12:	2301      	moveq	r3, #1
 8003e14:	2300      	movne	r3, #0
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	461a      	mov	r2, r3
 8003e1a:	79fb      	ldrb	r3, [r7, #7]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d0b4      	beq.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b098      	sub	sp, #96	@ 0x60
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	4613      	mov	r3, r2
 8003e38:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	88fa      	ldrh	r2, [r7, #6]
 8003e44:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2222      	movs	r2, #34	@ 0x22
 8003e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e58:	4a44      	ldr	r2, [pc, #272]	@ (8003f6c <UART_Start_Receive_DMA+0x140>)
 8003e5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e60:	4a43      	ldr	r2, [pc, #268]	@ (8003f70 <UART_Start_Receive_DMA+0x144>)
 8003e62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e68:	4a42      	ldr	r2, [pc, #264]	@ (8003f74 <UART_Start_Receive_DMA+0x148>)
 8003e6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e70:	2200      	movs	r2, #0
 8003e72:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003e74:	f107 0308 	add.w	r3, r7, #8
 8003e78:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3304      	adds	r3, #4
 8003e84:	4619      	mov	r1, r3
 8003e86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	88fb      	ldrh	r3, [r7, #6]
 8003e8c:	f7fd fbcc 	bl	8001628 <HAL_DMA_Start_IT>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d008      	beq.n	8003ea8 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2210      	movs	r2, #16
 8003e9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e05d      	b.n	8003f64 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	613b      	str	r3, [r7, #16]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d019      	beq.n	8003efa <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	330c      	adds	r3, #12
 8003ecc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ece:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ed0:	e853 3f00 	ldrex	r3, [r3]
 8003ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003edc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	330c      	adds	r3, #12
 8003ee4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ee6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003eec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003eee:	e841 2300 	strex	r3, r2, [r1]
 8003ef2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003ef4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e5      	bne.n	8003ec6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3314      	adds	r3, #20
 8003f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0c:	f043 0301 	orr.w	r3, r3, #1
 8003f10:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3314      	adds	r3, #20
 8003f18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003f1a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003f1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003f20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e5      	bne.n	8003efa <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3314      	adds	r3, #20
 8003f34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f44:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3314      	adds	r3, #20
 8003f4c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003f4e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f52:	6a39      	ldr	r1, [r7, #32]
 8003f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1e5      	bne.n	8003f2e <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3760      	adds	r7, #96	@ 0x60
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	08003b7d 	.word	0x08003b7d
 8003f70:	08003ca9 	.word	0x08003ca9
 8003f74:	08003ce5 	.word	0x08003ce5

08003f78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b089      	sub	sp, #36	@ 0x24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	330c      	adds	r3, #12
 8003f86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003f96:	61fb      	str	r3, [r7, #28]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	69fa      	ldr	r2, [r7, #28]
 8003fa0:	61ba      	str	r2, [r7, #24]
 8003fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa4:	6979      	ldr	r1, [r7, #20]
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	e841 2300 	strex	r3, r2, [r1]
 8003fac:	613b      	str	r3, [r7, #16]
   return(result);
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e5      	bne.n	8003f80 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003fbc:	bf00      	nop
 8003fbe:	3724      	adds	r7, #36	@ 0x24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b095      	sub	sp, #84	@ 0x54
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	330c      	adds	r3, #12
 8003fd6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fda:	e853 3f00 	ldrex	r3, [r3]
 8003fde:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	330c      	adds	r3, #12
 8003fee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ff0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ff6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ff8:	e841 2300 	strex	r3, r2, [r1]
 8003ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e5      	bne.n	8003fd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3314      	adds	r3, #20
 800400a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	e853 3f00 	ldrex	r3, [r3]
 8004012:	61fb      	str	r3, [r7, #28]
   return(result);
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f023 0301 	bic.w	r3, r3, #1
 800401a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3314      	adds	r3, #20
 8004022:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004024:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004026:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004028:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800402a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800402c:	e841 2300 	strex	r3, r2, [r1]
 8004030:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1e5      	bne.n	8004004 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403c:	2b01      	cmp	r3, #1
 800403e:	d119      	bne.n	8004074 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	330c      	adds	r3, #12
 8004046:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	e853 3f00 	ldrex	r3, [r3]
 800404e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f023 0310 	bic.w	r3, r3, #16
 8004056:	647b      	str	r3, [r7, #68]	@ 0x44
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004060:	61ba      	str	r2, [r7, #24]
 8004062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004064:	6979      	ldr	r1, [r7, #20]
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	e841 2300 	strex	r3, r2, [r1]
 800406c:	613b      	str	r3, [r7, #16]
   return(result);
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e5      	bne.n	8004040 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004082:	bf00      	nop
 8004084:	3754      	adds	r7, #84	@ 0x54
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f7ff fd60 	bl	8003b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040a8:	bf00      	nop
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b21      	cmp	r3, #33	@ 0x21
 80040c2:	d13e      	bne.n	8004142 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040cc:	d114      	bne.n	80040f8 <UART_Transmit_IT+0x48>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d110      	bne.n	80040f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	1c9a      	adds	r2, r3, #2
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	621a      	str	r2, [r3, #32]
 80040f6:	e008      	b.n	800410a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	1c59      	adds	r1, r3, #1
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6211      	str	r1, [r2, #32]
 8004102:	781a      	ldrb	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800410e:	b29b      	uxth	r3, r3
 8004110:	3b01      	subs	r3, #1
 8004112:	b29b      	uxth	r3, r3
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	4619      	mov	r1, r3
 8004118:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10f      	bne.n	800413e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800412c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800413c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	e000      	b.n	8004144 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004142:	2302      	movs	r3, #2
  }
}
 8004144:	4618      	mov	r0, r3
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68da      	ldr	r2, [r3, #12]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004166:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff fcdb 	bl	8003b2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b08c      	sub	sp, #48	@ 0x30
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004188:	2300      	movs	r3, #0
 800418a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800418c:	2300      	movs	r3, #0
 800418e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b22      	cmp	r3, #34	@ 0x22
 800419a:	f040 80aa 	bne.w	80042f2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041a6:	d115      	bne.n	80041d4 <UART_Receive_IT+0x54>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d111      	bne.n	80041d4 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	b29b      	uxth	r3, r3
 80041be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041cc:	1c9a      	adds	r2, r3, #2
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80041d2:	e024      	b.n	800421e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e2:	d007      	beq.n	80041f4 <UART_Receive_IT+0x74>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10a      	bne.n	8004202 <UART_Receive_IT+0x82>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d106      	bne.n	8004202 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041fe:	701a      	strb	r2, [r3, #0]
 8004200:	e008      	b.n	8004214 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	b2db      	uxtb	r3, r3
 800420a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800420e:	b2da      	uxtb	r2, r3
 8004210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004212:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004222:	b29b      	uxth	r3, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	b29b      	uxth	r3, r3
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	4619      	mov	r1, r3
 800422c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800422e:	2b00      	cmp	r3, #0
 8004230:	d15d      	bne.n	80042ee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0220 	bic.w	r2, r2, #32
 8004240:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004250:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695a      	ldr	r2, [r3, #20]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0201 	bic.w	r2, r2, #1
 8004260:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004274:	2b01      	cmp	r3, #1
 8004276:	d135      	bne.n	80042e4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	330c      	adds	r3, #12
 8004284:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	e853 3f00 	ldrex	r3, [r3]
 800428c:	613b      	str	r3, [r7, #16]
   return(result);
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f023 0310 	bic.w	r3, r3, #16
 8004294:	627b      	str	r3, [r7, #36]	@ 0x24
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	330c      	adds	r3, #12
 800429c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800429e:	623a      	str	r2, [r7, #32]
 80042a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a2:	69f9      	ldr	r1, [r7, #28]
 80042a4:	6a3a      	ldr	r2, [r7, #32]
 80042a6:	e841 2300 	strex	r3, r2, [r1]
 80042aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1e5      	bne.n	800427e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0310 	and.w	r3, r3, #16
 80042bc:	2b10      	cmp	r3, #16
 80042be:	d10a      	bne.n	80042d6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80042da:	4619      	mov	r1, r3
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7fc fbbb 	bl	8000a58 <HAL_UARTEx_RxEventCallback>
 80042e2:	e002      	b.n	80042ea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff fc2b 	bl	8003b40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	e002      	b.n	80042f4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	e000      	b.n	80042f4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80042f2:	2302      	movs	r3, #2
  }
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3730      	adds	r7, #48	@ 0x30
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004300:	b0c0      	sub	sp, #256	@ 0x100
 8004302:	af00      	add	r7, sp, #0
 8004304:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004318:	68d9      	ldr	r1, [r3, #12]
 800431a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	ea40 0301 	orr.w	r3, r0, r1
 8004324:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	431a      	orrs	r2, r3
 8004334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	431a      	orrs	r2, r3
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004354:	f021 010c 	bic.w	r1, r1, #12
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004362:	430b      	orrs	r3, r1
 8004364:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004376:	6999      	ldr	r1, [r3, #24]
 8004378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	ea40 0301 	orr.w	r3, r0, r1
 8004382:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	4b8f      	ldr	r3, [pc, #572]	@ (80045c8 <UART_SetConfig+0x2cc>)
 800438c:	429a      	cmp	r2, r3
 800438e:	d005      	beq.n	800439c <UART_SetConfig+0xa0>
 8004390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	4b8d      	ldr	r3, [pc, #564]	@ (80045cc <UART_SetConfig+0x2d0>)
 8004398:	429a      	cmp	r2, r3
 800439a:	d104      	bne.n	80043a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800439c:	f7fe fb64 	bl	8002a68 <HAL_RCC_GetPCLK2Freq>
 80043a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80043a4:	e003      	b.n	80043ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043a6:	f7fe fb4b 	bl	8002a40 <HAL_RCC_GetPCLK1Freq>
 80043aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043b8:	f040 810c 	bne.w	80045d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043c0:	2200      	movs	r2, #0
 80043c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80043c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80043ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80043ce:	4622      	mov	r2, r4
 80043d0:	462b      	mov	r3, r5
 80043d2:	1891      	adds	r1, r2, r2
 80043d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80043d6:	415b      	adcs	r3, r3
 80043d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80043de:	4621      	mov	r1, r4
 80043e0:	eb12 0801 	adds.w	r8, r2, r1
 80043e4:	4629      	mov	r1, r5
 80043e6:	eb43 0901 	adc.w	r9, r3, r1
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043fe:	4690      	mov	r8, r2
 8004400:	4699      	mov	r9, r3
 8004402:	4623      	mov	r3, r4
 8004404:	eb18 0303 	adds.w	r3, r8, r3
 8004408:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800440c:	462b      	mov	r3, r5
 800440e:	eb49 0303 	adc.w	r3, r9, r3
 8004412:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004422:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004426:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800442a:	460b      	mov	r3, r1
 800442c:	18db      	adds	r3, r3, r3
 800442e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004430:	4613      	mov	r3, r2
 8004432:	eb42 0303 	adc.w	r3, r2, r3
 8004436:	657b      	str	r3, [r7, #84]	@ 0x54
 8004438:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800443c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004440:	f7fb fedc 	bl	80001fc <__aeabi_uldivmod>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4b61      	ldr	r3, [pc, #388]	@ (80045d0 <UART_SetConfig+0x2d4>)
 800444a:	fba3 2302 	umull	r2, r3, r3, r2
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	011c      	lsls	r4, r3, #4
 8004452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004456:	2200      	movs	r2, #0
 8004458:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800445c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004460:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004464:	4642      	mov	r2, r8
 8004466:	464b      	mov	r3, r9
 8004468:	1891      	adds	r1, r2, r2
 800446a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800446c:	415b      	adcs	r3, r3
 800446e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004470:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004474:	4641      	mov	r1, r8
 8004476:	eb12 0a01 	adds.w	sl, r2, r1
 800447a:	4649      	mov	r1, r9
 800447c:	eb43 0b01 	adc.w	fp, r3, r1
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800448c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004490:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004494:	4692      	mov	sl, r2
 8004496:	469b      	mov	fp, r3
 8004498:	4643      	mov	r3, r8
 800449a:	eb1a 0303 	adds.w	r3, sl, r3
 800449e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044a2:	464b      	mov	r3, r9
 80044a4:	eb4b 0303 	adc.w	r3, fp, r3
 80044a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80044bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80044c0:	460b      	mov	r3, r1
 80044c2:	18db      	adds	r3, r3, r3
 80044c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80044c6:	4613      	mov	r3, r2
 80044c8:	eb42 0303 	adc.w	r3, r2, r3
 80044cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80044ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80044d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80044d6:	f7fb fe91 	bl	80001fc <__aeabi_uldivmod>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4611      	mov	r1, r2
 80044e0:	4b3b      	ldr	r3, [pc, #236]	@ (80045d0 <UART_SetConfig+0x2d4>)
 80044e2:	fba3 2301 	umull	r2, r3, r3, r1
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	2264      	movs	r2, #100	@ 0x64
 80044ea:	fb02 f303 	mul.w	r3, r2, r3
 80044ee:	1acb      	subs	r3, r1, r3
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80044f6:	4b36      	ldr	r3, [pc, #216]	@ (80045d0 <UART_SetConfig+0x2d4>)
 80044f8:	fba3 2302 	umull	r2, r3, r3, r2
 80044fc:	095b      	lsrs	r3, r3, #5
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004504:	441c      	add	r4, r3
 8004506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800450a:	2200      	movs	r2, #0
 800450c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004510:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004514:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004518:	4642      	mov	r2, r8
 800451a:	464b      	mov	r3, r9
 800451c:	1891      	adds	r1, r2, r2
 800451e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004520:	415b      	adcs	r3, r3
 8004522:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004524:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004528:	4641      	mov	r1, r8
 800452a:	1851      	adds	r1, r2, r1
 800452c:	6339      	str	r1, [r7, #48]	@ 0x30
 800452e:	4649      	mov	r1, r9
 8004530:	414b      	adcs	r3, r1
 8004532:	637b      	str	r3, [r7, #52]	@ 0x34
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	f04f 0300 	mov.w	r3, #0
 800453c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004540:	4659      	mov	r1, fp
 8004542:	00cb      	lsls	r3, r1, #3
 8004544:	4651      	mov	r1, sl
 8004546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800454a:	4651      	mov	r1, sl
 800454c:	00ca      	lsls	r2, r1, #3
 800454e:	4610      	mov	r0, r2
 8004550:	4619      	mov	r1, r3
 8004552:	4603      	mov	r3, r0
 8004554:	4642      	mov	r2, r8
 8004556:	189b      	adds	r3, r3, r2
 8004558:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800455c:	464b      	mov	r3, r9
 800455e:	460a      	mov	r2, r1
 8004560:	eb42 0303 	adc.w	r3, r2, r3
 8004564:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004574:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004578:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800457c:	460b      	mov	r3, r1
 800457e:	18db      	adds	r3, r3, r3
 8004580:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004582:	4613      	mov	r3, r2
 8004584:	eb42 0303 	adc.w	r3, r2, r3
 8004588:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800458a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800458e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004592:	f7fb fe33 	bl	80001fc <__aeabi_uldivmod>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	4b0d      	ldr	r3, [pc, #52]	@ (80045d0 <UART_SetConfig+0x2d4>)
 800459c:	fba3 1302 	umull	r1, r3, r3, r2
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	2164      	movs	r1, #100	@ 0x64
 80045a4:	fb01 f303 	mul.w	r3, r1, r3
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	3332      	adds	r3, #50	@ 0x32
 80045ae:	4a08      	ldr	r2, [pc, #32]	@ (80045d0 <UART_SetConfig+0x2d4>)
 80045b0:	fba2 2303 	umull	r2, r3, r2, r3
 80045b4:	095b      	lsrs	r3, r3, #5
 80045b6:	f003 0207 	and.w	r2, r3, #7
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4422      	add	r2, r4
 80045c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045c4:	e106      	b.n	80047d4 <UART_SetConfig+0x4d8>
 80045c6:	bf00      	nop
 80045c8:	40011000 	.word	0x40011000
 80045cc:	40011400 	.word	0x40011400
 80045d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045d8:	2200      	movs	r2, #0
 80045da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80045e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80045e6:	4642      	mov	r2, r8
 80045e8:	464b      	mov	r3, r9
 80045ea:	1891      	adds	r1, r2, r2
 80045ec:	6239      	str	r1, [r7, #32]
 80045ee:	415b      	adcs	r3, r3
 80045f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045f6:	4641      	mov	r1, r8
 80045f8:	1854      	adds	r4, r2, r1
 80045fa:	4649      	mov	r1, r9
 80045fc:	eb43 0501 	adc.w	r5, r3, r1
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	f04f 0300 	mov.w	r3, #0
 8004608:	00eb      	lsls	r3, r5, #3
 800460a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800460e:	00e2      	lsls	r2, r4, #3
 8004610:	4614      	mov	r4, r2
 8004612:	461d      	mov	r5, r3
 8004614:	4643      	mov	r3, r8
 8004616:	18e3      	adds	r3, r4, r3
 8004618:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800461c:	464b      	mov	r3, r9
 800461e:	eb45 0303 	adc.w	r3, r5, r3
 8004622:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004632:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004642:	4629      	mov	r1, r5
 8004644:	008b      	lsls	r3, r1, #2
 8004646:	4621      	mov	r1, r4
 8004648:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800464c:	4621      	mov	r1, r4
 800464e:	008a      	lsls	r2, r1, #2
 8004650:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004654:	f7fb fdd2 	bl	80001fc <__aeabi_uldivmod>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4b60      	ldr	r3, [pc, #384]	@ (80047e0 <UART_SetConfig+0x4e4>)
 800465e:	fba3 2302 	umull	r2, r3, r3, r2
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	011c      	lsls	r4, r3, #4
 8004666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800466a:	2200      	movs	r2, #0
 800466c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004670:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004674:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004678:	4642      	mov	r2, r8
 800467a:	464b      	mov	r3, r9
 800467c:	1891      	adds	r1, r2, r2
 800467e:	61b9      	str	r1, [r7, #24]
 8004680:	415b      	adcs	r3, r3
 8004682:	61fb      	str	r3, [r7, #28]
 8004684:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004688:	4641      	mov	r1, r8
 800468a:	1851      	adds	r1, r2, r1
 800468c:	6139      	str	r1, [r7, #16]
 800468e:	4649      	mov	r1, r9
 8004690:	414b      	adcs	r3, r1
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046a0:	4659      	mov	r1, fp
 80046a2:	00cb      	lsls	r3, r1, #3
 80046a4:	4651      	mov	r1, sl
 80046a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046aa:	4651      	mov	r1, sl
 80046ac:	00ca      	lsls	r2, r1, #3
 80046ae:	4610      	mov	r0, r2
 80046b0:	4619      	mov	r1, r3
 80046b2:	4603      	mov	r3, r0
 80046b4:	4642      	mov	r2, r8
 80046b6:	189b      	adds	r3, r3, r2
 80046b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046bc:	464b      	mov	r3, r9
 80046be:	460a      	mov	r2, r1
 80046c0:	eb42 0303 	adc.w	r3, r2, r3
 80046c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80046e0:	4649      	mov	r1, r9
 80046e2:	008b      	lsls	r3, r1, #2
 80046e4:	4641      	mov	r1, r8
 80046e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046ea:	4641      	mov	r1, r8
 80046ec:	008a      	lsls	r2, r1, #2
 80046ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046f2:	f7fb fd83 	bl	80001fc <__aeabi_uldivmod>
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	4611      	mov	r1, r2
 80046fc:	4b38      	ldr	r3, [pc, #224]	@ (80047e0 <UART_SetConfig+0x4e4>)
 80046fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	2264      	movs	r2, #100	@ 0x64
 8004706:	fb02 f303 	mul.w	r3, r2, r3
 800470a:	1acb      	subs	r3, r1, r3
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	3332      	adds	r3, #50	@ 0x32
 8004710:	4a33      	ldr	r2, [pc, #204]	@ (80047e0 <UART_SetConfig+0x4e4>)
 8004712:	fba2 2303 	umull	r2, r3, r2, r3
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800471c:	441c      	add	r4, r3
 800471e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004722:	2200      	movs	r2, #0
 8004724:	673b      	str	r3, [r7, #112]	@ 0x70
 8004726:	677a      	str	r2, [r7, #116]	@ 0x74
 8004728:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800472c:	4642      	mov	r2, r8
 800472e:	464b      	mov	r3, r9
 8004730:	1891      	adds	r1, r2, r2
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	415b      	adcs	r3, r3
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800473c:	4641      	mov	r1, r8
 800473e:	1851      	adds	r1, r2, r1
 8004740:	6039      	str	r1, [r7, #0]
 8004742:	4649      	mov	r1, r9
 8004744:	414b      	adcs	r3, r1
 8004746:	607b      	str	r3, [r7, #4]
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004754:	4659      	mov	r1, fp
 8004756:	00cb      	lsls	r3, r1, #3
 8004758:	4651      	mov	r1, sl
 800475a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800475e:	4651      	mov	r1, sl
 8004760:	00ca      	lsls	r2, r1, #3
 8004762:	4610      	mov	r0, r2
 8004764:	4619      	mov	r1, r3
 8004766:	4603      	mov	r3, r0
 8004768:	4642      	mov	r2, r8
 800476a:	189b      	adds	r3, r3, r2
 800476c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800476e:	464b      	mov	r3, r9
 8004770:	460a      	mov	r2, r1
 8004772:	eb42 0303 	adc.w	r3, r2, r3
 8004776:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	663b      	str	r3, [r7, #96]	@ 0x60
 8004782:	667a      	str	r2, [r7, #100]	@ 0x64
 8004784:	f04f 0200 	mov.w	r2, #0
 8004788:	f04f 0300 	mov.w	r3, #0
 800478c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004790:	4649      	mov	r1, r9
 8004792:	008b      	lsls	r3, r1, #2
 8004794:	4641      	mov	r1, r8
 8004796:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800479a:	4641      	mov	r1, r8
 800479c:	008a      	lsls	r2, r1, #2
 800479e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80047a2:	f7fb fd2b 	bl	80001fc <__aeabi_uldivmod>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	4b0d      	ldr	r3, [pc, #52]	@ (80047e0 <UART_SetConfig+0x4e4>)
 80047ac:	fba3 1302 	umull	r1, r3, r3, r2
 80047b0:	095b      	lsrs	r3, r3, #5
 80047b2:	2164      	movs	r1, #100	@ 0x64
 80047b4:	fb01 f303 	mul.w	r3, r1, r3
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	3332      	adds	r3, #50	@ 0x32
 80047be:	4a08      	ldr	r2, [pc, #32]	@ (80047e0 <UART_SetConfig+0x4e4>)
 80047c0:	fba2 2303 	umull	r2, r3, r2, r3
 80047c4:	095b      	lsrs	r3, r3, #5
 80047c6:	f003 020f 	and.w	r2, r3, #15
 80047ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4422      	add	r2, r4
 80047d2:	609a      	str	r2, [r3, #8]
}
 80047d4:	bf00      	nop
 80047d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80047da:	46bd      	mov	sp, r7
 80047dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047e0:	51eb851f 	.word	0x51eb851f

080047e4 <memset>:
 80047e4:	4402      	add	r2, r0
 80047e6:	4603      	mov	r3, r0
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d100      	bne.n	80047ee <memset+0xa>
 80047ec:	4770      	bx	lr
 80047ee:	f803 1b01 	strb.w	r1, [r3], #1
 80047f2:	e7f9      	b.n	80047e8 <memset+0x4>

080047f4 <strncmp>:
 80047f4:	b510      	push	{r4, lr}
 80047f6:	b16a      	cbz	r2, 8004814 <strncmp+0x20>
 80047f8:	3901      	subs	r1, #1
 80047fa:	1884      	adds	r4, r0, r2
 80047fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004800:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004804:	429a      	cmp	r2, r3
 8004806:	d103      	bne.n	8004810 <strncmp+0x1c>
 8004808:	42a0      	cmp	r0, r4
 800480a:	d001      	beq.n	8004810 <strncmp+0x1c>
 800480c:	2a00      	cmp	r2, #0
 800480e:	d1f5      	bne.n	80047fc <strncmp+0x8>
 8004810:	1ad0      	subs	r0, r2, r3
 8004812:	bd10      	pop	{r4, pc}
 8004814:	4610      	mov	r0, r2
 8004816:	e7fc      	b.n	8004812 <strncmp+0x1e>

08004818 <__libc_init_array>:
 8004818:	b570      	push	{r4, r5, r6, lr}
 800481a:	4d0d      	ldr	r5, [pc, #52]	@ (8004850 <__libc_init_array+0x38>)
 800481c:	4c0d      	ldr	r4, [pc, #52]	@ (8004854 <__libc_init_array+0x3c>)
 800481e:	1b64      	subs	r4, r4, r5
 8004820:	10a4      	asrs	r4, r4, #2
 8004822:	2600      	movs	r6, #0
 8004824:	42a6      	cmp	r6, r4
 8004826:	d109      	bne.n	800483c <__libc_init_array+0x24>
 8004828:	4d0b      	ldr	r5, [pc, #44]	@ (8004858 <__libc_init_array+0x40>)
 800482a:	4c0c      	ldr	r4, [pc, #48]	@ (800485c <__libc_init_array+0x44>)
 800482c:	f000 f818 	bl	8004860 <_init>
 8004830:	1b64      	subs	r4, r4, r5
 8004832:	10a4      	asrs	r4, r4, #2
 8004834:	2600      	movs	r6, #0
 8004836:	42a6      	cmp	r6, r4
 8004838:	d105      	bne.n	8004846 <__libc_init_array+0x2e>
 800483a:	bd70      	pop	{r4, r5, r6, pc}
 800483c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004840:	4798      	blx	r3
 8004842:	3601      	adds	r6, #1
 8004844:	e7ee      	b.n	8004824 <__libc_init_array+0xc>
 8004846:	f855 3b04 	ldr.w	r3, [r5], #4
 800484a:	4798      	blx	r3
 800484c:	3601      	adds	r6, #1
 800484e:	e7f2      	b.n	8004836 <__libc_init_array+0x1e>
 8004850:	0800497c 	.word	0x0800497c
 8004854:	0800497c 	.word	0x0800497c
 8004858:	0800497c 	.word	0x0800497c
 800485c:	08004980 	.word	0x08004980

08004860 <_init>:
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	bf00      	nop
 8004864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004866:	bc08      	pop	{r3}
 8004868:	469e      	mov	lr, r3
 800486a:	4770      	bx	lr

0800486c <_fini>:
 800486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486e:	bf00      	nop
 8004870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004872:	bc08      	pop	{r3}
 8004874:	469e      	mov	lr, r3
 8004876:	4770      	bx	lr
